// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// nolint: lll
package pulumi

import (
	"context"
	"reflect"
	"sync"

	"github.com/pkg/errors"
)

type Output interface {
	ElementType() reflect.Type

	Apply(applier interface{}) Output
	ApplyWithContext(ctx context.Context, applier interface{}) Output
}

var concreteTypeToOutputType sync.Map // map[reflect.Type]reflect.Type

// RegisterOutputType registers an Output type with the Pulumi runtime. If a value of this type's concrete type is
// returned by an Apply, the Apply will return the specific Output type.
func RegisterOutputType(output Output) {
	refv := reflect.ValueOf(output)
	if !outputType.ConvertibleTo(refv.Type()) {
		panic(errors.Errorf("cannot convert from %v to %T", outputType, output))
	}

	elementType := output.ElementType()
	existing, hasExisting := concreteTypeToOutputType.LoadOrStore(elementType, refv.Type())
	if hasExisting {
		panic(errors.Errorf("an output type for %v is already registered: %v", elementType, existing))
	}
}

const (
	outputPending = iota
	outputResolved
	outputRejected
)

// Output helps encode the relationship between resources in a Pulumi application. Specifically an output property
// holds onto a value and the resource it came from. An output value can then be provided when constructing new
// resources, allowing that new resource to know both the value as well as the resource the value came from.  This
// allows for a precise "dependency graph" to be created, which properly tracks the relationship between resources.
type OutputType struct {
	*outputState // protect against value aliasing.
}

// outputState is a heap-allocated block of state for each output property, in case of aliasing.
type outputState struct {
	mutex sync.Mutex
	cond  *sync.Cond

	state uint32 // one of output{Pending,Resolved,Rejected}

	value interface{} // the value of this output if it is resolved.
	err   error       // the error associated with this output if it is rejected.
	known bool        // true if this output's value is known.

	deps []Resource // the dependencies associated with this output property.
}

func (o *outputState) dependencies() []Resource {
	if o == nil {
		return nil
	}
	return o.deps
}

func (o *outputState) fulfill(value interface{}, known bool, err error) {
	if o == nil {
		return
	}

	o.mutex.Lock()
	defer func() {
		o.mutex.Unlock()
		o.cond.Broadcast()
	}()

	if o.state != outputPending {
		return
	}

	if err != nil {
		o.state, o.err, o.known = outputRejected, err, true
	} else {
		o.state, o.value, o.known = outputResolved, value, known
	}
}

func (o *outputState) resolve(value interface{}, known bool) {
	o.fulfill(value, known, nil)
}

func (o *outputState) reject(err error) {
	o.fulfill(nil, true, err)
}

func (o *outputState) await(ctx context.Context) (interface{}, bool, error) {
	for {
		if o == nil {
			// If the state is nil, treat its value as resolved and unknown.
			return nil, false, nil
		}

		o.mutex.Lock()
		for o.state == outputPending {
			if ctx.Err() != nil {
				return nil, true, ctx.Err()
			}
			o.cond.Wait()
		}
		o.mutex.Unlock()

		if !o.known || o.err != nil {
			return nil, o.known, o.err
		}

		ov, ok := isOutput(o.value)
		if !ok {
			return o.value, true, nil
		}
		o = ov.outputState
	}
}

func newOutput(deps ...Resource) OutputType {
	out := OutputType{
		&outputState{
			deps: deps,
		},
	}
	out.outputState.cond = sync.NewCond(&out.outputState.mutex)
	return out
}

var outputType = reflect.TypeOf((*OutputType)(nil)).Elem()

func isOutput(v interface{}) (OutputType, bool) {
	if v != nil {
		rv := reflect.ValueOf(v)
		if rv.Type().ConvertibleTo(outputType) {
			return rv.Convert(outputType).Interface().(OutputType), true
		}
	}
	return OutputType{}, false
}

// NewOutput returns an output value that can be used to rendezvous with the production of a value or error.  The
// function returns the output itself, plus two functions: one for resolving a value, and another for rejecting with an
// error; exactly one function must be called. This acts like a promise.
func NewOutput() (AnyOutput, func(interface{}), func(error)) {
	out := newOutput()

	resolve := func(v interface{}) {
		out.resolve(v, true)
	}
	reject := func(err error) {
		out.reject(err)
	}

	return AnyOutput(out), resolve, reject
}

var contextType = reflect.TypeOf((*context.Context)(nil)).Elem()
var errorType = reflect.TypeOf((*error)(nil)).Elem()

func makeContextful(fn interface{}, elementType reflect.Type) interface{} {
	fv := reflect.ValueOf(fn)
	if fv.Kind() != reflect.Func {
		panic(errors.New("applier must be a function"))
	}

	ft := fv.Type()
	if ft.NumIn() != 1 || !elementType.AssignableTo(ft.In(0)) {
		panic(errors.Errorf("applier must have 1 input parameter assignable from %v", elementType))
	}

	var outs []reflect.Type
	switch ft.NumOut() {
	case 1:
		// Okay
		outs = []reflect.Type{ft.Out(0)}
	case 2:
		// Second out parameter must be of type error
		if !ft.Out(1).AssignableTo(errorType) {
			panic(errors.New("applier's second return type must be assignable to error"))
		}
		outs = []reflect.Type{ft.Out(0), ft.Out(1)}
	default:
		panic(errors.New("appplier must return exactly one or two values"))
	}

	ins := []reflect.Type{contextType, ft.In(0)}
	contextfulType := reflect.FuncOf(ins, outs, ft.IsVariadic())
	contextfulFunc := reflect.MakeFunc(contextfulType, func(args []reflect.Value) []reflect.Value {
		// Slice off the context argument and call the applier.
		return fv.Call(args[1:])
	})
	return contextfulFunc.Interface()
}

func checkApplier(fn interface{}, elementType reflect.Type) reflect.Value {
	fv := reflect.ValueOf(fn)
	if fv.Kind() != reflect.Func {
		panic(errors.New("applier must be a function"))
	}

	ft := fv.Type()
	if ft.NumIn() != 2 || !contextType.AssignableTo(ft.In(0)) || !elementType.AssignableTo(ft.In(1)) {
		panic(errors.Errorf("applier's input parameters must be assignable from %v and %v", contextType, elementType))
	}

	switch ft.NumOut() {
	case 1:
		// Okay
	case 2:
		// Second out parameter must be of type error
		if !ft.Out(1).AssignableTo(errorType) {
			panic(errors.New("applier's second return type must be assignable to error"))
		}
	default:
		panic(errors.New("appplier must return exactly one or two values"))
	}

	// Okay
	return fv
}

// Apply transforms the data of the output property using the applier func. The result remains an output
// property, and accumulates all implicated dependencies, so that resources can be properly tracked using a DAG.
// This function does not block awaiting the value; instead, it spawns a Goroutine that will await its availability.
// nolint: interfacer
func Apply(output Output, applier interface{}) Output {
	return ApplyWithContext(context.Background(), output, makeContextful(applier, output.ElementType()))
}

var anyOutputType = reflect.TypeOf((*AnyOutput)(nil)).Elem()

// ApplyWithContext transforms the data of the output property using the applier func. The result remains an output
// property, and accumulates all implicated dependencies, so that resources can be properly tracked using a DAG.
// This function does not block awaiting the value; instead, it spawns a Goroutine that will await its availability.
// The provided context can be used to reject the output as canceled.
// nolint: interfacer
func ApplyWithContext(ctx context.Context, output Output, applier interface{}) Output {
	fn := checkApplier(applier, output.ElementType())

	resultType := anyOutputType
	if ot, ok := concreteTypeToOutputType.Load(fn.Type().Out(0)); ok {
		resultType = ot.(reflect.Type)
	}

	out := reflect.ValueOf(output).Convert(outputType).Interface().(OutputType)
	result := newOutput(out.dependencies()...)
	go func() {
		v, known, err := out.await(ctx)
		if err != nil || !known {
			result.fulfill(nil, known, err)
			return
		}

		// If we have a known value, run the applier to transform it.
		results := fn.Call([]reflect.Value{reflect.ValueOf(ctx), reflect.ValueOf(v)})
		if len(results) == 2 && !results[1].IsNil() {
			result.reject(results[1].Interface().(error))
			return
		}

		// Fulfill the result.
		result.fulfill(results[0].Interface(), true, nil)
	}()
	return reflect.ValueOf(result).Convert(resultType).Interface().(Output)
}

func All(outputs ...Output) AnyArrayOutput {
	return AllWithContext(context.Background(), outputs...)
}

func AllWithContext(ctx context.Context, outputs ...Output) AnyArrayOutput {
	var deps []Resource
	var outs []OutputType
	for _, o := range outputs {
		out := reflect.ValueOf(o).Convert(outputType).Interface().(OutputType)
		deps, outs = append(deps, out.dependencies()...), append(outs, out)
	}

	result := newOutput(deps...)
	go func() {
		arr := make([]interface{}, len(outs))

		known := true
		for i, o := range outs {
			ov, oKnown, err := o.await(ctx)
			if err != nil {
				result.reject(err)
			}
			arr[i], known = ov, known && oKnown
		}
		result.fulfill(arr, known, nil)
	}()
	return AnyArrayOutput(result)
}

// Input is the type of a generic input value for a Pulumi resource. This type is used in conjunction with Output
// to provide polymorphism over strongly-typed input values.
//
// The intended pattern for nested Pulumi value types is to define an input interface and a plain, input, and output
// variant of the value type that implement the input interface.
//
// For example, given a nested Pulumi value type with the following shape:
//
//     type Nested struct {
//         Foo int
//         Bar string
//     }
//
// We would define the following:
//
//     var nestedType = reflect.TypeOf((*Nested)(nil))
//
//     type NestedInputType interface {
//         pulumi.Input
//
//         isNested()
//     }
//
//     type Nested struct {
//         Foo int `pulumi:"foo"`
//         Bar string `pulumi:"bar"`
//     }
//
//     func (*Nested) ElementType() reflect.Type {
//         return nestedType
//     }
//
//     func (*Nested) isNested() {}
//
//     type NestedInput struct {
//         Foo pulumi.IntInput `pulumi:"foo"`
//         Bar pulumi.StringInput `pulumi:"bar"`
//     }
//
//     func (*NestedInput) ElementType() reflect.Type {
//         return nestedType
//     }
//
//     func (*NestedInput) isNested() {}
//
//     type NestedOutput pulumi.Output
//
//     func (NestedOutput) ElementType() reflect.Type {
//         return nestedType
//     }
//
//     func (NestedOutput) isNested() {}
//
//     func (out NestedOutput) Apply(applier func(*Nested) (interface{}, error)) {
//         return out.ApplyWithContext(context.Background(), func(_ context.Context, v *Nested) (interface{}, error) {
//             return applier(v)
//         })
//     }
//
//     func (out NestedOutput) ApplyWithContext(ctx context.Context, applier func(context.Context, *Nested) (interface{}, error) {
//         return pulumi.Output(out).ApplyWithContext(ctx, func(ctx context.Context, v interface{}) (interface{}, error) {
//             return applier(ctx, v.(*Nested))
//         })
//     }
//
type Input interface {
	ElementType() reflect.Type
}

type anyInput struct {
	v interface{}
}

func Any(v interface{}) AnyInput {
	return anyInput{v: v}
}

var anyType = reflect.TypeOf((*interface{})(nil)).Elem()

// AnyInput is an input type that accepts Any and AnyOutput values.
type AnyInput interface {
	Input

	// nolint: unused
	isAny()
}

// ElementType returns the element type of this Input (interface{}).
func (anyInput) ElementType() reflect.Type {
	return anyType
}

func (anyInput) isAny() {}

// AnyOutput is an Output that returns interface{} values.
type AnyOutput OutputType

// ElementType returns the element type of this Output (interface{}).
func (AnyOutput) ElementType() reflect.Type {
	return anyType
}

func (AnyOutput) isAny() {}

// Apply applies a transformation to the any value when it is available.
func (out AnyOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the any value when it is available.
func (out AnyOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out AnyOutput) ApplyAny(applier func(v interface{}) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v interface{}) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out AnyOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, interface{}) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out AnyOutput) ApplyAnyArray(applier func(v interface{}) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out AnyOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out AnyOutput) ApplyAnyMap(applier func(v interface{}) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out AnyOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out AnyOutput) ApplyArchive(applier func(v interface{}) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v interface{}) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out AnyOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, interface{}) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out AnyOutput) ApplyArchiveArray(applier func(v interface{}) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out AnyOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out AnyOutput) ApplyArchiveMap(applier func(v interface{}) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out AnyOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out AnyOutput) ApplyAsset(applier func(v interface{}) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v interface{}) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out AnyOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, interface{}) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out AnyOutput) ApplyAssetArray(applier func(v interface{}) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out AnyOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out AnyOutput) ApplyAssetMap(applier func(v interface{}) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out AnyOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out AnyOutput) ApplyAssetOrArchive(applier func(v interface{}) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v interface{}) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out AnyOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, interface{}) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out AnyOutput) ApplyAssetOrArchiveArray(applier func(v interface{}) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out AnyOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out AnyOutput) ApplyAssetOrArchiveMap(applier func(v interface{}) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out AnyOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out AnyOutput) ApplyBool(applier func(v interface{}) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v interface{}) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out AnyOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, interface{}) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out AnyOutput) ApplyBoolArray(applier func(v interface{}) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out AnyOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out AnyOutput) ApplyBoolMap(applier func(v interface{}) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out AnyOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out AnyOutput) ApplyFloat32(applier func(v interface{}) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v interface{}) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out AnyOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, interface{}) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out AnyOutput) ApplyFloat32Array(applier func(v interface{}) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out AnyOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out AnyOutput) ApplyFloat32Map(applier func(v interface{}) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out AnyOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out AnyOutput) ApplyFloat64(applier func(v interface{}) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v interface{}) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out AnyOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, interface{}) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out AnyOutput) ApplyFloat64Array(applier func(v interface{}) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out AnyOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out AnyOutput) ApplyFloat64Map(applier func(v interface{}) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out AnyOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out AnyOutput) ApplyID(applier func(v interface{}) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v interface{}) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out AnyOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, interface{}) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out AnyOutput) ApplyIDArray(applier func(v interface{}) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out AnyOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out AnyOutput) ApplyIDMap(applier func(v interface{}) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out AnyOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out AnyOutput) ApplyInt(applier func(v interface{}) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v interface{}) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out AnyOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, interface{}) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out AnyOutput) ApplyIntArray(applier func(v interface{}) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out AnyOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out AnyOutput) ApplyIntMap(applier func(v interface{}) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out AnyOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out AnyOutput) ApplyInt16(applier func(v interface{}) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v interface{}) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out AnyOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, interface{}) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out AnyOutput) ApplyInt16Array(applier func(v interface{}) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out AnyOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out AnyOutput) ApplyInt16Map(applier func(v interface{}) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out AnyOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out AnyOutput) ApplyInt32(applier func(v interface{}) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v interface{}) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out AnyOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, interface{}) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out AnyOutput) ApplyInt32Array(applier func(v interface{}) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out AnyOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out AnyOutput) ApplyInt32Map(applier func(v interface{}) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out AnyOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out AnyOutput) ApplyInt64(applier func(v interface{}) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v interface{}) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out AnyOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, interface{}) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out AnyOutput) ApplyInt64Array(applier func(v interface{}) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out AnyOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out AnyOutput) ApplyInt64Map(applier func(v interface{}) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out AnyOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out AnyOutput) ApplyInt8(applier func(v interface{}) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v interface{}) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out AnyOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, interface{}) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out AnyOutput) ApplyInt8Array(applier func(v interface{}) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out AnyOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out AnyOutput) ApplyInt8Map(applier func(v interface{}) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out AnyOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out AnyOutput) ApplyString(applier func(v interface{}) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v interface{}) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out AnyOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, interface{}) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out AnyOutput) ApplyStringArray(applier func(v interface{}) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out AnyOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out AnyOutput) ApplyStringMap(applier func(v interface{}) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out AnyOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out AnyOutput) ApplyURN(applier func(v interface{}) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v interface{}) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out AnyOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, interface{}) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out AnyOutput) ApplyURNArray(applier func(v interface{}) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out AnyOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out AnyOutput) ApplyURNMap(applier func(v interface{}) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out AnyOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out AnyOutput) ApplyUint(applier func(v interface{}) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v interface{}) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out AnyOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, interface{}) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out AnyOutput) ApplyUintArray(applier func(v interface{}) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out AnyOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out AnyOutput) ApplyUintMap(applier func(v interface{}) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out AnyOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out AnyOutput) ApplyUint16(applier func(v interface{}) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v interface{}) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out AnyOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, interface{}) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out AnyOutput) ApplyUint16Array(applier func(v interface{}) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out AnyOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out AnyOutput) ApplyUint16Map(applier func(v interface{}) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out AnyOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out AnyOutput) ApplyUint32(applier func(v interface{}) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v interface{}) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out AnyOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, interface{}) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out AnyOutput) ApplyUint32Array(applier func(v interface{}) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out AnyOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out AnyOutput) ApplyUint32Map(applier func(v interface{}) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out AnyOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out AnyOutput) ApplyUint64(applier func(v interface{}) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v interface{}) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out AnyOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, interface{}) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out AnyOutput) ApplyUint64Array(applier func(v interface{}) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out AnyOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out AnyOutput) ApplyUint64Map(applier func(v interface{}) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out AnyOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out AnyOutput) ApplyUint8(applier func(v interface{}) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v interface{}) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out AnyOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, interface{}) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out AnyOutput) ApplyUint8Array(applier func(v interface{}) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v interface{}) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out AnyOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, interface{}) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out AnyOutput) ApplyUint8Map(applier func(v interface{}) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v interface{}) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out AnyOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, interface{}) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var anyarrayType = reflect.TypeOf((*[]interface{})(nil)).Elem()

// AnyArrayInput is an input type that accepts AnyArray and AnyArrayOutput values.
type AnyArrayInput interface {
	Input

	// nolint: unused
	isAnyArray()
}

// AnyArray is an input type for []interface{} values.
type AnyArray []interface{}

// ElementType returns the element type of this Input ([]interface{}).
func (AnyArray) ElementType() reflect.Type {
	return anyarrayType
}

func (AnyArray) isAnyArray() {}

// AnyArrayOutput is an Output that returns []interface{} values.
type AnyArrayOutput OutputType

// ElementType returns the element type of this Output ([]interface{}).
func (AnyArrayOutput) ElementType() reflect.Type {
	return anyarrayType
}

func (AnyArrayOutput) isAnyArray() {}

// Apply applies a transformation to the anyarray value when it is available.
func (out AnyArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the anyarray value when it is available.
func (out AnyArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out AnyArrayOutput) ApplyAny(applier func(v []interface{}) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []interface{}) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out AnyArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []interface{}) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out AnyArrayOutput) ApplyAnyArray(applier func(v []interface{}) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out AnyArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out AnyArrayOutput) ApplyAnyMap(applier func(v []interface{}) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out AnyArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out AnyArrayOutput) ApplyArchive(applier func(v []interface{}) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []interface{}) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out AnyArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []interface{}) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out AnyArrayOutput) ApplyArchiveArray(applier func(v []interface{}) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out AnyArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out AnyArrayOutput) ApplyArchiveMap(applier func(v []interface{}) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out AnyArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out AnyArrayOutput) ApplyAsset(applier func(v []interface{}) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []interface{}) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out AnyArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []interface{}) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out AnyArrayOutput) ApplyAssetArray(applier func(v []interface{}) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out AnyArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out AnyArrayOutput) ApplyAssetMap(applier func(v []interface{}) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out AnyArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out AnyArrayOutput) ApplyAssetOrArchive(applier func(v []interface{}) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []interface{}) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out AnyArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []interface{}) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out AnyArrayOutput) ApplyAssetOrArchiveArray(applier func(v []interface{}) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out AnyArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out AnyArrayOutput) ApplyAssetOrArchiveMap(applier func(v []interface{}) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out AnyArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out AnyArrayOutput) ApplyBool(applier func(v []interface{}) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []interface{}) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out AnyArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []interface{}) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out AnyArrayOutput) ApplyBoolArray(applier func(v []interface{}) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out AnyArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out AnyArrayOutput) ApplyBoolMap(applier func(v []interface{}) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out AnyArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out AnyArrayOutput) ApplyFloat32(applier func(v []interface{}) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []interface{}) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out AnyArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []interface{}) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out AnyArrayOutput) ApplyFloat32Array(applier func(v []interface{}) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out AnyArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out AnyArrayOutput) ApplyFloat32Map(applier func(v []interface{}) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out AnyArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out AnyArrayOutput) ApplyFloat64(applier func(v []interface{}) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []interface{}) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out AnyArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []interface{}) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out AnyArrayOutput) ApplyFloat64Array(applier func(v []interface{}) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out AnyArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out AnyArrayOutput) ApplyFloat64Map(applier func(v []interface{}) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out AnyArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out AnyArrayOutput) ApplyID(applier func(v []interface{}) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []interface{}) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out AnyArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []interface{}) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out AnyArrayOutput) ApplyIDArray(applier func(v []interface{}) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out AnyArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out AnyArrayOutput) ApplyIDMap(applier func(v []interface{}) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out AnyArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out AnyArrayOutput) ApplyInt(applier func(v []interface{}) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []interface{}) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out AnyArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []interface{}) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out AnyArrayOutput) ApplyIntArray(applier func(v []interface{}) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out AnyArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out AnyArrayOutput) ApplyIntMap(applier func(v []interface{}) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out AnyArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out AnyArrayOutput) ApplyInt16(applier func(v []interface{}) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []interface{}) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out AnyArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []interface{}) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out AnyArrayOutput) ApplyInt16Array(applier func(v []interface{}) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out AnyArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out AnyArrayOutput) ApplyInt16Map(applier func(v []interface{}) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out AnyArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out AnyArrayOutput) ApplyInt32(applier func(v []interface{}) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []interface{}) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out AnyArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []interface{}) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out AnyArrayOutput) ApplyInt32Array(applier func(v []interface{}) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out AnyArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out AnyArrayOutput) ApplyInt32Map(applier func(v []interface{}) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out AnyArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out AnyArrayOutput) ApplyInt64(applier func(v []interface{}) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []interface{}) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out AnyArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []interface{}) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out AnyArrayOutput) ApplyInt64Array(applier func(v []interface{}) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out AnyArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out AnyArrayOutput) ApplyInt64Map(applier func(v []interface{}) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out AnyArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out AnyArrayOutput) ApplyInt8(applier func(v []interface{}) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []interface{}) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out AnyArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []interface{}) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out AnyArrayOutput) ApplyInt8Array(applier func(v []interface{}) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out AnyArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out AnyArrayOutput) ApplyInt8Map(applier func(v []interface{}) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out AnyArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out AnyArrayOutput) ApplyString(applier func(v []interface{}) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []interface{}) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out AnyArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []interface{}) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out AnyArrayOutput) ApplyStringArray(applier func(v []interface{}) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out AnyArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out AnyArrayOutput) ApplyStringMap(applier func(v []interface{}) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out AnyArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out AnyArrayOutput) ApplyURN(applier func(v []interface{}) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []interface{}) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out AnyArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []interface{}) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out AnyArrayOutput) ApplyURNArray(applier func(v []interface{}) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out AnyArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out AnyArrayOutput) ApplyURNMap(applier func(v []interface{}) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out AnyArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out AnyArrayOutput) ApplyUint(applier func(v []interface{}) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []interface{}) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out AnyArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []interface{}) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out AnyArrayOutput) ApplyUintArray(applier func(v []interface{}) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out AnyArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out AnyArrayOutput) ApplyUintMap(applier func(v []interface{}) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out AnyArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out AnyArrayOutput) ApplyUint16(applier func(v []interface{}) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []interface{}) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out AnyArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []interface{}) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out AnyArrayOutput) ApplyUint16Array(applier func(v []interface{}) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out AnyArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out AnyArrayOutput) ApplyUint16Map(applier func(v []interface{}) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out AnyArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out AnyArrayOutput) ApplyUint32(applier func(v []interface{}) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []interface{}) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out AnyArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []interface{}) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out AnyArrayOutput) ApplyUint32Array(applier func(v []interface{}) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out AnyArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out AnyArrayOutput) ApplyUint32Map(applier func(v []interface{}) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out AnyArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out AnyArrayOutput) ApplyUint64(applier func(v []interface{}) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []interface{}) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out AnyArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []interface{}) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out AnyArrayOutput) ApplyUint64Array(applier func(v []interface{}) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out AnyArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out AnyArrayOutput) ApplyUint64Map(applier func(v []interface{}) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out AnyArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out AnyArrayOutput) ApplyUint8(applier func(v []interface{}) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []interface{}) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out AnyArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []interface{}) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out AnyArrayOutput) ApplyUint8Array(applier func(v []interface{}) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []interface{}) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out AnyArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []interface{}) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out AnyArrayOutput) ApplyUint8Map(applier func(v []interface{}) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []interface{}) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out AnyArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []interface{}) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var anymapType = reflect.TypeOf((*map[string]interface{})(nil)).Elem()

// AnyMapInput is an input type that accepts AnyMap and AnyMapOutput values.
type AnyMapInput interface {
	Input

	// nolint: unused
	isAnyMap()
}

// AnyMap is an input type for map[string]interface{} values.
type AnyMap map[string]interface{}

// ElementType returns the element type of this Input (map[string]interface{}).
func (AnyMap) ElementType() reflect.Type {
	return anymapType
}

func (AnyMap) isAnyMap() {}

// AnyMapOutput is an Output that returns map[string]interface{} values.
type AnyMapOutput OutputType

// ElementType returns the element type of this Output (map[string]interface{}).
func (AnyMapOutput) ElementType() reflect.Type {
	return anymapType
}

func (AnyMapOutput) isAnyMap() {}

// Apply applies a transformation to the anymap value when it is available.
func (out AnyMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the anymap value when it is available.
func (out AnyMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out AnyMapOutput) ApplyAny(applier func(v map[string]interface{}) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out AnyMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out AnyMapOutput) ApplyAnyArray(applier func(v map[string]interface{}) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out AnyMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out AnyMapOutput) ApplyAnyMap(applier func(v map[string]interface{}) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out AnyMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out AnyMapOutput) ApplyArchive(applier func(v map[string]interface{}) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out AnyMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out AnyMapOutput) ApplyArchiveArray(applier func(v map[string]interface{}) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out AnyMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out AnyMapOutput) ApplyArchiveMap(applier func(v map[string]interface{}) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out AnyMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out AnyMapOutput) ApplyAsset(applier func(v map[string]interface{}) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out AnyMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out AnyMapOutput) ApplyAssetArray(applier func(v map[string]interface{}) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out AnyMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out AnyMapOutput) ApplyAssetMap(applier func(v map[string]interface{}) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out AnyMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out AnyMapOutput) ApplyAssetOrArchive(applier func(v map[string]interface{}) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out AnyMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out AnyMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]interface{}) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out AnyMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out AnyMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]interface{}) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out AnyMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out AnyMapOutput) ApplyBool(applier func(v map[string]interface{}) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out AnyMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out AnyMapOutput) ApplyBoolArray(applier func(v map[string]interface{}) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out AnyMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out AnyMapOutput) ApplyBoolMap(applier func(v map[string]interface{}) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out AnyMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out AnyMapOutput) ApplyFloat32(applier func(v map[string]interface{}) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out AnyMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out AnyMapOutput) ApplyFloat32Array(applier func(v map[string]interface{}) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out AnyMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out AnyMapOutput) ApplyFloat32Map(applier func(v map[string]interface{}) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out AnyMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out AnyMapOutput) ApplyFloat64(applier func(v map[string]interface{}) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out AnyMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out AnyMapOutput) ApplyFloat64Array(applier func(v map[string]interface{}) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out AnyMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out AnyMapOutput) ApplyFloat64Map(applier func(v map[string]interface{}) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out AnyMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out AnyMapOutput) ApplyID(applier func(v map[string]interface{}) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out AnyMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out AnyMapOutput) ApplyIDArray(applier func(v map[string]interface{}) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out AnyMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out AnyMapOutput) ApplyIDMap(applier func(v map[string]interface{}) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out AnyMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out AnyMapOutput) ApplyInt(applier func(v map[string]interface{}) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out AnyMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out AnyMapOutput) ApplyIntArray(applier func(v map[string]interface{}) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out AnyMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out AnyMapOutput) ApplyIntMap(applier func(v map[string]interface{}) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out AnyMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out AnyMapOutput) ApplyInt16(applier func(v map[string]interface{}) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out AnyMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out AnyMapOutput) ApplyInt16Array(applier func(v map[string]interface{}) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out AnyMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out AnyMapOutput) ApplyInt16Map(applier func(v map[string]interface{}) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out AnyMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out AnyMapOutput) ApplyInt32(applier func(v map[string]interface{}) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out AnyMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out AnyMapOutput) ApplyInt32Array(applier func(v map[string]interface{}) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out AnyMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out AnyMapOutput) ApplyInt32Map(applier func(v map[string]interface{}) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out AnyMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out AnyMapOutput) ApplyInt64(applier func(v map[string]interface{}) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out AnyMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out AnyMapOutput) ApplyInt64Array(applier func(v map[string]interface{}) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out AnyMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out AnyMapOutput) ApplyInt64Map(applier func(v map[string]interface{}) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out AnyMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out AnyMapOutput) ApplyInt8(applier func(v map[string]interface{}) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out AnyMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out AnyMapOutput) ApplyInt8Array(applier func(v map[string]interface{}) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out AnyMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out AnyMapOutput) ApplyInt8Map(applier func(v map[string]interface{}) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out AnyMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out AnyMapOutput) ApplyString(applier func(v map[string]interface{}) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out AnyMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out AnyMapOutput) ApplyStringArray(applier func(v map[string]interface{}) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out AnyMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out AnyMapOutput) ApplyStringMap(applier func(v map[string]interface{}) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out AnyMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out AnyMapOutput) ApplyURN(applier func(v map[string]interface{}) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out AnyMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out AnyMapOutput) ApplyURNArray(applier func(v map[string]interface{}) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out AnyMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out AnyMapOutput) ApplyURNMap(applier func(v map[string]interface{}) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out AnyMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out AnyMapOutput) ApplyUint(applier func(v map[string]interface{}) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out AnyMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out AnyMapOutput) ApplyUintArray(applier func(v map[string]interface{}) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out AnyMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out AnyMapOutput) ApplyUintMap(applier func(v map[string]interface{}) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out AnyMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out AnyMapOutput) ApplyUint16(applier func(v map[string]interface{}) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out AnyMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out AnyMapOutput) ApplyUint16Array(applier func(v map[string]interface{}) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out AnyMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out AnyMapOutput) ApplyUint16Map(applier func(v map[string]interface{}) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out AnyMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out AnyMapOutput) ApplyUint32(applier func(v map[string]interface{}) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out AnyMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out AnyMapOutput) ApplyUint32Array(applier func(v map[string]interface{}) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out AnyMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out AnyMapOutput) ApplyUint32Map(applier func(v map[string]interface{}) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out AnyMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out AnyMapOutput) ApplyUint64(applier func(v map[string]interface{}) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out AnyMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out AnyMapOutput) ApplyUint64Array(applier func(v map[string]interface{}) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out AnyMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out AnyMapOutput) ApplyUint64Map(applier func(v map[string]interface{}) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out AnyMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out AnyMapOutput) ApplyUint8(applier func(v map[string]interface{}) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out AnyMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out AnyMapOutput) ApplyUint8Array(applier func(v map[string]interface{}) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out AnyMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out AnyMapOutput) ApplyUint8Map(applier func(v map[string]interface{}) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]interface{}) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out AnyMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]interface{}) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var archiveType = reflect.TypeOf((*Archive)(nil)).Elem()

// ArchiveInput is an input type that accepts Archive and ArchiveOutput values.
type ArchiveInput interface {
	Input

	// nolint: unused
	isArchive()
}

// ElementType returns the element type of this Input (Archive).
func (*archive) ElementType() reflect.Type {
	return archiveType
}

func (*archive) isArchive() {}

func (*archive) isAssetOrArchive() {}

// ArchiveOutput is an Output that returns Archive values.
type ArchiveOutput OutputType

// ElementType returns the element type of this Output (Archive).
func (ArchiveOutput) ElementType() reflect.Type {
	return archiveType
}

func (ArchiveOutput) isArchive() {}

func (ArchiveOutput) isAssetOrArchive() {}

// Apply applies a transformation to the archive value when it is available.
func (out ArchiveOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the archive value when it is available.
func (out ArchiveOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out ArchiveOutput) ApplyAny(applier func(v Archive) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v Archive) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out ArchiveOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, Archive) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out ArchiveOutput) ApplyAnyArray(applier func(v Archive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out ArchiveOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out ArchiveOutput) ApplyAnyMap(applier func(v Archive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out ArchiveOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out ArchiveOutput) ApplyArchive(applier func(v Archive) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v Archive) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out ArchiveOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, Archive) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out ArchiveOutput) ApplyArchiveArray(applier func(v Archive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out ArchiveOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out ArchiveOutput) ApplyArchiveMap(applier func(v Archive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out ArchiveOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out ArchiveOutput) ApplyAsset(applier func(v Archive) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v Archive) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out ArchiveOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, Archive) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out ArchiveOutput) ApplyAssetArray(applier func(v Archive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out ArchiveOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out ArchiveOutput) ApplyAssetMap(applier func(v Archive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out ArchiveOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out ArchiveOutput) ApplyAssetOrArchive(applier func(v Archive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v Archive) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out ArchiveOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, Archive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out ArchiveOutput) ApplyAssetOrArchiveArray(applier func(v Archive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out ArchiveOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out ArchiveOutput) ApplyAssetOrArchiveMap(applier func(v Archive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out ArchiveOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out ArchiveOutput) ApplyBool(applier func(v Archive) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v Archive) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out ArchiveOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, Archive) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out ArchiveOutput) ApplyBoolArray(applier func(v Archive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out ArchiveOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out ArchiveOutput) ApplyBoolMap(applier func(v Archive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out ArchiveOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out ArchiveOutput) ApplyFloat32(applier func(v Archive) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v Archive) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out ArchiveOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, Archive) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out ArchiveOutput) ApplyFloat32Array(applier func(v Archive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out ArchiveOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out ArchiveOutput) ApplyFloat32Map(applier func(v Archive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out ArchiveOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out ArchiveOutput) ApplyFloat64(applier func(v Archive) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v Archive) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out ArchiveOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, Archive) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out ArchiveOutput) ApplyFloat64Array(applier func(v Archive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out ArchiveOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out ArchiveOutput) ApplyFloat64Map(applier func(v Archive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out ArchiveOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out ArchiveOutput) ApplyID(applier func(v Archive) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v Archive) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out ArchiveOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, Archive) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out ArchiveOutput) ApplyIDArray(applier func(v Archive) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out ArchiveOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out ArchiveOutput) ApplyIDMap(applier func(v Archive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out ArchiveOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out ArchiveOutput) ApplyInt(applier func(v Archive) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v Archive) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out ArchiveOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, Archive) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out ArchiveOutput) ApplyIntArray(applier func(v Archive) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out ArchiveOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out ArchiveOutput) ApplyIntMap(applier func(v Archive) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out ArchiveOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out ArchiveOutput) ApplyInt16(applier func(v Archive) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v Archive) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out ArchiveOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, Archive) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out ArchiveOutput) ApplyInt16Array(applier func(v Archive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out ArchiveOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out ArchiveOutput) ApplyInt16Map(applier func(v Archive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out ArchiveOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out ArchiveOutput) ApplyInt32(applier func(v Archive) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v Archive) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out ArchiveOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, Archive) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out ArchiveOutput) ApplyInt32Array(applier func(v Archive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out ArchiveOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out ArchiveOutput) ApplyInt32Map(applier func(v Archive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out ArchiveOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out ArchiveOutput) ApplyInt64(applier func(v Archive) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v Archive) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out ArchiveOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, Archive) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out ArchiveOutput) ApplyInt64Array(applier func(v Archive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out ArchiveOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out ArchiveOutput) ApplyInt64Map(applier func(v Archive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out ArchiveOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out ArchiveOutput) ApplyInt8(applier func(v Archive) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v Archive) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out ArchiveOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, Archive) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out ArchiveOutput) ApplyInt8Array(applier func(v Archive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out ArchiveOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out ArchiveOutput) ApplyInt8Map(applier func(v Archive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out ArchiveOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out ArchiveOutput) ApplyString(applier func(v Archive) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v Archive) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out ArchiveOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, Archive) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out ArchiveOutput) ApplyStringArray(applier func(v Archive) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out ArchiveOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out ArchiveOutput) ApplyStringMap(applier func(v Archive) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out ArchiveOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out ArchiveOutput) ApplyURN(applier func(v Archive) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v Archive) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out ArchiveOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, Archive) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out ArchiveOutput) ApplyURNArray(applier func(v Archive) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out ArchiveOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out ArchiveOutput) ApplyURNMap(applier func(v Archive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out ArchiveOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out ArchiveOutput) ApplyUint(applier func(v Archive) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v Archive) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out ArchiveOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, Archive) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out ArchiveOutput) ApplyUintArray(applier func(v Archive) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out ArchiveOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out ArchiveOutput) ApplyUintMap(applier func(v Archive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out ArchiveOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out ArchiveOutput) ApplyUint16(applier func(v Archive) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v Archive) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out ArchiveOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, Archive) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out ArchiveOutput) ApplyUint16Array(applier func(v Archive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out ArchiveOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out ArchiveOutput) ApplyUint16Map(applier func(v Archive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out ArchiveOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out ArchiveOutput) ApplyUint32(applier func(v Archive) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v Archive) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out ArchiveOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, Archive) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out ArchiveOutput) ApplyUint32Array(applier func(v Archive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out ArchiveOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out ArchiveOutput) ApplyUint32Map(applier func(v Archive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out ArchiveOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out ArchiveOutput) ApplyUint64(applier func(v Archive) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v Archive) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out ArchiveOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, Archive) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out ArchiveOutput) ApplyUint64Array(applier func(v Archive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out ArchiveOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out ArchiveOutput) ApplyUint64Map(applier func(v Archive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out ArchiveOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out ArchiveOutput) ApplyUint8(applier func(v Archive) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v Archive) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out ArchiveOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, Archive) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out ArchiveOutput) ApplyUint8Array(applier func(v Archive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v Archive) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out ArchiveOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, Archive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out ArchiveOutput) ApplyUint8Map(applier func(v Archive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v Archive) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out ArchiveOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, Archive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var archivearrayType = reflect.TypeOf((*[]Archive)(nil)).Elem()

// ArchiveArrayInput is an input type that accepts ArchiveArray and ArchiveArrayOutput values.
type ArchiveArrayInput interface {
	Input

	// nolint: unused
	isArchiveArray()
}

// ArchiveArray is an input type for []Archive values.
type ArchiveArray []Archive

// ElementType returns the element type of this Input ([]Archive).
func (ArchiveArray) ElementType() reflect.Type {
	return archivearrayType
}

func (ArchiveArray) isArchiveArray() {}

// ArchiveArrayOutput is an Output that returns []Archive values.
type ArchiveArrayOutput OutputType

// ElementType returns the element type of this Output ([]Archive).
func (ArchiveArrayOutput) ElementType() reflect.Type {
	return archivearrayType
}

func (ArchiveArrayOutput) isArchiveArray() {}

// Apply applies a transformation to the archivearray value when it is available.
func (out ArchiveArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the archivearray value when it is available.
func (out ArchiveArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out ArchiveArrayOutput) ApplyAny(applier func(v []Archive) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []Archive) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out ArchiveArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []Archive) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out ArchiveArrayOutput) ApplyAnyArray(applier func(v []Archive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out ArchiveArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out ArchiveArrayOutput) ApplyAnyMap(applier func(v []Archive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out ArchiveArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out ArchiveArrayOutput) ApplyArchive(applier func(v []Archive) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []Archive) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out ArchiveArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []Archive) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out ArchiveArrayOutput) ApplyArchiveArray(applier func(v []Archive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out ArchiveArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out ArchiveArrayOutput) ApplyArchiveMap(applier func(v []Archive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out ArchiveArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out ArchiveArrayOutput) ApplyAsset(applier func(v []Archive) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []Archive) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out ArchiveArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []Archive) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out ArchiveArrayOutput) ApplyAssetArray(applier func(v []Archive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out ArchiveArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out ArchiveArrayOutput) ApplyAssetMap(applier func(v []Archive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out ArchiveArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out ArchiveArrayOutput) ApplyAssetOrArchive(applier func(v []Archive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []Archive) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out ArchiveArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []Archive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out ArchiveArrayOutput) ApplyAssetOrArchiveArray(applier func(v []Archive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out ArchiveArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out ArchiveArrayOutput) ApplyAssetOrArchiveMap(applier func(v []Archive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out ArchiveArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out ArchiveArrayOutput) ApplyBool(applier func(v []Archive) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []Archive) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out ArchiveArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []Archive) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out ArchiveArrayOutput) ApplyBoolArray(applier func(v []Archive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out ArchiveArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out ArchiveArrayOutput) ApplyBoolMap(applier func(v []Archive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out ArchiveArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out ArchiveArrayOutput) ApplyFloat32(applier func(v []Archive) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []Archive) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out ArchiveArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []Archive) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out ArchiveArrayOutput) ApplyFloat32Array(applier func(v []Archive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out ArchiveArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out ArchiveArrayOutput) ApplyFloat32Map(applier func(v []Archive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out ArchiveArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out ArchiveArrayOutput) ApplyFloat64(applier func(v []Archive) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []Archive) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out ArchiveArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []Archive) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out ArchiveArrayOutput) ApplyFloat64Array(applier func(v []Archive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out ArchiveArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out ArchiveArrayOutput) ApplyFloat64Map(applier func(v []Archive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out ArchiveArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out ArchiveArrayOutput) ApplyID(applier func(v []Archive) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []Archive) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out ArchiveArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []Archive) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out ArchiveArrayOutput) ApplyIDArray(applier func(v []Archive) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out ArchiveArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out ArchiveArrayOutput) ApplyIDMap(applier func(v []Archive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out ArchiveArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out ArchiveArrayOutput) ApplyInt(applier func(v []Archive) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []Archive) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out ArchiveArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []Archive) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out ArchiveArrayOutput) ApplyIntArray(applier func(v []Archive) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out ArchiveArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out ArchiveArrayOutput) ApplyIntMap(applier func(v []Archive) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out ArchiveArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out ArchiveArrayOutput) ApplyInt16(applier func(v []Archive) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []Archive) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out ArchiveArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []Archive) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out ArchiveArrayOutput) ApplyInt16Array(applier func(v []Archive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out ArchiveArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out ArchiveArrayOutput) ApplyInt16Map(applier func(v []Archive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out ArchiveArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out ArchiveArrayOutput) ApplyInt32(applier func(v []Archive) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []Archive) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out ArchiveArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []Archive) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out ArchiveArrayOutput) ApplyInt32Array(applier func(v []Archive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out ArchiveArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out ArchiveArrayOutput) ApplyInt32Map(applier func(v []Archive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out ArchiveArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out ArchiveArrayOutput) ApplyInt64(applier func(v []Archive) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []Archive) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out ArchiveArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []Archive) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out ArchiveArrayOutput) ApplyInt64Array(applier func(v []Archive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out ArchiveArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out ArchiveArrayOutput) ApplyInt64Map(applier func(v []Archive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out ArchiveArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out ArchiveArrayOutput) ApplyInt8(applier func(v []Archive) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []Archive) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out ArchiveArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []Archive) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out ArchiveArrayOutput) ApplyInt8Array(applier func(v []Archive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out ArchiveArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out ArchiveArrayOutput) ApplyInt8Map(applier func(v []Archive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out ArchiveArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out ArchiveArrayOutput) ApplyString(applier func(v []Archive) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []Archive) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out ArchiveArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []Archive) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out ArchiveArrayOutput) ApplyStringArray(applier func(v []Archive) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out ArchiveArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out ArchiveArrayOutput) ApplyStringMap(applier func(v []Archive) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out ArchiveArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out ArchiveArrayOutput) ApplyURN(applier func(v []Archive) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []Archive) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out ArchiveArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []Archive) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out ArchiveArrayOutput) ApplyURNArray(applier func(v []Archive) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out ArchiveArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out ArchiveArrayOutput) ApplyURNMap(applier func(v []Archive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out ArchiveArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out ArchiveArrayOutput) ApplyUint(applier func(v []Archive) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []Archive) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out ArchiveArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []Archive) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out ArchiveArrayOutput) ApplyUintArray(applier func(v []Archive) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out ArchiveArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out ArchiveArrayOutput) ApplyUintMap(applier func(v []Archive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out ArchiveArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out ArchiveArrayOutput) ApplyUint16(applier func(v []Archive) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []Archive) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out ArchiveArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []Archive) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out ArchiveArrayOutput) ApplyUint16Array(applier func(v []Archive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out ArchiveArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out ArchiveArrayOutput) ApplyUint16Map(applier func(v []Archive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out ArchiveArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out ArchiveArrayOutput) ApplyUint32(applier func(v []Archive) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []Archive) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out ArchiveArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []Archive) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out ArchiveArrayOutput) ApplyUint32Array(applier func(v []Archive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out ArchiveArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out ArchiveArrayOutput) ApplyUint32Map(applier func(v []Archive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out ArchiveArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out ArchiveArrayOutput) ApplyUint64(applier func(v []Archive) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []Archive) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out ArchiveArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []Archive) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out ArchiveArrayOutput) ApplyUint64Array(applier func(v []Archive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out ArchiveArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out ArchiveArrayOutput) ApplyUint64Map(applier func(v []Archive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out ArchiveArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out ArchiveArrayOutput) ApplyUint8(applier func(v []Archive) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []Archive) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out ArchiveArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []Archive) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out ArchiveArrayOutput) ApplyUint8Array(applier func(v []Archive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []Archive) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out ArchiveArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []Archive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out ArchiveArrayOutput) ApplyUint8Map(applier func(v []Archive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []Archive) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out ArchiveArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []Archive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var archivemapType = reflect.TypeOf((*map[string]Archive)(nil)).Elem()

// ArchiveMapInput is an input type that accepts ArchiveMap and ArchiveMapOutput values.
type ArchiveMapInput interface {
	Input

	// nolint: unused
	isArchiveMap()
}

// ArchiveMap is an input type for map[string]Archive values.
type ArchiveMap map[string]Archive

// ElementType returns the element type of this Input (map[string]Archive).
func (ArchiveMap) ElementType() reflect.Type {
	return archivemapType
}

func (ArchiveMap) isArchiveMap() {}

// ArchiveMapOutput is an Output that returns map[string]Archive values.
type ArchiveMapOutput OutputType

// ElementType returns the element type of this Output (map[string]Archive).
func (ArchiveMapOutput) ElementType() reflect.Type {
	return archivemapType
}

func (ArchiveMapOutput) isArchiveMap() {}

// Apply applies a transformation to the archivemap value when it is available.
func (out ArchiveMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the archivemap value when it is available.
func (out ArchiveMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out ArchiveMapOutput) ApplyAny(applier func(v map[string]Archive) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out ArchiveMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out ArchiveMapOutput) ApplyAnyArray(applier func(v map[string]Archive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out ArchiveMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out ArchiveMapOutput) ApplyAnyMap(applier func(v map[string]Archive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out ArchiveMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out ArchiveMapOutput) ApplyArchive(applier func(v map[string]Archive) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out ArchiveMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out ArchiveMapOutput) ApplyArchiveArray(applier func(v map[string]Archive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out ArchiveMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out ArchiveMapOutput) ApplyArchiveMap(applier func(v map[string]Archive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out ArchiveMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out ArchiveMapOutput) ApplyAsset(applier func(v map[string]Archive) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out ArchiveMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out ArchiveMapOutput) ApplyAssetArray(applier func(v map[string]Archive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out ArchiveMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out ArchiveMapOutput) ApplyAssetMap(applier func(v map[string]Archive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out ArchiveMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out ArchiveMapOutput) ApplyAssetOrArchive(applier func(v map[string]Archive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out ArchiveMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out ArchiveMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]Archive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out ArchiveMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out ArchiveMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]Archive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out ArchiveMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out ArchiveMapOutput) ApplyBool(applier func(v map[string]Archive) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out ArchiveMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out ArchiveMapOutput) ApplyBoolArray(applier func(v map[string]Archive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out ArchiveMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out ArchiveMapOutput) ApplyBoolMap(applier func(v map[string]Archive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out ArchiveMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out ArchiveMapOutput) ApplyFloat32(applier func(v map[string]Archive) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out ArchiveMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out ArchiveMapOutput) ApplyFloat32Array(applier func(v map[string]Archive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out ArchiveMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out ArchiveMapOutput) ApplyFloat32Map(applier func(v map[string]Archive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out ArchiveMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out ArchiveMapOutput) ApplyFloat64(applier func(v map[string]Archive) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out ArchiveMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out ArchiveMapOutput) ApplyFloat64Array(applier func(v map[string]Archive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out ArchiveMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out ArchiveMapOutput) ApplyFloat64Map(applier func(v map[string]Archive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out ArchiveMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out ArchiveMapOutput) ApplyID(applier func(v map[string]Archive) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out ArchiveMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out ArchiveMapOutput) ApplyIDArray(applier func(v map[string]Archive) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out ArchiveMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out ArchiveMapOutput) ApplyIDMap(applier func(v map[string]Archive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out ArchiveMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out ArchiveMapOutput) ApplyInt(applier func(v map[string]Archive) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out ArchiveMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out ArchiveMapOutput) ApplyIntArray(applier func(v map[string]Archive) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out ArchiveMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out ArchiveMapOutput) ApplyIntMap(applier func(v map[string]Archive) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out ArchiveMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out ArchiveMapOutput) ApplyInt16(applier func(v map[string]Archive) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out ArchiveMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out ArchiveMapOutput) ApplyInt16Array(applier func(v map[string]Archive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out ArchiveMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out ArchiveMapOutput) ApplyInt16Map(applier func(v map[string]Archive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out ArchiveMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out ArchiveMapOutput) ApplyInt32(applier func(v map[string]Archive) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out ArchiveMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out ArchiveMapOutput) ApplyInt32Array(applier func(v map[string]Archive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out ArchiveMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out ArchiveMapOutput) ApplyInt32Map(applier func(v map[string]Archive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out ArchiveMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out ArchiveMapOutput) ApplyInt64(applier func(v map[string]Archive) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out ArchiveMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out ArchiveMapOutput) ApplyInt64Array(applier func(v map[string]Archive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out ArchiveMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out ArchiveMapOutput) ApplyInt64Map(applier func(v map[string]Archive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out ArchiveMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out ArchiveMapOutput) ApplyInt8(applier func(v map[string]Archive) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out ArchiveMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out ArchiveMapOutput) ApplyInt8Array(applier func(v map[string]Archive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out ArchiveMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out ArchiveMapOutput) ApplyInt8Map(applier func(v map[string]Archive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out ArchiveMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out ArchiveMapOutput) ApplyString(applier func(v map[string]Archive) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out ArchiveMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out ArchiveMapOutput) ApplyStringArray(applier func(v map[string]Archive) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out ArchiveMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out ArchiveMapOutput) ApplyStringMap(applier func(v map[string]Archive) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out ArchiveMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out ArchiveMapOutput) ApplyURN(applier func(v map[string]Archive) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out ArchiveMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out ArchiveMapOutput) ApplyURNArray(applier func(v map[string]Archive) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out ArchiveMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out ArchiveMapOutput) ApplyURNMap(applier func(v map[string]Archive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out ArchiveMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out ArchiveMapOutput) ApplyUint(applier func(v map[string]Archive) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out ArchiveMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out ArchiveMapOutput) ApplyUintArray(applier func(v map[string]Archive) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out ArchiveMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out ArchiveMapOutput) ApplyUintMap(applier func(v map[string]Archive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out ArchiveMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out ArchiveMapOutput) ApplyUint16(applier func(v map[string]Archive) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out ArchiveMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out ArchiveMapOutput) ApplyUint16Array(applier func(v map[string]Archive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out ArchiveMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out ArchiveMapOutput) ApplyUint16Map(applier func(v map[string]Archive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out ArchiveMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out ArchiveMapOutput) ApplyUint32(applier func(v map[string]Archive) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out ArchiveMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out ArchiveMapOutput) ApplyUint32Array(applier func(v map[string]Archive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out ArchiveMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out ArchiveMapOutput) ApplyUint32Map(applier func(v map[string]Archive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out ArchiveMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out ArchiveMapOutput) ApplyUint64(applier func(v map[string]Archive) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out ArchiveMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out ArchiveMapOutput) ApplyUint64Array(applier func(v map[string]Archive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out ArchiveMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out ArchiveMapOutput) ApplyUint64Map(applier func(v map[string]Archive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out ArchiveMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out ArchiveMapOutput) ApplyUint8(applier func(v map[string]Archive) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]Archive) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out ArchiveMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out ArchiveMapOutput) ApplyUint8Array(applier func(v map[string]Archive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Archive) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out ArchiveMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out ArchiveMapOutput) ApplyUint8Map(applier func(v map[string]Archive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]Archive) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out ArchiveMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]Archive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var assetType = reflect.TypeOf((*Asset)(nil)).Elem()

// AssetInput is an input type that accepts Asset and AssetOutput values.
type AssetInput interface {
	Input

	// nolint: unused
	isAsset()
}

// ElementType returns the element type of this Input (Asset).
func (*asset) ElementType() reflect.Type {
	return assetType
}

func (*asset) isAsset() {}

func (*asset) isAssetOrArchive() {}

// AssetOutput is an Output that returns Asset values.
type AssetOutput OutputType

// ElementType returns the element type of this Output (Asset).
func (AssetOutput) ElementType() reflect.Type {
	return assetType
}

func (AssetOutput) isAsset() {}

func (AssetOutput) isAssetOrArchive() {}

// Apply applies a transformation to the asset value when it is available.
func (out AssetOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the asset value when it is available.
func (out AssetOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out AssetOutput) ApplyAny(applier func(v Asset) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v Asset) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out AssetOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, Asset) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out AssetOutput) ApplyAnyArray(applier func(v Asset) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out AssetOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out AssetOutput) ApplyAnyMap(applier func(v Asset) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out AssetOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out AssetOutput) ApplyArchive(applier func(v Asset) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v Asset) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out AssetOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, Asset) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out AssetOutput) ApplyArchiveArray(applier func(v Asset) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out AssetOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out AssetOutput) ApplyArchiveMap(applier func(v Asset) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out AssetOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out AssetOutput) ApplyAsset(applier func(v Asset) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v Asset) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out AssetOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, Asset) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out AssetOutput) ApplyAssetArray(applier func(v Asset) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out AssetOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out AssetOutput) ApplyAssetMap(applier func(v Asset) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out AssetOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out AssetOutput) ApplyAssetOrArchive(applier func(v Asset) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v Asset) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out AssetOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, Asset) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out AssetOutput) ApplyAssetOrArchiveArray(applier func(v Asset) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out AssetOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out AssetOutput) ApplyAssetOrArchiveMap(applier func(v Asset) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out AssetOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out AssetOutput) ApplyBool(applier func(v Asset) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v Asset) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out AssetOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, Asset) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out AssetOutput) ApplyBoolArray(applier func(v Asset) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out AssetOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out AssetOutput) ApplyBoolMap(applier func(v Asset) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out AssetOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out AssetOutput) ApplyFloat32(applier func(v Asset) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v Asset) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out AssetOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, Asset) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out AssetOutput) ApplyFloat32Array(applier func(v Asset) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out AssetOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out AssetOutput) ApplyFloat32Map(applier func(v Asset) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out AssetOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out AssetOutput) ApplyFloat64(applier func(v Asset) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v Asset) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out AssetOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, Asset) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out AssetOutput) ApplyFloat64Array(applier func(v Asset) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out AssetOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out AssetOutput) ApplyFloat64Map(applier func(v Asset) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out AssetOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out AssetOutput) ApplyID(applier func(v Asset) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v Asset) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out AssetOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, Asset) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out AssetOutput) ApplyIDArray(applier func(v Asset) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out AssetOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out AssetOutput) ApplyIDMap(applier func(v Asset) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out AssetOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out AssetOutput) ApplyInt(applier func(v Asset) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v Asset) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out AssetOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, Asset) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out AssetOutput) ApplyIntArray(applier func(v Asset) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out AssetOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out AssetOutput) ApplyIntMap(applier func(v Asset) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out AssetOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out AssetOutput) ApplyInt16(applier func(v Asset) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v Asset) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out AssetOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, Asset) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out AssetOutput) ApplyInt16Array(applier func(v Asset) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out AssetOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out AssetOutput) ApplyInt16Map(applier func(v Asset) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out AssetOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out AssetOutput) ApplyInt32(applier func(v Asset) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v Asset) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out AssetOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, Asset) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out AssetOutput) ApplyInt32Array(applier func(v Asset) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out AssetOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out AssetOutput) ApplyInt32Map(applier func(v Asset) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out AssetOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out AssetOutput) ApplyInt64(applier func(v Asset) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v Asset) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out AssetOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, Asset) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out AssetOutput) ApplyInt64Array(applier func(v Asset) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out AssetOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out AssetOutput) ApplyInt64Map(applier func(v Asset) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out AssetOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out AssetOutput) ApplyInt8(applier func(v Asset) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v Asset) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out AssetOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, Asset) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out AssetOutput) ApplyInt8Array(applier func(v Asset) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out AssetOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out AssetOutput) ApplyInt8Map(applier func(v Asset) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out AssetOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out AssetOutput) ApplyString(applier func(v Asset) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v Asset) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out AssetOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, Asset) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out AssetOutput) ApplyStringArray(applier func(v Asset) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out AssetOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out AssetOutput) ApplyStringMap(applier func(v Asset) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out AssetOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out AssetOutput) ApplyURN(applier func(v Asset) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v Asset) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out AssetOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, Asset) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out AssetOutput) ApplyURNArray(applier func(v Asset) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out AssetOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out AssetOutput) ApplyURNMap(applier func(v Asset) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out AssetOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out AssetOutput) ApplyUint(applier func(v Asset) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v Asset) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out AssetOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, Asset) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out AssetOutput) ApplyUintArray(applier func(v Asset) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out AssetOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out AssetOutput) ApplyUintMap(applier func(v Asset) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out AssetOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out AssetOutput) ApplyUint16(applier func(v Asset) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v Asset) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out AssetOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, Asset) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out AssetOutput) ApplyUint16Array(applier func(v Asset) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out AssetOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out AssetOutput) ApplyUint16Map(applier func(v Asset) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out AssetOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out AssetOutput) ApplyUint32(applier func(v Asset) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v Asset) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out AssetOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, Asset) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out AssetOutput) ApplyUint32Array(applier func(v Asset) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out AssetOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out AssetOutput) ApplyUint32Map(applier func(v Asset) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out AssetOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out AssetOutput) ApplyUint64(applier func(v Asset) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v Asset) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out AssetOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, Asset) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out AssetOutput) ApplyUint64Array(applier func(v Asset) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out AssetOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out AssetOutput) ApplyUint64Map(applier func(v Asset) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out AssetOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out AssetOutput) ApplyUint8(applier func(v Asset) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v Asset) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out AssetOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, Asset) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out AssetOutput) ApplyUint8Array(applier func(v Asset) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v Asset) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out AssetOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, Asset) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out AssetOutput) ApplyUint8Map(applier func(v Asset) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v Asset) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out AssetOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, Asset) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var assetarrayType = reflect.TypeOf((*[]Asset)(nil)).Elem()

// AssetArrayInput is an input type that accepts AssetArray and AssetArrayOutput values.
type AssetArrayInput interface {
	Input

	// nolint: unused
	isAssetArray()
}

// AssetArray is an input type for []Asset values.
type AssetArray []Asset

// ElementType returns the element type of this Input ([]Asset).
func (AssetArray) ElementType() reflect.Type {
	return assetarrayType
}

func (AssetArray) isAssetArray() {}

// AssetArrayOutput is an Output that returns []Asset values.
type AssetArrayOutput OutputType

// ElementType returns the element type of this Output ([]Asset).
func (AssetArrayOutput) ElementType() reflect.Type {
	return assetarrayType
}

func (AssetArrayOutput) isAssetArray() {}

// Apply applies a transformation to the assetarray value when it is available.
func (out AssetArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the assetarray value when it is available.
func (out AssetArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out AssetArrayOutput) ApplyAny(applier func(v []Asset) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []Asset) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out AssetArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []Asset) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out AssetArrayOutput) ApplyAnyArray(applier func(v []Asset) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out AssetArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out AssetArrayOutput) ApplyAnyMap(applier func(v []Asset) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out AssetArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out AssetArrayOutput) ApplyArchive(applier func(v []Asset) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []Asset) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out AssetArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []Asset) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out AssetArrayOutput) ApplyArchiveArray(applier func(v []Asset) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out AssetArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out AssetArrayOutput) ApplyArchiveMap(applier func(v []Asset) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out AssetArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out AssetArrayOutput) ApplyAsset(applier func(v []Asset) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []Asset) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out AssetArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []Asset) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out AssetArrayOutput) ApplyAssetArray(applier func(v []Asset) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out AssetArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out AssetArrayOutput) ApplyAssetMap(applier func(v []Asset) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out AssetArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out AssetArrayOutput) ApplyAssetOrArchive(applier func(v []Asset) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []Asset) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out AssetArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []Asset) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out AssetArrayOutput) ApplyAssetOrArchiveArray(applier func(v []Asset) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out AssetArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out AssetArrayOutput) ApplyAssetOrArchiveMap(applier func(v []Asset) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out AssetArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out AssetArrayOutput) ApplyBool(applier func(v []Asset) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []Asset) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out AssetArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []Asset) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out AssetArrayOutput) ApplyBoolArray(applier func(v []Asset) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out AssetArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out AssetArrayOutput) ApplyBoolMap(applier func(v []Asset) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out AssetArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out AssetArrayOutput) ApplyFloat32(applier func(v []Asset) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []Asset) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out AssetArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []Asset) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out AssetArrayOutput) ApplyFloat32Array(applier func(v []Asset) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out AssetArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out AssetArrayOutput) ApplyFloat32Map(applier func(v []Asset) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out AssetArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out AssetArrayOutput) ApplyFloat64(applier func(v []Asset) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []Asset) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out AssetArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []Asset) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out AssetArrayOutput) ApplyFloat64Array(applier func(v []Asset) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out AssetArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out AssetArrayOutput) ApplyFloat64Map(applier func(v []Asset) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out AssetArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out AssetArrayOutput) ApplyID(applier func(v []Asset) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []Asset) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out AssetArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []Asset) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out AssetArrayOutput) ApplyIDArray(applier func(v []Asset) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out AssetArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out AssetArrayOutput) ApplyIDMap(applier func(v []Asset) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out AssetArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out AssetArrayOutput) ApplyInt(applier func(v []Asset) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []Asset) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out AssetArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []Asset) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out AssetArrayOutput) ApplyIntArray(applier func(v []Asset) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out AssetArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out AssetArrayOutput) ApplyIntMap(applier func(v []Asset) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out AssetArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out AssetArrayOutput) ApplyInt16(applier func(v []Asset) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []Asset) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out AssetArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []Asset) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out AssetArrayOutput) ApplyInt16Array(applier func(v []Asset) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out AssetArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out AssetArrayOutput) ApplyInt16Map(applier func(v []Asset) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out AssetArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out AssetArrayOutput) ApplyInt32(applier func(v []Asset) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []Asset) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out AssetArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []Asset) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out AssetArrayOutput) ApplyInt32Array(applier func(v []Asset) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out AssetArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out AssetArrayOutput) ApplyInt32Map(applier func(v []Asset) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out AssetArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out AssetArrayOutput) ApplyInt64(applier func(v []Asset) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []Asset) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out AssetArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []Asset) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out AssetArrayOutput) ApplyInt64Array(applier func(v []Asset) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out AssetArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out AssetArrayOutput) ApplyInt64Map(applier func(v []Asset) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out AssetArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out AssetArrayOutput) ApplyInt8(applier func(v []Asset) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []Asset) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out AssetArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []Asset) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out AssetArrayOutput) ApplyInt8Array(applier func(v []Asset) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out AssetArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out AssetArrayOutput) ApplyInt8Map(applier func(v []Asset) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out AssetArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out AssetArrayOutput) ApplyString(applier func(v []Asset) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []Asset) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out AssetArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []Asset) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out AssetArrayOutput) ApplyStringArray(applier func(v []Asset) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out AssetArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out AssetArrayOutput) ApplyStringMap(applier func(v []Asset) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out AssetArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out AssetArrayOutput) ApplyURN(applier func(v []Asset) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []Asset) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out AssetArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []Asset) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out AssetArrayOutput) ApplyURNArray(applier func(v []Asset) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out AssetArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out AssetArrayOutput) ApplyURNMap(applier func(v []Asset) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out AssetArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out AssetArrayOutput) ApplyUint(applier func(v []Asset) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []Asset) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out AssetArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []Asset) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out AssetArrayOutput) ApplyUintArray(applier func(v []Asset) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out AssetArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out AssetArrayOutput) ApplyUintMap(applier func(v []Asset) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out AssetArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out AssetArrayOutput) ApplyUint16(applier func(v []Asset) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []Asset) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out AssetArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []Asset) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out AssetArrayOutput) ApplyUint16Array(applier func(v []Asset) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out AssetArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out AssetArrayOutput) ApplyUint16Map(applier func(v []Asset) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out AssetArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out AssetArrayOutput) ApplyUint32(applier func(v []Asset) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []Asset) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out AssetArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []Asset) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out AssetArrayOutput) ApplyUint32Array(applier func(v []Asset) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out AssetArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out AssetArrayOutput) ApplyUint32Map(applier func(v []Asset) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out AssetArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out AssetArrayOutput) ApplyUint64(applier func(v []Asset) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []Asset) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out AssetArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []Asset) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out AssetArrayOutput) ApplyUint64Array(applier func(v []Asset) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out AssetArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out AssetArrayOutput) ApplyUint64Map(applier func(v []Asset) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out AssetArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out AssetArrayOutput) ApplyUint8(applier func(v []Asset) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []Asset) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out AssetArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []Asset) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out AssetArrayOutput) ApplyUint8Array(applier func(v []Asset) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []Asset) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out AssetArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []Asset) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out AssetArrayOutput) ApplyUint8Map(applier func(v []Asset) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []Asset) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out AssetArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []Asset) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var assetmapType = reflect.TypeOf((*map[string]Asset)(nil)).Elem()

// AssetMapInput is an input type that accepts AssetMap and AssetMapOutput values.
type AssetMapInput interface {
	Input

	// nolint: unused
	isAssetMap()
}

// AssetMap is an input type for map[string]Asset values.
type AssetMap map[string]Asset

// ElementType returns the element type of this Input (map[string]Asset).
func (AssetMap) ElementType() reflect.Type {
	return assetmapType
}

func (AssetMap) isAssetMap() {}

// AssetMapOutput is an Output that returns map[string]Asset values.
type AssetMapOutput OutputType

// ElementType returns the element type of this Output (map[string]Asset).
func (AssetMapOutput) ElementType() reflect.Type {
	return assetmapType
}

func (AssetMapOutput) isAssetMap() {}

// Apply applies a transformation to the assetmap value when it is available.
func (out AssetMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the assetmap value when it is available.
func (out AssetMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out AssetMapOutput) ApplyAny(applier func(v map[string]Asset) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out AssetMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out AssetMapOutput) ApplyAnyArray(applier func(v map[string]Asset) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out AssetMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out AssetMapOutput) ApplyAnyMap(applier func(v map[string]Asset) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out AssetMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out AssetMapOutput) ApplyArchive(applier func(v map[string]Asset) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out AssetMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out AssetMapOutput) ApplyArchiveArray(applier func(v map[string]Asset) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out AssetMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out AssetMapOutput) ApplyArchiveMap(applier func(v map[string]Asset) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out AssetMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out AssetMapOutput) ApplyAsset(applier func(v map[string]Asset) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out AssetMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out AssetMapOutput) ApplyAssetArray(applier func(v map[string]Asset) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out AssetMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out AssetMapOutput) ApplyAssetMap(applier func(v map[string]Asset) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out AssetMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out AssetMapOutput) ApplyAssetOrArchive(applier func(v map[string]Asset) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out AssetMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out AssetMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]Asset) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out AssetMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out AssetMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]Asset) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out AssetMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out AssetMapOutput) ApplyBool(applier func(v map[string]Asset) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out AssetMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out AssetMapOutput) ApplyBoolArray(applier func(v map[string]Asset) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out AssetMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out AssetMapOutput) ApplyBoolMap(applier func(v map[string]Asset) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out AssetMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out AssetMapOutput) ApplyFloat32(applier func(v map[string]Asset) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out AssetMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out AssetMapOutput) ApplyFloat32Array(applier func(v map[string]Asset) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out AssetMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out AssetMapOutput) ApplyFloat32Map(applier func(v map[string]Asset) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out AssetMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out AssetMapOutput) ApplyFloat64(applier func(v map[string]Asset) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out AssetMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out AssetMapOutput) ApplyFloat64Array(applier func(v map[string]Asset) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out AssetMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out AssetMapOutput) ApplyFloat64Map(applier func(v map[string]Asset) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out AssetMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out AssetMapOutput) ApplyID(applier func(v map[string]Asset) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out AssetMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out AssetMapOutput) ApplyIDArray(applier func(v map[string]Asset) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out AssetMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out AssetMapOutput) ApplyIDMap(applier func(v map[string]Asset) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out AssetMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out AssetMapOutput) ApplyInt(applier func(v map[string]Asset) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out AssetMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out AssetMapOutput) ApplyIntArray(applier func(v map[string]Asset) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out AssetMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out AssetMapOutput) ApplyIntMap(applier func(v map[string]Asset) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out AssetMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out AssetMapOutput) ApplyInt16(applier func(v map[string]Asset) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out AssetMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out AssetMapOutput) ApplyInt16Array(applier func(v map[string]Asset) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out AssetMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out AssetMapOutput) ApplyInt16Map(applier func(v map[string]Asset) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out AssetMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out AssetMapOutput) ApplyInt32(applier func(v map[string]Asset) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out AssetMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out AssetMapOutput) ApplyInt32Array(applier func(v map[string]Asset) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out AssetMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out AssetMapOutput) ApplyInt32Map(applier func(v map[string]Asset) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out AssetMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out AssetMapOutput) ApplyInt64(applier func(v map[string]Asset) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out AssetMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out AssetMapOutput) ApplyInt64Array(applier func(v map[string]Asset) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out AssetMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out AssetMapOutput) ApplyInt64Map(applier func(v map[string]Asset) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out AssetMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out AssetMapOutput) ApplyInt8(applier func(v map[string]Asset) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out AssetMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out AssetMapOutput) ApplyInt8Array(applier func(v map[string]Asset) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out AssetMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out AssetMapOutput) ApplyInt8Map(applier func(v map[string]Asset) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out AssetMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out AssetMapOutput) ApplyString(applier func(v map[string]Asset) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out AssetMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out AssetMapOutput) ApplyStringArray(applier func(v map[string]Asset) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out AssetMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out AssetMapOutput) ApplyStringMap(applier func(v map[string]Asset) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out AssetMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out AssetMapOutput) ApplyURN(applier func(v map[string]Asset) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out AssetMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out AssetMapOutput) ApplyURNArray(applier func(v map[string]Asset) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out AssetMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out AssetMapOutput) ApplyURNMap(applier func(v map[string]Asset) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out AssetMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out AssetMapOutput) ApplyUint(applier func(v map[string]Asset) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out AssetMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out AssetMapOutput) ApplyUintArray(applier func(v map[string]Asset) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out AssetMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out AssetMapOutput) ApplyUintMap(applier func(v map[string]Asset) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out AssetMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out AssetMapOutput) ApplyUint16(applier func(v map[string]Asset) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out AssetMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out AssetMapOutput) ApplyUint16Array(applier func(v map[string]Asset) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out AssetMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out AssetMapOutput) ApplyUint16Map(applier func(v map[string]Asset) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out AssetMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out AssetMapOutput) ApplyUint32(applier func(v map[string]Asset) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out AssetMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out AssetMapOutput) ApplyUint32Array(applier func(v map[string]Asset) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out AssetMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out AssetMapOutput) ApplyUint32Map(applier func(v map[string]Asset) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out AssetMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out AssetMapOutput) ApplyUint64(applier func(v map[string]Asset) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out AssetMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out AssetMapOutput) ApplyUint64Array(applier func(v map[string]Asset) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out AssetMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out AssetMapOutput) ApplyUint64Map(applier func(v map[string]Asset) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out AssetMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out AssetMapOutput) ApplyUint8(applier func(v map[string]Asset) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]Asset) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out AssetMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out AssetMapOutput) ApplyUint8Array(applier func(v map[string]Asset) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]Asset) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out AssetMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out AssetMapOutput) ApplyUint8Map(applier func(v map[string]Asset) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]Asset) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out AssetMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]Asset) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var assetorarchiveType = reflect.TypeOf((*AssetOrArchive)(nil)).Elem()

// AssetOrArchiveInput is an input type that accepts AssetOrArchive and AssetOrArchiveOutput values.
type AssetOrArchiveInput interface {
	Input

	// nolint: unused
	isAssetOrArchive()
}

// AssetOrArchiveOutput is an Output that returns AssetOrArchive values.
type AssetOrArchiveOutput OutputType

// ElementType returns the element type of this Output (AssetOrArchive).
func (AssetOrArchiveOutput) ElementType() reflect.Type {
	return assetorarchiveType
}

func (AssetOrArchiveOutput) isAssetOrArchive() {}

// Apply applies a transformation to the assetorarchive value when it is available.
func (out AssetOrArchiveOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the assetorarchive value when it is available.
func (out AssetOrArchiveOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out AssetOrArchiveOutput) ApplyAny(applier func(v AssetOrArchive) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out AssetOrArchiveOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out AssetOrArchiveOutput) ApplyAnyArray(applier func(v AssetOrArchive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out AssetOrArchiveOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out AssetOrArchiveOutput) ApplyAnyMap(applier func(v AssetOrArchive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out AssetOrArchiveOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out AssetOrArchiveOutput) ApplyArchive(applier func(v AssetOrArchive) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out AssetOrArchiveOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out AssetOrArchiveOutput) ApplyArchiveArray(applier func(v AssetOrArchive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out AssetOrArchiveOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out AssetOrArchiveOutput) ApplyArchiveMap(applier func(v AssetOrArchive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out AssetOrArchiveOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out AssetOrArchiveOutput) ApplyAsset(applier func(v AssetOrArchive) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out AssetOrArchiveOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out AssetOrArchiveOutput) ApplyAssetArray(applier func(v AssetOrArchive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out AssetOrArchiveOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out AssetOrArchiveOutput) ApplyAssetMap(applier func(v AssetOrArchive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out AssetOrArchiveOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out AssetOrArchiveOutput) ApplyAssetOrArchive(applier func(v AssetOrArchive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out AssetOrArchiveOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out AssetOrArchiveOutput) ApplyAssetOrArchiveArray(applier func(v AssetOrArchive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out AssetOrArchiveOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out AssetOrArchiveOutput) ApplyAssetOrArchiveMap(applier func(v AssetOrArchive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out AssetOrArchiveOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out AssetOrArchiveOutput) ApplyBool(applier func(v AssetOrArchive) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out AssetOrArchiveOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out AssetOrArchiveOutput) ApplyBoolArray(applier func(v AssetOrArchive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out AssetOrArchiveOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out AssetOrArchiveOutput) ApplyBoolMap(applier func(v AssetOrArchive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out AssetOrArchiveOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out AssetOrArchiveOutput) ApplyFloat32(applier func(v AssetOrArchive) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out AssetOrArchiveOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out AssetOrArchiveOutput) ApplyFloat32Array(applier func(v AssetOrArchive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out AssetOrArchiveOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out AssetOrArchiveOutput) ApplyFloat32Map(applier func(v AssetOrArchive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out AssetOrArchiveOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out AssetOrArchiveOutput) ApplyFloat64(applier func(v AssetOrArchive) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out AssetOrArchiveOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out AssetOrArchiveOutput) ApplyFloat64Array(applier func(v AssetOrArchive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out AssetOrArchiveOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out AssetOrArchiveOutput) ApplyFloat64Map(applier func(v AssetOrArchive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out AssetOrArchiveOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out AssetOrArchiveOutput) ApplyID(applier func(v AssetOrArchive) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out AssetOrArchiveOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out AssetOrArchiveOutput) ApplyIDArray(applier func(v AssetOrArchive) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out AssetOrArchiveOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out AssetOrArchiveOutput) ApplyIDMap(applier func(v AssetOrArchive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out AssetOrArchiveOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out AssetOrArchiveOutput) ApplyInt(applier func(v AssetOrArchive) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out AssetOrArchiveOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out AssetOrArchiveOutput) ApplyIntArray(applier func(v AssetOrArchive) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out AssetOrArchiveOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out AssetOrArchiveOutput) ApplyIntMap(applier func(v AssetOrArchive) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out AssetOrArchiveOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out AssetOrArchiveOutput) ApplyInt16(applier func(v AssetOrArchive) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out AssetOrArchiveOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out AssetOrArchiveOutput) ApplyInt16Array(applier func(v AssetOrArchive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out AssetOrArchiveOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out AssetOrArchiveOutput) ApplyInt16Map(applier func(v AssetOrArchive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out AssetOrArchiveOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out AssetOrArchiveOutput) ApplyInt32(applier func(v AssetOrArchive) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out AssetOrArchiveOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out AssetOrArchiveOutput) ApplyInt32Array(applier func(v AssetOrArchive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out AssetOrArchiveOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out AssetOrArchiveOutput) ApplyInt32Map(applier func(v AssetOrArchive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out AssetOrArchiveOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out AssetOrArchiveOutput) ApplyInt64(applier func(v AssetOrArchive) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out AssetOrArchiveOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out AssetOrArchiveOutput) ApplyInt64Array(applier func(v AssetOrArchive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out AssetOrArchiveOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out AssetOrArchiveOutput) ApplyInt64Map(applier func(v AssetOrArchive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out AssetOrArchiveOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out AssetOrArchiveOutput) ApplyInt8(applier func(v AssetOrArchive) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out AssetOrArchiveOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out AssetOrArchiveOutput) ApplyInt8Array(applier func(v AssetOrArchive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out AssetOrArchiveOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out AssetOrArchiveOutput) ApplyInt8Map(applier func(v AssetOrArchive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out AssetOrArchiveOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out AssetOrArchiveOutput) ApplyString(applier func(v AssetOrArchive) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out AssetOrArchiveOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out AssetOrArchiveOutput) ApplyStringArray(applier func(v AssetOrArchive) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out AssetOrArchiveOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out AssetOrArchiveOutput) ApplyStringMap(applier func(v AssetOrArchive) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out AssetOrArchiveOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out AssetOrArchiveOutput) ApplyURN(applier func(v AssetOrArchive) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out AssetOrArchiveOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out AssetOrArchiveOutput) ApplyURNArray(applier func(v AssetOrArchive) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out AssetOrArchiveOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out AssetOrArchiveOutput) ApplyURNMap(applier func(v AssetOrArchive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out AssetOrArchiveOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out AssetOrArchiveOutput) ApplyUint(applier func(v AssetOrArchive) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out AssetOrArchiveOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out AssetOrArchiveOutput) ApplyUintArray(applier func(v AssetOrArchive) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out AssetOrArchiveOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out AssetOrArchiveOutput) ApplyUintMap(applier func(v AssetOrArchive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out AssetOrArchiveOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out AssetOrArchiveOutput) ApplyUint16(applier func(v AssetOrArchive) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out AssetOrArchiveOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out AssetOrArchiveOutput) ApplyUint16Array(applier func(v AssetOrArchive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out AssetOrArchiveOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out AssetOrArchiveOutput) ApplyUint16Map(applier func(v AssetOrArchive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out AssetOrArchiveOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out AssetOrArchiveOutput) ApplyUint32(applier func(v AssetOrArchive) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out AssetOrArchiveOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out AssetOrArchiveOutput) ApplyUint32Array(applier func(v AssetOrArchive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out AssetOrArchiveOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out AssetOrArchiveOutput) ApplyUint32Map(applier func(v AssetOrArchive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out AssetOrArchiveOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out AssetOrArchiveOutput) ApplyUint64(applier func(v AssetOrArchive) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out AssetOrArchiveOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out AssetOrArchiveOutput) ApplyUint64Array(applier func(v AssetOrArchive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out AssetOrArchiveOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out AssetOrArchiveOutput) ApplyUint64Map(applier func(v AssetOrArchive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out AssetOrArchiveOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out AssetOrArchiveOutput) ApplyUint8(applier func(v AssetOrArchive) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out AssetOrArchiveOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out AssetOrArchiveOutput) ApplyUint8Array(applier func(v AssetOrArchive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out AssetOrArchiveOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out AssetOrArchiveOutput) ApplyUint8Map(applier func(v AssetOrArchive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v AssetOrArchive) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out AssetOrArchiveOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, AssetOrArchive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var assetorarchivearrayType = reflect.TypeOf((*[]AssetOrArchive)(nil)).Elem()

// AssetOrArchiveArrayInput is an input type that accepts AssetOrArchiveArray and AssetOrArchiveArrayOutput values.
type AssetOrArchiveArrayInput interface {
	Input

	// nolint: unused
	isAssetOrArchiveArray()
}

// AssetOrArchiveArray is an input type for []AssetOrArchive values.
type AssetOrArchiveArray []AssetOrArchive

// ElementType returns the element type of this Input ([]AssetOrArchive).
func (AssetOrArchiveArray) ElementType() reflect.Type {
	return assetorarchivearrayType
}

func (AssetOrArchiveArray) isAssetOrArchiveArray() {}

// AssetOrArchiveArrayOutput is an Output that returns []AssetOrArchive values.
type AssetOrArchiveArrayOutput OutputType

// ElementType returns the element type of this Output ([]AssetOrArchive).
func (AssetOrArchiveArrayOutput) ElementType() reflect.Type {
	return assetorarchivearrayType
}

func (AssetOrArchiveArrayOutput) isAssetOrArchiveArray() {}

// Apply applies a transformation to the assetorarchivearray value when it is available.
func (out AssetOrArchiveArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the assetorarchivearray value when it is available.
func (out AssetOrArchiveArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out AssetOrArchiveArrayOutput) ApplyAny(applier func(v []AssetOrArchive) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out AssetOrArchiveArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyAnyArray(applier func(v []AssetOrArchive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyAnyMap(applier func(v []AssetOrArchive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out AssetOrArchiveArrayOutput) ApplyArchive(applier func(v []AssetOrArchive) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out AssetOrArchiveArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyArchiveArray(applier func(v []AssetOrArchive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyArchiveMap(applier func(v []AssetOrArchive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out AssetOrArchiveArrayOutput) ApplyAsset(applier func(v []AssetOrArchive) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetArray(applier func(v []AssetOrArchive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetMap(applier func(v []AssetOrArchive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetOrArchive(applier func(v []AssetOrArchive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetOrArchiveArray(applier func(v []AssetOrArchive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetOrArchiveMap(applier func(v []AssetOrArchive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out AssetOrArchiveArrayOutput) ApplyBool(applier func(v []AssetOrArchive) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out AssetOrArchiveArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyBoolArray(applier func(v []AssetOrArchive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyBoolMap(applier func(v []AssetOrArchive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out AssetOrArchiveArrayOutput) ApplyFloat32(applier func(v []AssetOrArchive) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out AssetOrArchiveArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyFloat32Array(applier func(v []AssetOrArchive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyFloat32Map(applier func(v []AssetOrArchive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out AssetOrArchiveArrayOutput) ApplyFloat64(applier func(v []AssetOrArchive) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out AssetOrArchiveArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyFloat64Array(applier func(v []AssetOrArchive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyFloat64Map(applier func(v []AssetOrArchive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out AssetOrArchiveArrayOutput) ApplyID(applier func(v []AssetOrArchive) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out AssetOrArchiveArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyIDArray(applier func(v []AssetOrArchive) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyIDMap(applier func(v []AssetOrArchive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt(applier func(v []AssetOrArchive) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out AssetOrArchiveArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyIntArray(applier func(v []AssetOrArchive) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyIntMap(applier func(v []AssetOrArchive) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out AssetOrArchiveArrayOutput) ApplyInt16(applier func(v []AssetOrArchive) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out AssetOrArchiveArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt16Array(applier func(v []AssetOrArchive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt16Map(applier func(v []AssetOrArchive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out AssetOrArchiveArrayOutput) ApplyInt32(applier func(v []AssetOrArchive) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out AssetOrArchiveArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt32Array(applier func(v []AssetOrArchive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt32Map(applier func(v []AssetOrArchive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out AssetOrArchiveArrayOutput) ApplyInt64(applier func(v []AssetOrArchive) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out AssetOrArchiveArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt64Array(applier func(v []AssetOrArchive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt64Map(applier func(v []AssetOrArchive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out AssetOrArchiveArrayOutput) ApplyInt8(applier func(v []AssetOrArchive) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out AssetOrArchiveArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt8Array(applier func(v []AssetOrArchive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt8Map(applier func(v []AssetOrArchive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out AssetOrArchiveArrayOutput) ApplyString(applier func(v []AssetOrArchive) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out AssetOrArchiveArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyStringArray(applier func(v []AssetOrArchive) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyStringMap(applier func(v []AssetOrArchive) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out AssetOrArchiveArrayOutput) ApplyURN(applier func(v []AssetOrArchive) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out AssetOrArchiveArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyURNArray(applier func(v []AssetOrArchive) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyURNMap(applier func(v []AssetOrArchive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint(applier func(v []AssetOrArchive) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out AssetOrArchiveArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUintArray(applier func(v []AssetOrArchive) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUintMap(applier func(v []AssetOrArchive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out AssetOrArchiveArrayOutput) ApplyUint16(applier func(v []AssetOrArchive) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out AssetOrArchiveArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint16Array(applier func(v []AssetOrArchive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint16Map(applier func(v []AssetOrArchive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out AssetOrArchiveArrayOutput) ApplyUint32(applier func(v []AssetOrArchive) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out AssetOrArchiveArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint32Array(applier func(v []AssetOrArchive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint32Map(applier func(v []AssetOrArchive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out AssetOrArchiveArrayOutput) ApplyUint64(applier func(v []AssetOrArchive) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out AssetOrArchiveArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint64Array(applier func(v []AssetOrArchive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint64Map(applier func(v []AssetOrArchive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out AssetOrArchiveArrayOutput) ApplyUint8(applier func(v []AssetOrArchive) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out AssetOrArchiveArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint8Array(applier func(v []AssetOrArchive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint8Map(applier func(v []AssetOrArchive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []AssetOrArchive) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out AssetOrArchiveArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []AssetOrArchive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var assetorarchivemapType = reflect.TypeOf((*map[string]AssetOrArchive)(nil)).Elem()

// AssetOrArchiveMapInput is an input type that accepts AssetOrArchiveMap and AssetOrArchiveMapOutput values.
type AssetOrArchiveMapInput interface {
	Input

	// nolint: unused
	isAssetOrArchiveMap()
}

// AssetOrArchiveMap is an input type for map[string]AssetOrArchive values.
type AssetOrArchiveMap map[string]AssetOrArchive

// ElementType returns the element type of this Input (map[string]AssetOrArchive).
func (AssetOrArchiveMap) ElementType() reflect.Type {
	return assetorarchivemapType
}

func (AssetOrArchiveMap) isAssetOrArchiveMap() {}

// AssetOrArchiveMapOutput is an Output that returns map[string]AssetOrArchive values.
type AssetOrArchiveMapOutput OutputType

// ElementType returns the element type of this Output (map[string]AssetOrArchive).
func (AssetOrArchiveMapOutput) ElementType() reflect.Type {
	return assetorarchivemapType
}

func (AssetOrArchiveMapOutput) isAssetOrArchiveMap() {}

// Apply applies a transformation to the assetorarchivemap value when it is available.
func (out AssetOrArchiveMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the assetorarchivemap value when it is available.
func (out AssetOrArchiveMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out AssetOrArchiveMapOutput) ApplyAny(applier func(v map[string]AssetOrArchive) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out AssetOrArchiveMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyAnyArray(applier func(v map[string]AssetOrArchive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out AssetOrArchiveMapOutput) ApplyAnyMap(applier func(v map[string]AssetOrArchive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out AssetOrArchiveMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out AssetOrArchiveMapOutput) ApplyArchive(applier func(v map[string]AssetOrArchive) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out AssetOrArchiveMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyArchiveArray(applier func(v map[string]AssetOrArchive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out AssetOrArchiveMapOutput) ApplyArchiveMap(applier func(v map[string]AssetOrArchive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out AssetOrArchiveMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out AssetOrArchiveMapOutput) ApplyAsset(applier func(v map[string]AssetOrArchive) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetArray(applier func(v map[string]AssetOrArchive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetMap(applier func(v map[string]AssetOrArchive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetOrArchive(applier func(v map[string]AssetOrArchive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]AssetOrArchive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]AssetOrArchive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out AssetOrArchiveMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out AssetOrArchiveMapOutput) ApplyBool(applier func(v map[string]AssetOrArchive) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out AssetOrArchiveMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyBoolArray(applier func(v map[string]AssetOrArchive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out AssetOrArchiveMapOutput) ApplyBoolMap(applier func(v map[string]AssetOrArchive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out AssetOrArchiveMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out AssetOrArchiveMapOutput) ApplyFloat32(applier func(v map[string]AssetOrArchive) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out AssetOrArchiveMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyFloat32Array(applier func(v map[string]AssetOrArchive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out AssetOrArchiveMapOutput) ApplyFloat32Map(applier func(v map[string]AssetOrArchive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out AssetOrArchiveMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out AssetOrArchiveMapOutput) ApplyFloat64(applier func(v map[string]AssetOrArchive) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out AssetOrArchiveMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyFloat64Array(applier func(v map[string]AssetOrArchive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out AssetOrArchiveMapOutput) ApplyFloat64Map(applier func(v map[string]AssetOrArchive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out AssetOrArchiveMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out AssetOrArchiveMapOutput) ApplyID(applier func(v map[string]AssetOrArchive) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out AssetOrArchiveMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyIDArray(applier func(v map[string]AssetOrArchive) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out AssetOrArchiveMapOutput) ApplyIDMap(applier func(v map[string]AssetOrArchive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out AssetOrArchiveMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out AssetOrArchiveMapOutput) ApplyInt(applier func(v map[string]AssetOrArchive) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out AssetOrArchiveMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyIntArray(applier func(v map[string]AssetOrArchive) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out AssetOrArchiveMapOutput) ApplyIntMap(applier func(v map[string]AssetOrArchive) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out AssetOrArchiveMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out AssetOrArchiveMapOutput) ApplyInt16(applier func(v map[string]AssetOrArchive) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out AssetOrArchiveMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyInt16Array(applier func(v map[string]AssetOrArchive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out AssetOrArchiveMapOutput) ApplyInt16Map(applier func(v map[string]AssetOrArchive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out AssetOrArchiveMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out AssetOrArchiveMapOutput) ApplyInt32(applier func(v map[string]AssetOrArchive) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out AssetOrArchiveMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyInt32Array(applier func(v map[string]AssetOrArchive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out AssetOrArchiveMapOutput) ApplyInt32Map(applier func(v map[string]AssetOrArchive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out AssetOrArchiveMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out AssetOrArchiveMapOutput) ApplyInt64(applier func(v map[string]AssetOrArchive) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out AssetOrArchiveMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyInt64Array(applier func(v map[string]AssetOrArchive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out AssetOrArchiveMapOutput) ApplyInt64Map(applier func(v map[string]AssetOrArchive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out AssetOrArchiveMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out AssetOrArchiveMapOutput) ApplyInt8(applier func(v map[string]AssetOrArchive) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out AssetOrArchiveMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyInt8Array(applier func(v map[string]AssetOrArchive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out AssetOrArchiveMapOutput) ApplyInt8Map(applier func(v map[string]AssetOrArchive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out AssetOrArchiveMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out AssetOrArchiveMapOutput) ApplyString(applier func(v map[string]AssetOrArchive) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out AssetOrArchiveMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyStringArray(applier func(v map[string]AssetOrArchive) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out AssetOrArchiveMapOutput) ApplyStringMap(applier func(v map[string]AssetOrArchive) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out AssetOrArchiveMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out AssetOrArchiveMapOutput) ApplyURN(applier func(v map[string]AssetOrArchive) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out AssetOrArchiveMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyURNArray(applier func(v map[string]AssetOrArchive) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out AssetOrArchiveMapOutput) ApplyURNMap(applier func(v map[string]AssetOrArchive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out AssetOrArchiveMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out AssetOrArchiveMapOutput) ApplyUint(applier func(v map[string]AssetOrArchive) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out AssetOrArchiveMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUintArray(applier func(v map[string]AssetOrArchive) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out AssetOrArchiveMapOutput) ApplyUintMap(applier func(v map[string]AssetOrArchive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out AssetOrArchiveMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out AssetOrArchiveMapOutput) ApplyUint16(applier func(v map[string]AssetOrArchive) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out AssetOrArchiveMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUint16Array(applier func(v map[string]AssetOrArchive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out AssetOrArchiveMapOutput) ApplyUint16Map(applier func(v map[string]AssetOrArchive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out AssetOrArchiveMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out AssetOrArchiveMapOutput) ApplyUint32(applier func(v map[string]AssetOrArchive) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out AssetOrArchiveMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUint32Array(applier func(v map[string]AssetOrArchive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out AssetOrArchiveMapOutput) ApplyUint32Map(applier func(v map[string]AssetOrArchive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out AssetOrArchiveMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out AssetOrArchiveMapOutput) ApplyUint64(applier func(v map[string]AssetOrArchive) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out AssetOrArchiveMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUint64Array(applier func(v map[string]AssetOrArchive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out AssetOrArchiveMapOutput) ApplyUint64Map(applier func(v map[string]AssetOrArchive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out AssetOrArchiveMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out AssetOrArchiveMapOutput) ApplyUint8(applier func(v map[string]AssetOrArchive) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out AssetOrArchiveMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUint8Array(applier func(v map[string]AssetOrArchive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out AssetOrArchiveMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out AssetOrArchiveMapOutput) ApplyUint8Map(applier func(v map[string]AssetOrArchive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]AssetOrArchive) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out AssetOrArchiveMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]AssetOrArchive) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var boolType = reflect.TypeOf((*bool)(nil)).Elem()

// BoolInput is an input type that accepts Bool and BoolOutput values.
type BoolInput interface {
	Input

	// nolint: unused
	isBool()
}

// Bool is an input type for bool values.
type Bool bool

// ElementType returns the element type of this Input (bool).
func (Bool) ElementType() reflect.Type {
	return boolType
}

func (Bool) isBool() {}

// BoolOutput is an Output that returns bool values.
type BoolOutput OutputType

// ElementType returns the element type of this Output (bool).
func (BoolOutput) ElementType() reflect.Type {
	return boolType
}

func (BoolOutput) isBool() {}

// Apply applies a transformation to the bool value when it is available.
func (out BoolOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the bool value when it is available.
func (out BoolOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out BoolOutput) ApplyAny(applier func(v bool) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v bool) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out BoolOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, bool) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out BoolOutput) ApplyAnyArray(applier func(v bool) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out BoolOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out BoolOutput) ApplyAnyMap(applier func(v bool) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out BoolOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out BoolOutput) ApplyArchive(applier func(v bool) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v bool) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out BoolOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, bool) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out BoolOutput) ApplyArchiveArray(applier func(v bool) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out BoolOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out BoolOutput) ApplyArchiveMap(applier func(v bool) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out BoolOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out BoolOutput) ApplyAsset(applier func(v bool) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v bool) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out BoolOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, bool) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out BoolOutput) ApplyAssetArray(applier func(v bool) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out BoolOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out BoolOutput) ApplyAssetMap(applier func(v bool) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out BoolOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out BoolOutput) ApplyAssetOrArchive(applier func(v bool) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v bool) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out BoolOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, bool) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out BoolOutput) ApplyAssetOrArchiveArray(applier func(v bool) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out BoolOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out BoolOutput) ApplyAssetOrArchiveMap(applier func(v bool) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out BoolOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out BoolOutput) ApplyBool(applier func(v bool) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v bool) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out BoolOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, bool) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out BoolOutput) ApplyBoolArray(applier func(v bool) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out BoolOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out BoolOutput) ApplyBoolMap(applier func(v bool) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out BoolOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out BoolOutput) ApplyFloat32(applier func(v bool) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v bool) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out BoolOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, bool) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out BoolOutput) ApplyFloat32Array(applier func(v bool) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out BoolOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out BoolOutput) ApplyFloat32Map(applier func(v bool) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out BoolOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out BoolOutput) ApplyFloat64(applier func(v bool) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v bool) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out BoolOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, bool) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out BoolOutput) ApplyFloat64Array(applier func(v bool) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out BoolOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out BoolOutput) ApplyFloat64Map(applier func(v bool) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out BoolOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out BoolOutput) ApplyID(applier func(v bool) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v bool) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out BoolOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, bool) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out BoolOutput) ApplyIDArray(applier func(v bool) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out BoolOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out BoolOutput) ApplyIDMap(applier func(v bool) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out BoolOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out BoolOutput) ApplyInt(applier func(v bool) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v bool) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out BoolOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, bool) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out BoolOutput) ApplyIntArray(applier func(v bool) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out BoolOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out BoolOutput) ApplyIntMap(applier func(v bool) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out BoolOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out BoolOutput) ApplyInt16(applier func(v bool) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v bool) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out BoolOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, bool) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out BoolOutput) ApplyInt16Array(applier func(v bool) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out BoolOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out BoolOutput) ApplyInt16Map(applier func(v bool) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out BoolOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out BoolOutput) ApplyInt32(applier func(v bool) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v bool) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out BoolOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, bool) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out BoolOutput) ApplyInt32Array(applier func(v bool) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out BoolOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out BoolOutput) ApplyInt32Map(applier func(v bool) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out BoolOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out BoolOutput) ApplyInt64(applier func(v bool) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v bool) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out BoolOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, bool) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out BoolOutput) ApplyInt64Array(applier func(v bool) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out BoolOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out BoolOutput) ApplyInt64Map(applier func(v bool) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out BoolOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out BoolOutput) ApplyInt8(applier func(v bool) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v bool) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out BoolOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, bool) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out BoolOutput) ApplyInt8Array(applier func(v bool) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out BoolOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out BoolOutput) ApplyInt8Map(applier func(v bool) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out BoolOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out BoolOutput) ApplyString(applier func(v bool) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v bool) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out BoolOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, bool) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out BoolOutput) ApplyStringArray(applier func(v bool) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out BoolOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out BoolOutput) ApplyStringMap(applier func(v bool) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out BoolOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out BoolOutput) ApplyURN(applier func(v bool) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v bool) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out BoolOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, bool) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out BoolOutput) ApplyURNArray(applier func(v bool) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out BoolOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out BoolOutput) ApplyURNMap(applier func(v bool) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out BoolOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out BoolOutput) ApplyUint(applier func(v bool) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v bool) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out BoolOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, bool) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out BoolOutput) ApplyUintArray(applier func(v bool) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out BoolOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out BoolOutput) ApplyUintMap(applier func(v bool) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out BoolOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out BoolOutput) ApplyUint16(applier func(v bool) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v bool) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out BoolOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, bool) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out BoolOutput) ApplyUint16Array(applier func(v bool) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out BoolOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out BoolOutput) ApplyUint16Map(applier func(v bool) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out BoolOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out BoolOutput) ApplyUint32(applier func(v bool) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v bool) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out BoolOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, bool) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out BoolOutput) ApplyUint32Array(applier func(v bool) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out BoolOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out BoolOutput) ApplyUint32Map(applier func(v bool) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out BoolOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out BoolOutput) ApplyUint64(applier func(v bool) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v bool) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out BoolOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, bool) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out BoolOutput) ApplyUint64Array(applier func(v bool) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out BoolOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out BoolOutput) ApplyUint64Map(applier func(v bool) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out BoolOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out BoolOutput) ApplyUint8(applier func(v bool) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v bool) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out BoolOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, bool) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out BoolOutput) ApplyUint8Array(applier func(v bool) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v bool) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out BoolOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, bool) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out BoolOutput) ApplyUint8Map(applier func(v bool) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v bool) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out BoolOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, bool) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var boolarrayType = reflect.TypeOf((*[]bool)(nil)).Elem()

// BoolArrayInput is an input type that accepts BoolArray and BoolArrayOutput values.
type BoolArrayInput interface {
	Input

	// nolint: unused
	isBoolArray()
}

// BoolArray is an input type for []bool values.
type BoolArray []bool

// ElementType returns the element type of this Input ([]bool).
func (BoolArray) ElementType() reflect.Type {
	return boolarrayType
}

func (BoolArray) isBoolArray() {}

// BoolArrayOutput is an Output that returns []bool values.
type BoolArrayOutput OutputType

// ElementType returns the element type of this Output ([]bool).
func (BoolArrayOutput) ElementType() reflect.Type {
	return boolarrayType
}

func (BoolArrayOutput) isBoolArray() {}

// Apply applies a transformation to the boolarray value when it is available.
func (out BoolArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the boolarray value when it is available.
func (out BoolArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out BoolArrayOutput) ApplyAny(applier func(v []bool) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []bool) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out BoolArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []bool) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out BoolArrayOutput) ApplyAnyArray(applier func(v []bool) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out BoolArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out BoolArrayOutput) ApplyAnyMap(applier func(v []bool) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out BoolArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out BoolArrayOutput) ApplyArchive(applier func(v []bool) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []bool) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out BoolArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []bool) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out BoolArrayOutput) ApplyArchiveArray(applier func(v []bool) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out BoolArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out BoolArrayOutput) ApplyArchiveMap(applier func(v []bool) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out BoolArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out BoolArrayOutput) ApplyAsset(applier func(v []bool) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []bool) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out BoolArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []bool) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out BoolArrayOutput) ApplyAssetArray(applier func(v []bool) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out BoolArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out BoolArrayOutput) ApplyAssetMap(applier func(v []bool) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out BoolArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out BoolArrayOutput) ApplyAssetOrArchive(applier func(v []bool) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []bool) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out BoolArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []bool) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out BoolArrayOutput) ApplyAssetOrArchiveArray(applier func(v []bool) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out BoolArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out BoolArrayOutput) ApplyAssetOrArchiveMap(applier func(v []bool) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out BoolArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out BoolArrayOutput) ApplyBool(applier func(v []bool) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []bool) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out BoolArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []bool) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out BoolArrayOutput) ApplyBoolArray(applier func(v []bool) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out BoolArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out BoolArrayOutput) ApplyBoolMap(applier func(v []bool) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out BoolArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out BoolArrayOutput) ApplyFloat32(applier func(v []bool) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []bool) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out BoolArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []bool) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out BoolArrayOutput) ApplyFloat32Array(applier func(v []bool) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out BoolArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out BoolArrayOutput) ApplyFloat32Map(applier func(v []bool) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out BoolArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out BoolArrayOutput) ApplyFloat64(applier func(v []bool) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []bool) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out BoolArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []bool) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out BoolArrayOutput) ApplyFloat64Array(applier func(v []bool) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out BoolArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out BoolArrayOutput) ApplyFloat64Map(applier func(v []bool) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out BoolArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out BoolArrayOutput) ApplyID(applier func(v []bool) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []bool) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out BoolArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []bool) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out BoolArrayOutput) ApplyIDArray(applier func(v []bool) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out BoolArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out BoolArrayOutput) ApplyIDMap(applier func(v []bool) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out BoolArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out BoolArrayOutput) ApplyInt(applier func(v []bool) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []bool) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out BoolArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []bool) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out BoolArrayOutput) ApplyIntArray(applier func(v []bool) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out BoolArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out BoolArrayOutput) ApplyIntMap(applier func(v []bool) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out BoolArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out BoolArrayOutput) ApplyInt16(applier func(v []bool) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []bool) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out BoolArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []bool) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out BoolArrayOutput) ApplyInt16Array(applier func(v []bool) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out BoolArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out BoolArrayOutput) ApplyInt16Map(applier func(v []bool) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out BoolArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out BoolArrayOutput) ApplyInt32(applier func(v []bool) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []bool) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out BoolArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []bool) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out BoolArrayOutput) ApplyInt32Array(applier func(v []bool) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out BoolArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out BoolArrayOutput) ApplyInt32Map(applier func(v []bool) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out BoolArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out BoolArrayOutput) ApplyInt64(applier func(v []bool) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []bool) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out BoolArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []bool) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out BoolArrayOutput) ApplyInt64Array(applier func(v []bool) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out BoolArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out BoolArrayOutput) ApplyInt64Map(applier func(v []bool) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out BoolArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out BoolArrayOutput) ApplyInt8(applier func(v []bool) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []bool) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out BoolArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []bool) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out BoolArrayOutput) ApplyInt8Array(applier func(v []bool) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out BoolArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out BoolArrayOutput) ApplyInt8Map(applier func(v []bool) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out BoolArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out BoolArrayOutput) ApplyString(applier func(v []bool) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []bool) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out BoolArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []bool) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out BoolArrayOutput) ApplyStringArray(applier func(v []bool) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out BoolArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out BoolArrayOutput) ApplyStringMap(applier func(v []bool) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out BoolArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out BoolArrayOutput) ApplyURN(applier func(v []bool) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []bool) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out BoolArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []bool) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out BoolArrayOutput) ApplyURNArray(applier func(v []bool) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out BoolArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out BoolArrayOutput) ApplyURNMap(applier func(v []bool) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out BoolArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out BoolArrayOutput) ApplyUint(applier func(v []bool) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []bool) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out BoolArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []bool) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out BoolArrayOutput) ApplyUintArray(applier func(v []bool) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out BoolArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out BoolArrayOutput) ApplyUintMap(applier func(v []bool) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out BoolArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out BoolArrayOutput) ApplyUint16(applier func(v []bool) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []bool) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out BoolArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []bool) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out BoolArrayOutput) ApplyUint16Array(applier func(v []bool) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out BoolArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out BoolArrayOutput) ApplyUint16Map(applier func(v []bool) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out BoolArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out BoolArrayOutput) ApplyUint32(applier func(v []bool) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []bool) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out BoolArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []bool) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out BoolArrayOutput) ApplyUint32Array(applier func(v []bool) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out BoolArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out BoolArrayOutput) ApplyUint32Map(applier func(v []bool) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out BoolArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out BoolArrayOutput) ApplyUint64(applier func(v []bool) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []bool) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out BoolArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []bool) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out BoolArrayOutput) ApplyUint64Array(applier func(v []bool) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out BoolArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out BoolArrayOutput) ApplyUint64Map(applier func(v []bool) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out BoolArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out BoolArrayOutput) ApplyUint8(applier func(v []bool) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []bool) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out BoolArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []bool) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out BoolArrayOutput) ApplyUint8Array(applier func(v []bool) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []bool) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out BoolArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []bool) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out BoolArrayOutput) ApplyUint8Map(applier func(v []bool) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []bool) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out BoolArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []bool) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var boolmapType = reflect.TypeOf((*map[string]bool)(nil)).Elem()

// BoolMapInput is an input type that accepts BoolMap and BoolMapOutput values.
type BoolMapInput interface {
	Input

	// nolint: unused
	isBoolMap()
}

// BoolMap is an input type for map[string]bool values.
type BoolMap map[string]bool

// ElementType returns the element type of this Input (map[string]bool).
func (BoolMap) ElementType() reflect.Type {
	return boolmapType
}

func (BoolMap) isBoolMap() {}

// BoolMapOutput is an Output that returns map[string]bool values.
type BoolMapOutput OutputType

// ElementType returns the element type of this Output (map[string]bool).
func (BoolMapOutput) ElementType() reflect.Type {
	return boolmapType
}

func (BoolMapOutput) isBoolMap() {}

// Apply applies a transformation to the boolmap value when it is available.
func (out BoolMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the boolmap value when it is available.
func (out BoolMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out BoolMapOutput) ApplyAny(applier func(v map[string]bool) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]bool) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out BoolMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out BoolMapOutput) ApplyAnyArray(applier func(v map[string]bool) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out BoolMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out BoolMapOutput) ApplyAnyMap(applier func(v map[string]bool) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out BoolMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out BoolMapOutput) ApplyArchive(applier func(v map[string]bool) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]bool) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out BoolMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out BoolMapOutput) ApplyArchiveArray(applier func(v map[string]bool) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out BoolMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out BoolMapOutput) ApplyArchiveMap(applier func(v map[string]bool) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out BoolMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out BoolMapOutput) ApplyAsset(applier func(v map[string]bool) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]bool) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out BoolMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out BoolMapOutput) ApplyAssetArray(applier func(v map[string]bool) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out BoolMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out BoolMapOutput) ApplyAssetMap(applier func(v map[string]bool) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out BoolMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out BoolMapOutput) ApplyAssetOrArchive(applier func(v map[string]bool) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]bool) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out BoolMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out BoolMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]bool) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out BoolMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out BoolMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]bool) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out BoolMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out BoolMapOutput) ApplyBool(applier func(v map[string]bool) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]bool) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out BoolMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out BoolMapOutput) ApplyBoolArray(applier func(v map[string]bool) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out BoolMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out BoolMapOutput) ApplyBoolMap(applier func(v map[string]bool) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out BoolMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out BoolMapOutput) ApplyFloat32(applier func(v map[string]bool) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]bool) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out BoolMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out BoolMapOutput) ApplyFloat32Array(applier func(v map[string]bool) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out BoolMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out BoolMapOutput) ApplyFloat32Map(applier func(v map[string]bool) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out BoolMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out BoolMapOutput) ApplyFloat64(applier func(v map[string]bool) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]bool) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out BoolMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out BoolMapOutput) ApplyFloat64Array(applier func(v map[string]bool) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out BoolMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out BoolMapOutput) ApplyFloat64Map(applier func(v map[string]bool) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out BoolMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out BoolMapOutput) ApplyID(applier func(v map[string]bool) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]bool) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out BoolMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out BoolMapOutput) ApplyIDArray(applier func(v map[string]bool) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out BoolMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out BoolMapOutput) ApplyIDMap(applier func(v map[string]bool) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out BoolMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out BoolMapOutput) ApplyInt(applier func(v map[string]bool) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]bool) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out BoolMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out BoolMapOutput) ApplyIntArray(applier func(v map[string]bool) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out BoolMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out BoolMapOutput) ApplyIntMap(applier func(v map[string]bool) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out BoolMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out BoolMapOutput) ApplyInt16(applier func(v map[string]bool) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]bool) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out BoolMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out BoolMapOutput) ApplyInt16Array(applier func(v map[string]bool) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out BoolMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out BoolMapOutput) ApplyInt16Map(applier func(v map[string]bool) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out BoolMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out BoolMapOutput) ApplyInt32(applier func(v map[string]bool) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]bool) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out BoolMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out BoolMapOutput) ApplyInt32Array(applier func(v map[string]bool) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out BoolMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out BoolMapOutput) ApplyInt32Map(applier func(v map[string]bool) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out BoolMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out BoolMapOutput) ApplyInt64(applier func(v map[string]bool) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]bool) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out BoolMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out BoolMapOutput) ApplyInt64Array(applier func(v map[string]bool) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out BoolMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out BoolMapOutput) ApplyInt64Map(applier func(v map[string]bool) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out BoolMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out BoolMapOutput) ApplyInt8(applier func(v map[string]bool) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]bool) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out BoolMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out BoolMapOutput) ApplyInt8Array(applier func(v map[string]bool) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out BoolMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out BoolMapOutput) ApplyInt8Map(applier func(v map[string]bool) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out BoolMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out BoolMapOutput) ApplyString(applier func(v map[string]bool) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]bool) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out BoolMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out BoolMapOutput) ApplyStringArray(applier func(v map[string]bool) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out BoolMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out BoolMapOutput) ApplyStringMap(applier func(v map[string]bool) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out BoolMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out BoolMapOutput) ApplyURN(applier func(v map[string]bool) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]bool) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out BoolMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out BoolMapOutput) ApplyURNArray(applier func(v map[string]bool) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out BoolMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out BoolMapOutput) ApplyURNMap(applier func(v map[string]bool) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out BoolMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out BoolMapOutput) ApplyUint(applier func(v map[string]bool) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]bool) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out BoolMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out BoolMapOutput) ApplyUintArray(applier func(v map[string]bool) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out BoolMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out BoolMapOutput) ApplyUintMap(applier func(v map[string]bool) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out BoolMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out BoolMapOutput) ApplyUint16(applier func(v map[string]bool) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]bool) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out BoolMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out BoolMapOutput) ApplyUint16Array(applier func(v map[string]bool) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out BoolMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out BoolMapOutput) ApplyUint16Map(applier func(v map[string]bool) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out BoolMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out BoolMapOutput) ApplyUint32(applier func(v map[string]bool) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]bool) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out BoolMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out BoolMapOutput) ApplyUint32Array(applier func(v map[string]bool) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out BoolMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out BoolMapOutput) ApplyUint32Map(applier func(v map[string]bool) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out BoolMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out BoolMapOutput) ApplyUint64(applier func(v map[string]bool) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]bool) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out BoolMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out BoolMapOutput) ApplyUint64Array(applier func(v map[string]bool) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out BoolMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out BoolMapOutput) ApplyUint64Map(applier func(v map[string]bool) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out BoolMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out BoolMapOutput) ApplyUint8(applier func(v map[string]bool) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]bool) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out BoolMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]bool) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out BoolMapOutput) ApplyUint8Array(applier func(v map[string]bool) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]bool) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out BoolMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]bool) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out BoolMapOutput) ApplyUint8Map(applier func(v map[string]bool) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]bool) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out BoolMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]bool) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var float32Type = reflect.TypeOf((*float32)(nil)).Elem()

// Float32Input is an input type that accepts Float32 and Float32Output values.
type Float32Input interface {
	Input

	// nolint: unused
	isFloat32()
}

// Float32 is an input type for float32 values.
type Float32 float32

// ElementType returns the element type of this Input (float32).
func (Float32) ElementType() reflect.Type {
	return float32Type
}

func (Float32) isFloat32() {}

// Float32Output is an Output that returns float32 values.
type Float32Output OutputType

// ElementType returns the element type of this Output (float32).
func (Float32Output) ElementType() reflect.Type {
	return float32Type
}

func (Float32Output) isFloat32() {}

// Apply applies a transformation to the float32 value when it is available.
func (out Float32Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the float32 value when it is available.
func (out Float32Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Float32Output) ApplyAny(applier func(v float32) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v float32) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Float32Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, float32) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Float32Output) ApplyAnyArray(applier func(v float32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Float32Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Float32Output) ApplyAnyMap(applier func(v float32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Float32Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Float32Output) ApplyArchive(applier func(v float32) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v float32) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Float32Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, float32) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Float32Output) ApplyArchiveArray(applier func(v float32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Float32Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Float32Output) ApplyArchiveMap(applier func(v float32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Float32Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Float32Output) ApplyAsset(applier func(v float32) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v float32) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Float32Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, float32) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Float32Output) ApplyAssetArray(applier func(v float32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Float32Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Float32Output) ApplyAssetMap(applier func(v float32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Float32Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Float32Output) ApplyAssetOrArchive(applier func(v float32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v float32) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Float32Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, float32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Float32Output) ApplyAssetOrArchiveArray(applier func(v float32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Float32Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Float32Output) ApplyAssetOrArchiveMap(applier func(v float32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Float32Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Float32Output) ApplyBool(applier func(v float32) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v float32) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Float32Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, float32) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Float32Output) ApplyBoolArray(applier func(v float32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Float32Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Float32Output) ApplyBoolMap(applier func(v float32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Float32Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Float32Output) ApplyFloat32(applier func(v float32) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v float32) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Float32Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, float32) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Float32Output) ApplyFloat32Array(applier func(v float32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Float32Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Float32Output) ApplyFloat32Map(applier func(v float32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Float32Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Float32Output) ApplyFloat64(applier func(v float32) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v float32) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Float32Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, float32) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Float32Output) ApplyFloat64Array(applier func(v float32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Float32Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Float32Output) ApplyFloat64Map(applier func(v float32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Float32Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Float32Output) ApplyID(applier func(v float32) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v float32) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Float32Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, float32) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Float32Output) ApplyIDArray(applier func(v float32) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Float32Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Float32Output) ApplyIDMap(applier func(v float32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Float32Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Float32Output) ApplyInt(applier func(v float32) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v float32) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Float32Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, float32) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Float32Output) ApplyIntArray(applier func(v float32) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Float32Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Float32Output) ApplyIntMap(applier func(v float32) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Float32Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Float32Output) ApplyInt16(applier func(v float32) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v float32) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Float32Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, float32) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Float32Output) ApplyInt16Array(applier func(v float32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Float32Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Float32Output) ApplyInt16Map(applier func(v float32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Float32Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Float32Output) ApplyInt32(applier func(v float32) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v float32) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Float32Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, float32) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Float32Output) ApplyInt32Array(applier func(v float32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Float32Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Float32Output) ApplyInt32Map(applier func(v float32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Float32Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Float32Output) ApplyInt64(applier func(v float32) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v float32) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Float32Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, float32) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Float32Output) ApplyInt64Array(applier func(v float32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Float32Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Float32Output) ApplyInt64Map(applier func(v float32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Float32Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Float32Output) ApplyInt8(applier func(v float32) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v float32) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Float32Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, float32) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Float32Output) ApplyInt8Array(applier func(v float32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Float32Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Float32Output) ApplyInt8Map(applier func(v float32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Float32Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Float32Output) ApplyString(applier func(v float32) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v float32) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Float32Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, float32) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Float32Output) ApplyStringArray(applier func(v float32) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Float32Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Float32Output) ApplyStringMap(applier func(v float32) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Float32Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Float32Output) ApplyURN(applier func(v float32) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v float32) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Float32Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, float32) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Float32Output) ApplyURNArray(applier func(v float32) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Float32Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Float32Output) ApplyURNMap(applier func(v float32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Float32Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Float32Output) ApplyUint(applier func(v float32) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v float32) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Float32Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, float32) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Float32Output) ApplyUintArray(applier func(v float32) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Float32Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Float32Output) ApplyUintMap(applier func(v float32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Float32Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Float32Output) ApplyUint16(applier func(v float32) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v float32) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Float32Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, float32) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Float32Output) ApplyUint16Array(applier func(v float32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Float32Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Float32Output) ApplyUint16Map(applier func(v float32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Float32Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Float32Output) ApplyUint32(applier func(v float32) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v float32) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Float32Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, float32) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Float32Output) ApplyUint32Array(applier func(v float32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Float32Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Float32Output) ApplyUint32Map(applier func(v float32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Float32Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Float32Output) ApplyUint64(applier func(v float32) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v float32) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Float32Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, float32) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Float32Output) ApplyUint64Array(applier func(v float32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Float32Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Float32Output) ApplyUint64Map(applier func(v float32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Float32Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Float32Output) ApplyUint8(applier func(v float32) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v float32) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Float32Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, float32) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Float32Output) ApplyUint8Array(applier func(v float32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v float32) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Float32Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, float32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Float32Output) ApplyUint8Map(applier func(v float32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v float32) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Float32Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, float32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var float32arrayType = reflect.TypeOf((*[]float32)(nil)).Elem()

// Float32ArrayInput is an input type that accepts Float32Array and Float32ArrayOutput values.
type Float32ArrayInput interface {
	Input

	// nolint: unused
	isFloat32Array()
}

// Float32Array is an input type for []float32 values.
type Float32Array []float32

// ElementType returns the element type of this Input ([]float32).
func (Float32Array) ElementType() reflect.Type {
	return float32arrayType
}

func (Float32Array) isFloat32Array() {}

// Float32ArrayOutput is an Output that returns []float32 values.
type Float32ArrayOutput OutputType

// ElementType returns the element type of this Output ([]float32).
func (Float32ArrayOutput) ElementType() reflect.Type {
	return float32arrayType
}

func (Float32ArrayOutput) isFloat32Array() {}

// Apply applies a transformation to the float32array value when it is available.
func (out Float32ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the float32array value when it is available.
func (out Float32ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Float32ArrayOutput) ApplyAny(applier func(v []float32) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []float32) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Float32ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []float32) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Float32ArrayOutput) ApplyAnyArray(applier func(v []float32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Float32ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Float32ArrayOutput) ApplyAnyMap(applier func(v []float32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Float32ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Float32ArrayOutput) ApplyArchive(applier func(v []float32) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []float32) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Float32ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []float32) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Float32ArrayOutput) ApplyArchiveArray(applier func(v []float32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Float32ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Float32ArrayOutput) ApplyArchiveMap(applier func(v []float32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Float32ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Float32ArrayOutput) ApplyAsset(applier func(v []float32) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []float32) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Float32ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []float32) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Float32ArrayOutput) ApplyAssetArray(applier func(v []float32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Float32ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Float32ArrayOutput) ApplyAssetMap(applier func(v []float32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Float32ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Float32ArrayOutput) ApplyAssetOrArchive(applier func(v []float32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []float32) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Float32ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []float32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Float32ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []float32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Float32ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Float32ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []float32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Float32ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Float32ArrayOutput) ApplyBool(applier func(v []float32) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []float32) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Float32ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []float32) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Float32ArrayOutput) ApplyBoolArray(applier func(v []float32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Float32ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Float32ArrayOutput) ApplyBoolMap(applier func(v []float32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Float32ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Float32ArrayOutput) ApplyFloat32(applier func(v []float32) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []float32) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Float32ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []float32) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Float32ArrayOutput) ApplyFloat32Array(applier func(v []float32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Float32ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Float32ArrayOutput) ApplyFloat32Map(applier func(v []float32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Float32ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Float32ArrayOutput) ApplyFloat64(applier func(v []float32) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []float32) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Float32ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []float32) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Float32ArrayOutput) ApplyFloat64Array(applier func(v []float32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Float32ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Float32ArrayOutput) ApplyFloat64Map(applier func(v []float32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Float32ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Float32ArrayOutput) ApplyID(applier func(v []float32) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []float32) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Float32ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []float32) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Float32ArrayOutput) ApplyIDArray(applier func(v []float32) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Float32ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Float32ArrayOutput) ApplyIDMap(applier func(v []float32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Float32ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Float32ArrayOutput) ApplyInt(applier func(v []float32) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []float32) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Float32ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []float32) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Float32ArrayOutput) ApplyIntArray(applier func(v []float32) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Float32ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Float32ArrayOutput) ApplyIntMap(applier func(v []float32) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Float32ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Float32ArrayOutput) ApplyInt16(applier func(v []float32) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []float32) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Float32ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []float32) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Float32ArrayOutput) ApplyInt16Array(applier func(v []float32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Float32ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Float32ArrayOutput) ApplyInt16Map(applier func(v []float32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Float32ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Float32ArrayOutput) ApplyInt32(applier func(v []float32) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []float32) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Float32ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []float32) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Float32ArrayOutput) ApplyInt32Array(applier func(v []float32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Float32ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Float32ArrayOutput) ApplyInt32Map(applier func(v []float32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Float32ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Float32ArrayOutput) ApplyInt64(applier func(v []float32) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []float32) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Float32ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []float32) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Float32ArrayOutput) ApplyInt64Array(applier func(v []float32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Float32ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Float32ArrayOutput) ApplyInt64Map(applier func(v []float32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Float32ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Float32ArrayOutput) ApplyInt8(applier func(v []float32) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []float32) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Float32ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []float32) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Float32ArrayOutput) ApplyInt8Array(applier func(v []float32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Float32ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Float32ArrayOutput) ApplyInt8Map(applier func(v []float32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Float32ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Float32ArrayOutput) ApplyString(applier func(v []float32) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []float32) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Float32ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []float32) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Float32ArrayOutput) ApplyStringArray(applier func(v []float32) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Float32ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Float32ArrayOutput) ApplyStringMap(applier func(v []float32) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Float32ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Float32ArrayOutput) ApplyURN(applier func(v []float32) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []float32) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Float32ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []float32) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Float32ArrayOutput) ApplyURNArray(applier func(v []float32) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Float32ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Float32ArrayOutput) ApplyURNMap(applier func(v []float32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Float32ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Float32ArrayOutput) ApplyUint(applier func(v []float32) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []float32) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Float32ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []float32) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Float32ArrayOutput) ApplyUintArray(applier func(v []float32) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Float32ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Float32ArrayOutput) ApplyUintMap(applier func(v []float32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Float32ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Float32ArrayOutput) ApplyUint16(applier func(v []float32) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []float32) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Float32ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []float32) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Float32ArrayOutput) ApplyUint16Array(applier func(v []float32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Float32ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Float32ArrayOutput) ApplyUint16Map(applier func(v []float32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Float32ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Float32ArrayOutput) ApplyUint32(applier func(v []float32) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []float32) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Float32ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []float32) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Float32ArrayOutput) ApplyUint32Array(applier func(v []float32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Float32ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Float32ArrayOutput) ApplyUint32Map(applier func(v []float32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Float32ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Float32ArrayOutput) ApplyUint64(applier func(v []float32) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []float32) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Float32ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []float32) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Float32ArrayOutput) ApplyUint64Array(applier func(v []float32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Float32ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Float32ArrayOutput) ApplyUint64Map(applier func(v []float32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Float32ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Float32ArrayOutput) ApplyUint8(applier func(v []float32) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []float32) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Float32ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []float32) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Float32ArrayOutput) ApplyUint8Array(applier func(v []float32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []float32) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Float32ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []float32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Float32ArrayOutput) ApplyUint8Map(applier func(v []float32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []float32) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Float32ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []float32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var float32mapType = reflect.TypeOf((*map[string]float32)(nil)).Elem()

// Float32MapInput is an input type that accepts Float32Map and Float32MapOutput values.
type Float32MapInput interface {
	Input

	// nolint: unused
	isFloat32Map()
}

// Float32Map is an input type for map[string]float32 values.
type Float32Map map[string]float32

// ElementType returns the element type of this Input (map[string]float32).
func (Float32Map) ElementType() reflect.Type {
	return float32mapType
}

func (Float32Map) isFloat32Map() {}

// Float32MapOutput is an Output that returns map[string]float32 values.
type Float32MapOutput OutputType

// ElementType returns the element type of this Output (map[string]float32).
func (Float32MapOutput) ElementType() reflect.Type {
	return float32mapType
}

func (Float32MapOutput) isFloat32Map() {}

// Apply applies a transformation to the float32map value when it is available.
func (out Float32MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the float32map value when it is available.
func (out Float32MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Float32MapOutput) ApplyAny(applier func(v map[string]float32) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]float32) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Float32MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Float32MapOutput) ApplyAnyArray(applier func(v map[string]float32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Float32MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Float32MapOutput) ApplyAnyMap(applier func(v map[string]float32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Float32MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Float32MapOutput) ApplyArchive(applier func(v map[string]float32) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]float32) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Float32MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Float32MapOutput) ApplyArchiveArray(applier func(v map[string]float32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Float32MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Float32MapOutput) ApplyArchiveMap(applier func(v map[string]float32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Float32MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Float32MapOutput) ApplyAsset(applier func(v map[string]float32) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]float32) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Float32MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Float32MapOutput) ApplyAssetArray(applier func(v map[string]float32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Float32MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Float32MapOutput) ApplyAssetMap(applier func(v map[string]float32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Float32MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Float32MapOutput) ApplyAssetOrArchive(applier func(v map[string]float32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]float32) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Float32MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Float32MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]float32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Float32MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Float32MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]float32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Float32MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Float32MapOutput) ApplyBool(applier func(v map[string]float32) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]float32) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Float32MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Float32MapOutput) ApplyBoolArray(applier func(v map[string]float32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Float32MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Float32MapOutput) ApplyBoolMap(applier func(v map[string]float32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Float32MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Float32MapOutput) ApplyFloat32(applier func(v map[string]float32) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]float32) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Float32MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Float32MapOutput) ApplyFloat32Array(applier func(v map[string]float32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Float32MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Float32MapOutput) ApplyFloat32Map(applier func(v map[string]float32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Float32MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Float32MapOutput) ApplyFloat64(applier func(v map[string]float32) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]float32) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Float32MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Float32MapOutput) ApplyFloat64Array(applier func(v map[string]float32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Float32MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Float32MapOutput) ApplyFloat64Map(applier func(v map[string]float32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Float32MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Float32MapOutput) ApplyID(applier func(v map[string]float32) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]float32) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Float32MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Float32MapOutput) ApplyIDArray(applier func(v map[string]float32) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Float32MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Float32MapOutput) ApplyIDMap(applier func(v map[string]float32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Float32MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Float32MapOutput) ApplyInt(applier func(v map[string]float32) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]float32) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Float32MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Float32MapOutput) ApplyIntArray(applier func(v map[string]float32) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Float32MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Float32MapOutput) ApplyIntMap(applier func(v map[string]float32) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Float32MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Float32MapOutput) ApplyInt16(applier func(v map[string]float32) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]float32) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Float32MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Float32MapOutput) ApplyInt16Array(applier func(v map[string]float32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Float32MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Float32MapOutput) ApplyInt16Map(applier func(v map[string]float32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Float32MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Float32MapOutput) ApplyInt32(applier func(v map[string]float32) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]float32) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Float32MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Float32MapOutput) ApplyInt32Array(applier func(v map[string]float32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Float32MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Float32MapOutput) ApplyInt32Map(applier func(v map[string]float32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Float32MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Float32MapOutput) ApplyInt64(applier func(v map[string]float32) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]float32) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Float32MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Float32MapOutput) ApplyInt64Array(applier func(v map[string]float32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Float32MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Float32MapOutput) ApplyInt64Map(applier func(v map[string]float32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Float32MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Float32MapOutput) ApplyInt8(applier func(v map[string]float32) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]float32) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Float32MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Float32MapOutput) ApplyInt8Array(applier func(v map[string]float32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Float32MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Float32MapOutput) ApplyInt8Map(applier func(v map[string]float32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Float32MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Float32MapOutput) ApplyString(applier func(v map[string]float32) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]float32) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Float32MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Float32MapOutput) ApplyStringArray(applier func(v map[string]float32) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Float32MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Float32MapOutput) ApplyStringMap(applier func(v map[string]float32) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Float32MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Float32MapOutput) ApplyURN(applier func(v map[string]float32) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]float32) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Float32MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Float32MapOutput) ApplyURNArray(applier func(v map[string]float32) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Float32MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Float32MapOutput) ApplyURNMap(applier func(v map[string]float32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Float32MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Float32MapOutput) ApplyUint(applier func(v map[string]float32) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]float32) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Float32MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Float32MapOutput) ApplyUintArray(applier func(v map[string]float32) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Float32MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Float32MapOutput) ApplyUintMap(applier func(v map[string]float32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Float32MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Float32MapOutput) ApplyUint16(applier func(v map[string]float32) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]float32) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Float32MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Float32MapOutput) ApplyUint16Array(applier func(v map[string]float32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Float32MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Float32MapOutput) ApplyUint16Map(applier func(v map[string]float32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Float32MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Float32MapOutput) ApplyUint32(applier func(v map[string]float32) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]float32) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Float32MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Float32MapOutput) ApplyUint32Array(applier func(v map[string]float32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Float32MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Float32MapOutput) ApplyUint32Map(applier func(v map[string]float32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Float32MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Float32MapOutput) ApplyUint64(applier func(v map[string]float32) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]float32) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Float32MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Float32MapOutput) ApplyUint64Array(applier func(v map[string]float32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Float32MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Float32MapOutput) ApplyUint64Map(applier func(v map[string]float32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Float32MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Float32MapOutput) ApplyUint8(applier func(v map[string]float32) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]float32) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Float32MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]float32) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Float32MapOutput) ApplyUint8Array(applier func(v map[string]float32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float32) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Float32MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Float32MapOutput) ApplyUint8Map(applier func(v map[string]float32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]float32) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Float32MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]float32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var float64Type = reflect.TypeOf((*float64)(nil)).Elem()

// Float64Input is an input type that accepts Float64 and Float64Output values.
type Float64Input interface {
	Input

	// nolint: unused
	isFloat64()
}

// Float64 is an input type for float64 values.
type Float64 float64

// ElementType returns the element type of this Input (float64).
func (Float64) ElementType() reflect.Type {
	return float64Type
}

func (Float64) isFloat64() {}

// Float64Output is an Output that returns float64 values.
type Float64Output OutputType

// ElementType returns the element type of this Output (float64).
func (Float64Output) ElementType() reflect.Type {
	return float64Type
}

func (Float64Output) isFloat64() {}

// Apply applies a transformation to the float64 value when it is available.
func (out Float64Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the float64 value when it is available.
func (out Float64Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Float64Output) ApplyAny(applier func(v float64) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v float64) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Float64Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, float64) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Float64Output) ApplyAnyArray(applier func(v float64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Float64Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Float64Output) ApplyAnyMap(applier func(v float64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Float64Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Float64Output) ApplyArchive(applier func(v float64) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v float64) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Float64Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, float64) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Float64Output) ApplyArchiveArray(applier func(v float64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Float64Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Float64Output) ApplyArchiveMap(applier func(v float64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Float64Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Float64Output) ApplyAsset(applier func(v float64) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v float64) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Float64Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, float64) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Float64Output) ApplyAssetArray(applier func(v float64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Float64Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Float64Output) ApplyAssetMap(applier func(v float64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Float64Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Float64Output) ApplyAssetOrArchive(applier func(v float64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v float64) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Float64Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, float64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Float64Output) ApplyAssetOrArchiveArray(applier func(v float64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Float64Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Float64Output) ApplyAssetOrArchiveMap(applier func(v float64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Float64Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Float64Output) ApplyBool(applier func(v float64) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v float64) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Float64Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, float64) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Float64Output) ApplyBoolArray(applier func(v float64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Float64Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Float64Output) ApplyBoolMap(applier func(v float64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Float64Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Float64Output) ApplyFloat32(applier func(v float64) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v float64) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Float64Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, float64) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Float64Output) ApplyFloat32Array(applier func(v float64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Float64Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Float64Output) ApplyFloat32Map(applier func(v float64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Float64Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Float64Output) ApplyFloat64(applier func(v float64) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v float64) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Float64Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, float64) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Float64Output) ApplyFloat64Array(applier func(v float64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Float64Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Float64Output) ApplyFloat64Map(applier func(v float64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Float64Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Float64Output) ApplyID(applier func(v float64) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v float64) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Float64Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, float64) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Float64Output) ApplyIDArray(applier func(v float64) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Float64Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Float64Output) ApplyIDMap(applier func(v float64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Float64Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Float64Output) ApplyInt(applier func(v float64) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v float64) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Float64Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, float64) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Float64Output) ApplyIntArray(applier func(v float64) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Float64Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Float64Output) ApplyIntMap(applier func(v float64) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Float64Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Float64Output) ApplyInt16(applier func(v float64) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v float64) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Float64Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, float64) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Float64Output) ApplyInt16Array(applier func(v float64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Float64Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Float64Output) ApplyInt16Map(applier func(v float64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Float64Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Float64Output) ApplyInt32(applier func(v float64) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v float64) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Float64Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, float64) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Float64Output) ApplyInt32Array(applier func(v float64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Float64Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Float64Output) ApplyInt32Map(applier func(v float64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Float64Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Float64Output) ApplyInt64(applier func(v float64) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v float64) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Float64Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, float64) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Float64Output) ApplyInt64Array(applier func(v float64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Float64Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Float64Output) ApplyInt64Map(applier func(v float64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Float64Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Float64Output) ApplyInt8(applier func(v float64) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v float64) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Float64Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, float64) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Float64Output) ApplyInt8Array(applier func(v float64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Float64Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Float64Output) ApplyInt8Map(applier func(v float64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Float64Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Float64Output) ApplyString(applier func(v float64) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v float64) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Float64Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, float64) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Float64Output) ApplyStringArray(applier func(v float64) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Float64Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Float64Output) ApplyStringMap(applier func(v float64) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Float64Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Float64Output) ApplyURN(applier func(v float64) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v float64) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Float64Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, float64) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Float64Output) ApplyURNArray(applier func(v float64) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Float64Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Float64Output) ApplyURNMap(applier func(v float64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Float64Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Float64Output) ApplyUint(applier func(v float64) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v float64) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Float64Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, float64) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Float64Output) ApplyUintArray(applier func(v float64) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Float64Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Float64Output) ApplyUintMap(applier func(v float64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Float64Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Float64Output) ApplyUint16(applier func(v float64) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v float64) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Float64Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, float64) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Float64Output) ApplyUint16Array(applier func(v float64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Float64Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Float64Output) ApplyUint16Map(applier func(v float64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Float64Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Float64Output) ApplyUint32(applier func(v float64) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v float64) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Float64Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, float64) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Float64Output) ApplyUint32Array(applier func(v float64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Float64Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Float64Output) ApplyUint32Map(applier func(v float64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Float64Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Float64Output) ApplyUint64(applier func(v float64) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v float64) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Float64Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, float64) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Float64Output) ApplyUint64Array(applier func(v float64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Float64Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Float64Output) ApplyUint64Map(applier func(v float64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Float64Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Float64Output) ApplyUint8(applier func(v float64) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v float64) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Float64Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, float64) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Float64Output) ApplyUint8Array(applier func(v float64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v float64) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Float64Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, float64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Float64Output) ApplyUint8Map(applier func(v float64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v float64) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Float64Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, float64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var float64arrayType = reflect.TypeOf((*[]float64)(nil)).Elem()

// Float64ArrayInput is an input type that accepts Float64Array and Float64ArrayOutput values.
type Float64ArrayInput interface {
	Input

	// nolint: unused
	isFloat64Array()
}

// Float64Array is an input type for []float64 values.
type Float64Array []float64

// ElementType returns the element type of this Input ([]float64).
func (Float64Array) ElementType() reflect.Type {
	return float64arrayType
}

func (Float64Array) isFloat64Array() {}

// Float64ArrayOutput is an Output that returns []float64 values.
type Float64ArrayOutput OutputType

// ElementType returns the element type of this Output ([]float64).
func (Float64ArrayOutput) ElementType() reflect.Type {
	return float64arrayType
}

func (Float64ArrayOutput) isFloat64Array() {}

// Apply applies a transformation to the float64array value when it is available.
func (out Float64ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the float64array value when it is available.
func (out Float64ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Float64ArrayOutput) ApplyAny(applier func(v []float64) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []float64) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Float64ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []float64) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Float64ArrayOutput) ApplyAnyArray(applier func(v []float64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Float64ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Float64ArrayOutput) ApplyAnyMap(applier func(v []float64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Float64ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Float64ArrayOutput) ApplyArchive(applier func(v []float64) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []float64) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Float64ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []float64) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Float64ArrayOutput) ApplyArchiveArray(applier func(v []float64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Float64ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Float64ArrayOutput) ApplyArchiveMap(applier func(v []float64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Float64ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Float64ArrayOutput) ApplyAsset(applier func(v []float64) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []float64) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Float64ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []float64) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Float64ArrayOutput) ApplyAssetArray(applier func(v []float64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Float64ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Float64ArrayOutput) ApplyAssetMap(applier func(v []float64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Float64ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Float64ArrayOutput) ApplyAssetOrArchive(applier func(v []float64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []float64) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Float64ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []float64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Float64ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []float64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Float64ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Float64ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []float64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Float64ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Float64ArrayOutput) ApplyBool(applier func(v []float64) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []float64) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Float64ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []float64) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Float64ArrayOutput) ApplyBoolArray(applier func(v []float64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Float64ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Float64ArrayOutput) ApplyBoolMap(applier func(v []float64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Float64ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Float64ArrayOutput) ApplyFloat32(applier func(v []float64) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []float64) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Float64ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []float64) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Float64ArrayOutput) ApplyFloat32Array(applier func(v []float64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Float64ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Float64ArrayOutput) ApplyFloat32Map(applier func(v []float64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Float64ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Float64ArrayOutput) ApplyFloat64(applier func(v []float64) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []float64) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Float64ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []float64) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Float64ArrayOutput) ApplyFloat64Array(applier func(v []float64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Float64ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Float64ArrayOutput) ApplyFloat64Map(applier func(v []float64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Float64ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Float64ArrayOutput) ApplyID(applier func(v []float64) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []float64) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Float64ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []float64) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Float64ArrayOutput) ApplyIDArray(applier func(v []float64) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Float64ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Float64ArrayOutput) ApplyIDMap(applier func(v []float64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Float64ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Float64ArrayOutput) ApplyInt(applier func(v []float64) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []float64) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Float64ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []float64) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Float64ArrayOutput) ApplyIntArray(applier func(v []float64) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Float64ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Float64ArrayOutput) ApplyIntMap(applier func(v []float64) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Float64ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Float64ArrayOutput) ApplyInt16(applier func(v []float64) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []float64) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Float64ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []float64) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Float64ArrayOutput) ApplyInt16Array(applier func(v []float64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Float64ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Float64ArrayOutput) ApplyInt16Map(applier func(v []float64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Float64ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Float64ArrayOutput) ApplyInt32(applier func(v []float64) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []float64) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Float64ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []float64) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Float64ArrayOutput) ApplyInt32Array(applier func(v []float64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Float64ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Float64ArrayOutput) ApplyInt32Map(applier func(v []float64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Float64ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Float64ArrayOutput) ApplyInt64(applier func(v []float64) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []float64) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Float64ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []float64) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Float64ArrayOutput) ApplyInt64Array(applier func(v []float64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Float64ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Float64ArrayOutput) ApplyInt64Map(applier func(v []float64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Float64ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Float64ArrayOutput) ApplyInt8(applier func(v []float64) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []float64) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Float64ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []float64) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Float64ArrayOutput) ApplyInt8Array(applier func(v []float64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Float64ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Float64ArrayOutput) ApplyInt8Map(applier func(v []float64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Float64ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Float64ArrayOutput) ApplyString(applier func(v []float64) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []float64) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Float64ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []float64) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Float64ArrayOutput) ApplyStringArray(applier func(v []float64) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Float64ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Float64ArrayOutput) ApplyStringMap(applier func(v []float64) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Float64ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Float64ArrayOutput) ApplyURN(applier func(v []float64) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []float64) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Float64ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []float64) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Float64ArrayOutput) ApplyURNArray(applier func(v []float64) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Float64ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Float64ArrayOutput) ApplyURNMap(applier func(v []float64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Float64ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Float64ArrayOutput) ApplyUint(applier func(v []float64) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []float64) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Float64ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []float64) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Float64ArrayOutput) ApplyUintArray(applier func(v []float64) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Float64ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Float64ArrayOutput) ApplyUintMap(applier func(v []float64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Float64ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Float64ArrayOutput) ApplyUint16(applier func(v []float64) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []float64) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Float64ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []float64) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Float64ArrayOutput) ApplyUint16Array(applier func(v []float64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Float64ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Float64ArrayOutput) ApplyUint16Map(applier func(v []float64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Float64ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Float64ArrayOutput) ApplyUint32(applier func(v []float64) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []float64) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Float64ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []float64) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Float64ArrayOutput) ApplyUint32Array(applier func(v []float64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Float64ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Float64ArrayOutput) ApplyUint32Map(applier func(v []float64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Float64ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Float64ArrayOutput) ApplyUint64(applier func(v []float64) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []float64) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Float64ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []float64) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Float64ArrayOutput) ApplyUint64Array(applier func(v []float64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Float64ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Float64ArrayOutput) ApplyUint64Map(applier func(v []float64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Float64ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Float64ArrayOutput) ApplyUint8(applier func(v []float64) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []float64) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Float64ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []float64) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Float64ArrayOutput) ApplyUint8Array(applier func(v []float64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []float64) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Float64ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []float64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Float64ArrayOutput) ApplyUint8Map(applier func(v []float64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []float64) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Float64ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []float64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var float64mapType = reflect.TypeOf((*map[string]float64)(nil)).Elem()

// Float64MapInput is an input type that accepts Float64Map and Float64MapOutput values.
type Float64MapInput interface {
	Input

	// nolint: unused
	isFloat64Map()
}

// Float64Map is an input type for map[string]float64 values.
type Float64Map map[string]float64

// ElementType returns the element type of this Input (map[string]float64).
func (Float64Map) ElementType() reflect.Type {
	return float64mapType
}

func (Float64Map) isFloat64Map() {}

// Float64MapOutput is an Output that returns map[string]float64 values.
type Float64MapOutput OutputType

// ElementType returns the element type of this Output (map[string]float64).
func (Float64MapOutput) ElementType() reflect.Type {
	return float64mapType
}

func (Float64MapOutput) isFloat64Map() {}

// Apply applies a transformation to the float64map value when it is available.
func (out Float64MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the float64map value when it is available.
func (out Float64MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Float64MapOutput) ApplyAny(applier func(v map[string]float64) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]float64) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Float64MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Float64MapOutput) ApplyAnyArray(applier func(v map[string]float64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Float64MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Float64MapOutput) ApplyAnyMap(applier func(v map[string]float64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Float64MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Float64MapOutput) ApplyArchive(applier func(v map[string]float64) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]float64) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Float64MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Float64MapOutput) ApplyArchiveArray(applier func(v map[string]float64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Float64MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Float64MapOutput) ApplyArchiveMap(applier func(v map[string]float64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Float64MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Float64MapOutput) ApplyAsset(applier func(v map[string]float64) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]float64) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Float64MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Float64MapOutput) ApplyAssetArray(applier func(v map[string]float64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Float64MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Float64MapOutput) ApplyAssetMap(applier func(v map[string]float64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Float64MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Float64MapOutput) ApplyAssetOrArchive(applier func(v map[string]float64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]float64) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Float64MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Float64MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]float64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Float64MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Float64MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]float64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Float64MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Float64MapOutput) ApplyBool(applier func(v map[string]float64) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]float64) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Float64MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Float64MapOutput) ApplyBoolArray(applier func(v map[string]float64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Float64MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Float64MapOutput) ApplyBoolMap(applier func(v map[string]float64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Float64MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Float64MapOutput) ApplyFloat32(applier func(v map[string]float64) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]float64) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Float64MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Float64MapOutput) ApplyFloat32Array(applier func(v map[string]float64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Float64MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Float64MapOutput) ApplyFloat32Map(applier func(v map[string]float64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Float64MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Float64MapOutput) ApplyFloat64(applier func(v map[string]float64) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]float64) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Float64MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Float64MapOutput) ApplyFloat64Array(applier func(v map[string]float64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Float64MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Float64MapOutput) ApplyFloat64Map(applier func(v map[string]float64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Float64MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Float64MapOutput) ApplyID(applier func(v map[string]float64) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]float64) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Float64MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Float64MapOutput) ApplyIDArray(applier func(v map[string]float64) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Float64MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Float64MapOutput) ApplyIDMap(applier func(v map[string]float64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Float64MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Float64MapOutput) ApplyInt(applier func(v map[string]float64) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]float64) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Float64MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Float64MapOutput) ApplyIntArray(applier func(v map[string]float64) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Float64MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Float64MapOutput) ApplyIntMap(applier func(v map[string]float64) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Float64MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Float64MapOutput) ApplyInt16(applier func(v map[string]float64) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]float64) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Float64MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Float64MapOutput) ApplyInt16Array(applier func(v map[string]float64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Float64MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Float64MapOutput) ApplyInt16Map(applier func(v map[string]float64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Float64MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Float64MapOutput) ApplyInt32(applier func(v map[string]float64) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]float64) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Float64MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Float64MapOutput) ApplyInt32Array(applier func(v map[string]float64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Float64MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Float64MapOutput) ApplyInt32Map(applier func(v map[string]float64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Float64MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Float64MapOutput) ApplyInt64(applier func(v map[string]float64) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]float64) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Float64MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Float64MapOutput) ApplyInt64Array(applier func(v map[string]float64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Float64MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Float64MapOutput) ApplyInt64Map(applier func(v map[string]float64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Float64MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Float64MapOutput) ApplyInt8(applier func(v map[string]float64) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]float64) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Float64MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Float64MapOutput) ApplyInt8Array(applier func(v map[string]float64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Float64MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Float64MapOutput) ApplyInt8Map(applier func(v map[string]float64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Float64MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Float64MapOutput) ApplyString(applier func(v map[string]float64) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]float64) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Float64MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Float64MapOutput) ApplyStringArray(applier func(v map[string]float64) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Float64MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Float64MapOutput) ApplyStringMap(applier func(v map[string]float64) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Float64MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Float64MapOutput) ApplyURN(applier func(v map[string]float64) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]float64) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Float64MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Float64MapOutput) ApplyURNArray(applier func(v map[string]float64) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Float64MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Float64MapOutput) ApplyURNMap(applier func(v map[string]float64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Float64MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Float64MapOutput) ApplyUint(applier func(v map[string]float64) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]float64) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Float64MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Float64MapOutput) ApplyUintArray(applier func(v map[string]float64) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Float64MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Float64MapOutput) ApplyUintMap(applier func(v map[string]float64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Float64MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Float64MapOutput) ApplyUint16(applier func(v map[string]float64) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]float64) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Float64MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Float64MapOutput) ApplyUint16Array(applier func(v map[string]float64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Float64MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Float64MapOutput) ApplyUint16Map(applier func(v map[string]float64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Float64MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Float64MapOutput) ApplyUint32(applier func(v map[string]float64) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]float64) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Float64MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Float64MapOutput) ApplyUint32Array(applier func(v map[string]float64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Float64MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Float64MapOutput) ApplyUint32Map(applier func(v map[string]float64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Float64MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Float64MapOutput) ApplyUint64(applier func(v map[string]float64) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]float64) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Float64MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Float64MapOutput) ApplyUint64Array(applier func(v map[string]float64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Float64MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Float64MapOutput) ApplyUint64Map(applier func(v map[string]float64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Float64MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Float64MapOutput) ApplyUint8(applier func(v map[string]float64) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]float64) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Float64MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]float64) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Float64MapOutput) ApplyUint8Array(applier func(v map[string]float64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]float64) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Float64MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]float64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Float64MapOutput) ApplyUint8Map(applier func(v map[string]float64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]float64) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Float64MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]float64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var idType = reflect.TypeOf((*ID)(nil)).Elem()

// IDInput is an input type that accepts ID and IDOutput values.
type IDInput interface {
	Input

	// nolint: unused
	isID()
}

// ElementType returns the element type of this Input (ID).
func (ID) ElementType() reflect.Type {
	return idType
}

func (ID) isID() {}

func (ID) isString() {}

// IDOutput is an Output that returns ID values.
type IDOutput OutputType

// ElementType returns the element type of this Output (ID).
func (IDOutput) ElementType() reflect.Type {
	return idType
}

func (IDOutput) isID() {}

func (IDOutput) isString() {}

// Apply applies a transformation to the id value when it is available.
func (out IDOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the id value when it is available.
func (out IDOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out IDOutput) ApplyAny(applier func(v ID) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v ID) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out IDOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, ID) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out IDOutput) ApplyAnyArray(applier func(v ID) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out IDOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out IDOutput) ApplyAnyMap(applier func(v ID) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out IDOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out IDOutput) ApplyArchive(applier func(v ID) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v ID) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out IDOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, ID) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out IDOutput) ApplyArchiveArray(applier func(v ID) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out IDOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out IDOutput) ApplyArchiveMap(applier func(v ID) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out IDOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out IDOutput) ApplyAsset(applier func(v ID) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v ID) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out IDOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, ID) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out IDOutput) ApplyAssetArray(applier func(v ID) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out IDOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out IDOutput) ApplyAssetMap(applier func(v ID) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out IDOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out IDOutput) ApplyAssetOrArchive(applier func(v ID) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v ID) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out IDOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, ID) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out IDOutput) ApplyAssetOrArchiveArray(applier func(v ID) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out IDOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out IDOutput) ApplyAssetOrArchiveMap(applier func(v ID) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out IDOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out IDOutput) ApplyBool(applier func(v ID) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v ID) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out IDOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, ID) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out IDOutput) ApplyBoolArray(applier func(v ID) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out IDOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out IDOutput) ApplyBoolMap(applier func(v ID) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out IDOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out IDOutput) ApplyFloat32(applier func(v ID) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v ID) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out IDOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, ID) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out IDOutput) ApplyFloat32Array(applier func(v ID) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out IDOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out IDOutput) ApplyFloat32Map(applier func(v ID) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out IDOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out IDOutput) ApplyFloat64(applier func(v ID) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v ID) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out IDOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, ID) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out IDOutput) ApplyFloat64Array(applier func(v ID) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out IDOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out IDOutput) ApplyFloat64Map(applier func(v ID) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out IDOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out IDOutput) ApplyID(applier func(v ID) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v ID) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out IDOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, ID) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out IDOutput) ApplyIDArray(applier func(v ID) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out IDOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out IDOutput) ApplyIDMap(applier func(v ID) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out IDOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out IDOutput) ApplyInt(applier func(v ID) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v ID) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out IDOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, ID) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out IDOutput) ApplyIntArray(applier func(v ID) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out IDOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out IDOutput) ApplyIntMap(applier func(v ID) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out IDOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out IDOutput) ApplyInt16(applier func(v ID) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v ID) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out IDOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, ID) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out IDOutput) ApplyInt16Array(applier func(v ID) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out IDOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out IDOutput) ApplyInt16Map(applier func(v ID) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out IDOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out IDOutput) ApplyInt32(applier func(v ID) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v ID) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out IDOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, ID) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out IDOutput) ApplyInt32Array(applier func(v ID) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out IDOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out IDOutput) ApplyInt32Map(applier func(v ID) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out IDOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out IDOutput) ApplyInt64(applier func(v ID) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v ID) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out IDOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, ID) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out IDOutput) ApplyInt64Array(applier func(v ID) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out IDOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out IDOutput) ApplyInt64Map(applier func(v ID) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out IDOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out IDOutput) ApplyInt8(applier func(v ID) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v ID) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out IDOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, ID) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out IDOutput) ApplyInt8Array(applier func(v ID) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out IDOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out IDOutput) ApplyInt8Map(applier func(v ID) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out IDOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out IDOutput) ApplyString(applier func(v ID) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v ID) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out IDOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, ID) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out IDOutput) ApplyStringArray(applier func(v ID) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out IDOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out IDOutput) ApplyStringMap(applier func(v ID) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out IDOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out IDOutput) ApplyURN(applier func(v ID) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v ID) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out IDOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, ID) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out IDOutput) ApplyURNArray(applier func(v ID) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out IDOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out IDOutput) ApplyURNMap(applier func(v ID) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out IDOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out IDOutput) ApplyUint(applier func(v ID) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v ID) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out IDOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, ID) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out IDOutput) ApplyUintArray(applier func(v ID) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out IDOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out IDOutput) ApplyUintMap(applier func(v ID) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out IDOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out IDOutput) ApplyUint16(applier func(v ID) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v ID) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out IDOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, ID) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out IDOutput) ApplyUint16Array(applier func(v ID) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out IDOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out IDOutput) ApplyUint16Map(applier func(v ID) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out IDOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out IDOutput) ApplyUint32(applier func(v ID) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v ID) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out IDOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, ID) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out IDOutput) ApplyUint32Array(applier func(v ID) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out IDOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out IDOutput) ApplyUint32Map(applier func(v ID) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out IDOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out IDOutput) ApplyUint64(applier func(v ID) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v ID) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out IDOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, ID) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out IDOutput) ApplyUint64Array(applier func(v ID) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out IDOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out IDOutput) ApplyUint64Map(applier func(v ID) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out IDOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out IDOutput) ApplyUint8(applier func(v ID) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v ID) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out IDOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, ID) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out IDOutput) ApplyUint8Array(applier func(v ID) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v ID) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out IDOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, ID) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out IDOutput) ApplyUint8Map(applier func(v ID) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v ID) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out IDOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, ID) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var idarrayType = reflect.TypeOf((*[]ID)(nil)).Elem()

// IDArrayInput is an input type that accepts IDArray and IDArrayOutput values.
type IDArrayInput interface {
	Input

	// nolint: unused
	isIDArray()
}

// IDArray is an input type for []ID values.
type IDArray []ID

// ElementType returns the element type of this Input ([]ID).
func (IDArray) ElementType() reflect.Type {
	return idarrayType
}

func (IDArray) isIDArray() {}

// IDArrayOutput is an Output that returns []ID values.
type IDArrayOutput OutputType

// ElementType returns the element type of this Output ([]ID).
func (IDArrayOutput) ElementType() reflect.Type {
	return idarrayType
}

func (IDArrayOutput) isIDArray() {}

// Apply applies a transformation to the idarray value when it is available.
func (out IDArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the idarray value when it is available.
func (out IDArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out IDArrayOutput) ApplyAny(applier func(v []ID) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []ID) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out IDArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []ID) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out IDArrayOutput) ApplyAnyArray(applier func(v []ID) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out IDArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out IDArrayOutput) ApplyAnyMap(applier func(v []ID) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out IDArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out IDArrayOutput) ApplyArchive(applier func(v []ID) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []ID) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out IDArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []ID) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out IDArrayOutput) ApplyArchiveArray(applier func(v []ID) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out IDArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out IDArrayOutput) ApplyArchiveMap(applier func(v []ID) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out IDArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out IDArrayOutput) ApplyAsset(applier func(v []ID) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []ID) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out IDArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []ID) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out IDArrayOutput) ApplyAssetArray(applier func(v []ID) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out IDArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out IDArrayOutput) ApplyAssetMap(applier func(v []ID) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out IDArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out IDArrayOutput) ApplyAssetOrArchive(applier func(v []ID) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []ID) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out IDArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []ID) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out IDArrayOutput) ApplyAssetOrArchiveArray(applier func(v []ID) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out IDArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out IDArrayOutput) ApplyAssetOrArchiveMap(applier func(v []ID) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out IDArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out IDArrayOutput) ApplyBool(applier func(v []ID) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []ID) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out IDArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []ID) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out IDArrayOutput) ApplyBoolArray(applier func(v []ID) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out IDArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out IDArrayOutput) ApplyBoolMap(applier func(v []ID) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out IDArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out IDArrayOutput) ApplyFloat32(applier func(v []ID) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []ID) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out IDArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []ID) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out IDArrayOutput) ApplyFloat32Array(applier func(v []ID) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out IDArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out IDArrayOutput) ApplyFloat32Map(applier func(v []ID) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out IDArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out IDArrayOutput) ApplyFloat64(applier func(v []ID) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []ID) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out IDArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []ID) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out IDArrayOutput) ApplyFloat64Array(applier func(v []ID) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out IDArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out IDArrayOutput) ApplyFloat64Map(applier func(v []ID) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out IDArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out IDArrayOutput) ApplyID(applier func(v []ID) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []ID) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out IDArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []ID) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out IDArrayOutput) ApplyIDArray(applier func(v []ID) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out IDArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out IDArrayOutput) ApplyIDMap(applier func(v []ID) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out IDArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out IDArrayOutput) ApplyInt(applier func(v []ID) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []ID) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out IDArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []ID) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out IDArrayOutput) ApplyIntArray(applier func(v []ID) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out IDArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out IDArrayOutput) ApplyIntMap(applier func(v []ID) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out IDArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out IDArrayOutput) ApplyInt16(applier func(v []ID) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []ID) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out IDArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []ID) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out IDArrayOutput) ApplyInt16Array(applier func(v []ID) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out IDArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out IDArrayOutput) ApplyInt16Map(applier func(v []ID) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out IDArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out IDArrayOutput) ApplyInt32(applier func(v []ID) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []ID) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out IDArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []ID) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out IDArrayOutput) ApplyInt32Array(applier func(v []ID) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out IDArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out IDArrayOutput) ApplyInt32Map(applier func(v []ID) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out IDArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out IDArrayOutput) ApplyInt64(applier func(v []ID) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []ID) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out IDArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []ID) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out IDArrayOutput) ApplyInt64Array(applier func(v []ID) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out IDArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out IDArrayOutput) ApplyInt64Map(applier func(v []ID) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out IDArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out IDArrayOutput) ApplyInt8(applier func(v []ID) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []ID) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out IDArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []ID) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out IDArrayOutput) ApplyInt8Array(applier func(v []ID) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out IDArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out IDArrayOutput) ApplyInt8Map(applier func(v []ID) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out IDArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out IDArrayOutput) ApplyString(applier func(v []ID) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []ID) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out IDArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []ID) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out IDArrayOutput) ApplyStringArray(applier func(v []ID) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out IDArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out IDArrayOutput) ApplyStringMap(applier func(v []ID) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out IDArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out IDArrayOutput) ApplyURN(applier func(v []ID) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []ID) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out IDArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []ID) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out IDArrayOutput) ApplyURNArray(applier func(v []ID) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out IDArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out IDArrayOutput) ApplyURNMap(applier func(v []ID) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out IDArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out IDArrayOutput) ApplyUint(applier func(v []ID) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []ID) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out IDArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []ID) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out IDArrayOutput) ApplyUintArray(applier func(v []ID) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out IDArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out IDArrayOutput) ApplyUintMap(applier func(v []ID) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out IDArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out IDArrayOutput) ApplyUint16(applier func(v []ID) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []ID) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out IDArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []ID) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out IDArrayOutput) ApplyUint16Array(applier func(v []ID) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out IDArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out IDArrayOutput) ApplyUint16Map(applier func(v []ID) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out IDArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out IDArrayOutput) ApplyUint32(applier func(v []ID) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []ID) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out IDArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []ID) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out IDArrayOutput) ApplyUint32Array(applier func(v []ID) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out IDArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out IDArrayOutput) ApplyUint32Map(applier func(v []ID) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out IDArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out IDArrayOutput) ApplyUint64(applier func(v []ID) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []ID) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out IDArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []ID) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out IDArrayOutput) ApplyUint64Array(applier func(v []ID) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out IDArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out IDArrayOutput) ApplyUint64Map(applier func(v []ID) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out IDArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out IDArrayOutput) ApplyUint8(applier func(v []ID) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []ID) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out IDArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []ID) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out IDArrayOutput) ApplyUint8Array(applier func(v []ID) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []ID) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out IDArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []ID) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out IDArrayOutput) ApplyUint8Map(applier func(v []ID) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []ID) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out IDArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []ID) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var idmapType = reflect.TypeOf((*map[string]ID)(nil)).Elem()

// IDMapInput is an input type that accepts IDMap and IDMapOutput values.
type IDMapInput interface {
	Input

	// nolint: unused
	isIDMap()
}

// IDMap is an input type for map[string]ID values.
type IDMap map[string]ID

// ElementType returns the element type of this Input (map[string]ID).
func (IDMap) ElementType() reflect.Type {
	return idmapType
}

func (IDMap) isIDMap() {}

// IDMapOutput is an Output that returns map[string]ID values.
type IDMapOutput OutputType

// ElementType returns the element type of this Output (map[string]ID).
func (IDMapOutput) ElementType() reflect.Type {
	return idmapType
}

func (IDMapOutput) isIDMap() {}

// Apply applies a transformation to the idmap value when it is available.
func (out IDMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the idmap value when it is available.
func (out IDMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out IDMapOutput) ApplyAny(applier func(v map[string]ID) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]ID) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out IDMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out IDMapOutput) ApplyAnyArray(applier func(v map[string]ID) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out IDMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out IDMapOutput) ApplyAnyMap(applier func(v map[string]ID) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out IDMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out IDMapOutput) ApplyArchive(applier func(v map[string]ID) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]ID) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out IDMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out IDMapOutput) ApplyArchiveArray(applier func(v map[string]ID) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out IDMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out IDMapOutput) ApplyArchiveMap(applier func(v map[string]ID) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out IDMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out IDMapOutput) ApplyAsset(applier func(v map[string]ID) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]ID) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out IDMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out IDMapOutput) ApplyAssetArray(applier func(v map[string]ID) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out IDMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out IDMapOutput) ApplyAssetMap(applier func(v map[string]ID) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out IDMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out IDMapOutput) ApplyAssetOrArchive(applier func(v map[string]ID) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]ID) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out IDMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out IDMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]ID) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out IDMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out IDMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]ID) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out IDMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out IDMapOutput) ApplyBool(applier func(v map[string]ID) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]ID) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out IDMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out IDMapOutput) ApplyBoolArray(applier func(v map[string]ID) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out IDMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out IDMapOutput) ApplyBoolMap(applier func(v map[string]ID) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out IDMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out IDMapOutput) ApplyFloat32(applier func(v map[string]ID) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]ID) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out IDMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out IDMapOutput) ApplyFloat32Array(applier func(v map[string]ID) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out IDMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out IDMapOutput) ApplyFloat32Map(applier func(v map[string]ID) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out IDMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out IDMapOutput) ApplyFloat64(applier func(v map[string]ID) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]ID) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out IDMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out IDMapOutput) ApplyFloat64Array(applier func(v map[string]ID) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out IDMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out IDMapOutput) ApplyFloat64Map(applier func(v map[string]ID) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out IDMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out IDMapOutput) ApplyID(applier func(v map[string]ID) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]ID) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out IDMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out IDMapOutput) ApplyIDArray(applier func(v map[string]ID) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out IDMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out IDMapOutput) ApplyIDMap(applier func(v map[string]ID) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out IDMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out IDMapOutput) ApplyInt(applier func(v map[string]ID) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]ID) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out IDMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out IDMapOutput) ApplyIntArray(applier func(v map[string]ID) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out IDMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out IDMapOutput) ApplyIntMap(applier func(v map[string]ID) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out IDMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out IDMapOutput) ApplyInt16(applier func(v map[string]ID) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]ID) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out IDMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out IDMapOutput) ApplyInt16Array(applier func(v map[string]ID) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out IDMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out IDMapOutput) ApplyInt16Map(applier func(v map[string]ID) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out IDMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out IDMapOutput) ApplyInt32(applier func(v map[string]ID) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]ID) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out IDMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out IDMapOutput) ApplyInt32Array(applier func(v map[string]ID) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out IDMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out IDMapOutput) ApplyInt32Map(applier func(v map[string]ID) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out IDMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out IDMapOutput) ApplyInt64(applier func(v map[string]ID) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]ID) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out IDMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out IDMapOutput) ApplyInt64Array(applier func(v map[string]ID) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out IDMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out IDMapOutput) ApplyInt64Map(applier func(v map[string]ID) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out IDMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out IDMapOutput) ApplyInt8(applier func(v map[string]ID) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]ID) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out IDMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out IDMapOutput) ApplyInt8Array(applier func(v map[string]ID) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out IDMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out IDMapOutput) ApplyInt8Map(applier func(v map[string]ID) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out IDMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out IDMapOutput) ApplyString(applier func(v map[string]ID) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]ID) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out IDMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out IDMapOutput) ApplyStringArray(applier func(v map[string]ID) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out IDMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out IDMapOutput) ApplyStringMap(applier func(v map[string]ID) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out IDMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out IDMapOutput) ApplyURN(applier func(v map[string]ID) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]ID) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out IDMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out IDMapOutput) ApplyURNArray(applier func(v map[string]ID) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out IDMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out IDMapOutput) ApplyURNMap(applier func(v map[string]ID) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out IDMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out IDMapOutput) ApplyUint(applier func(v map[string]ID) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]ID) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out IDMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out IDMapOutput) ApplyUintArray(applier func(v map[string]ID) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out IDMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out IDMapOutput) ApplyUintMap(applier func(v map[string]ID) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out IDMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out IDMapOutput) ApplyUint16(applier func(v map[string]ID) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]ID) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out IDMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out IDMapOutput) ApplyUint16Array(applier func(v map[string]ID) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out IDMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out IDMapOutput) ApplyUint16Map(applier func(v map[string]ID) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out IDMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out IDMapOutput) ApplyUint32(applier func(v map[string]ID) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]ID) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out IDMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out IDMapOutput) ApplyUint32Array(applier func(v map[string]ID) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out IDMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out IDMapOutput) ApplyUint32Map(applier func(v map[string]ID) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out IDMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out IDMapOutput) ApplyUint64(applier func(v map[string]ID) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]ID) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out IDMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out IDMapOutput) ApplyUint64Array(applier func(v map[string]ID) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out IDMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out IDMapOutput) ApplyUint64Map(applier func(v map[string]ID) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out IDMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out IDMapOutput) ApplyUint8(applier func(v map[string]ID) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]ID) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out IDMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]ID) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out IDMapOutput) ApplyUint8Array(applier func(v map[string]ID) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]ID) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out IDMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]ID) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out IDMapOutput) ApplyUint8Map(applier func(v map[string]ID) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]ID) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out IDMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]ID) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var intType = reflect.TypeOf((*int)(nil)).Elem()

// IntInput is an input type that accepts Int and IntOutput values.
type IntInput interface {
	Input

	// nolint: unused
	isInt()
}

// Int is an input type for int values.
type Int int

// ElementType returns the element type of this Input (int).
func (Int) ElementType() reflect.Type {
	return intType
}

func (Int) isInt() {}

// IntOutput is an Output that returns int values.
type IntOutput OutputType

// ElementType returns the element type of this Output (int).
func (IntOutput) ElementType() reflect.Type {
	return intType
}

func (IntOutput) isInt() {}

// Apply applies a transformation to the int value when it is available.
func (out IntOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int value when it is available.
func (out IntOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out IntOutput) ApplyAny(applier func(v int) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v int) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out IntOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, int) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out IntOutput) ApplyAnyArray(applier func(v int) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v int) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out IntOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out IntOutput) ApplyAnyMap(applier func(v int) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out IntOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out IntOutput) ApplyArchive(applier func(v int) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v int) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out IntOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, int) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out IntOutput) ApplyArchiveArray(applier func(v int) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v int) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out IntOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out IntOutput) ApplyArchiveMap(applier func(v int) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out IntOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out IntOutput) ApplyAsset(applier func(v int) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v int) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out IntOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, int) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out IntOutput) ApplyAssetArray(applier func(v int) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v int) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out IntOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out IntOutput) ApplyAssetMap(applier func(v int) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out IntOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out IntOutput) ApplyAssetOrArchive(applier func(v int) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v int) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out IntOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, int) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out IntOutput) ApplyAssetOrArchiveArray(applier func(v int) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v int) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out IntOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out IntOutput) ApplyAssetOrArchiveMap(applier func(v int) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out IntOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out IntOutput) ApplyBool(applier func(v int) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v int) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out IntOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, int) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out IntOutput) ApplyBoolArray(applier func(v int) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v int) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out IntOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out IntOutput) ApplyBoolMap(applier func(v int) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out IntOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out IntOutput) ApplyFloat32(applier func(v int) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v int) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out IntOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, int) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out IntOutput) ApplyFloat32Array(applier func(v int) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out IntOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out IntOutput) ApplyFloat32Map(applier func(v int) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out IntOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out IntOutput) ApplyFloat64(applier func(v int) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v int) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out IntOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, int) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out IntOutput) ApplyFloat64Array(applier func(v int) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out IntOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out IntOutput) ApplyFloat64Map(applier func(v int) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out IntOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out IntOutput) ApplyID(applier func(v int) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v int) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out IntOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, int) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out IntOutput) ApplyIDArray(applier func(v int) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v int) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out IntOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out IntOutput) ApplyIDMap(applier func(v int) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out IntOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out IntOutput) ApplyInt(applier func(v int) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v int) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out IntOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, int) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out IntOutput) ApplyIntArray(applier func(v int) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v int) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out IntOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out IntOutput) ApplyIntMap(applier func(v int) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out IntOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out IntOutput) ApplyInt16(applier func(v int) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v int) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out IntOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, int) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out IntOutput) ApplyInt16Array(applier func(v int) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out IntOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out IntOutput) ApplyInt16Map(applier func(v int) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out IntOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out IntOutput) ApplyInt32(applier func(v int) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v int) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out IntOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, int) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out IntOutput) ApplyInt32Array(applier func(v int) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out IntOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out IntOutput) ApplyInt32Map(applier func(v int) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out IntOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out IntOutput) ApplyInt64(applier func(v int) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v int) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out IntOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, int) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out IntOutput) ApplyInt64Array(applier func(v int) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out IntOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out IntOutput) ApplyInt64Map(applier func(v int) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out IntOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out IntOutput) ApplyInt8(applier func(v int) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v int) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out IntOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, int) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out IntOutput) ApplyInt8Array(applier func(v int) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out IntOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out IntOutput) ApplyInt8Map(applier func(v int) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out IntOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out IntOutput) ApplyString(applier func(v int) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v int) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out IntOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, int) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out IntOutput) ApplyStringArray(applier func(v int) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v int) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out IntOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out IntOutput) ApplyStringMap(applier func(v int) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out IntOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out IntOutput) ApplyURN(applier func(v int) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v int) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out IntOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, int) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out IntOutput) ApplyURNArray(applier func(v int) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v int) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out IntOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out IntOutput) ApplyURNMap(applier func(v int) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out IntOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out IntOutput) ApplyUint(applier func(v int) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v int) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out IntOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, int) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out IntOutput) ApplyUintArray(applier func(v int) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v int) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out IntOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out IntOutput) ApplyUintMap(applier func(v int) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v int) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out IntOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out IntOutput) ApplyUint16(applier func(v int) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v int) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out IntOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, int) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out IntOutput) ApplyUint16Array(applier func(v int) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out IntOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out IntOutput) ApplyUint16Map(applier func(v int) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out IntOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out IntOutput) ApplyUint32(applier func(v int) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v int) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out IntOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, int) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out IntOutput) ApplyUint32Array(applier func(v int) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out IntOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out IntOutput) ApplyUint32Map(applier func(v int) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out IntOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out IntOutput) ApplyUint64(applier func(v int) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v int) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out IntOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, int) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out IntOutput) ApplyUint64Array(applier func(v int) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out IntOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out IntOutput) ApplyUint64Map(applier func(v int) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out IntOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out IntOutput) ApplyUint8(applier func(v int) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v int) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out IntOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, int) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out IntOutput) ApplyUint8Array(applier func(v int) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v int) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out IntOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, int) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out IntOutput) ApplyUint8Map(applier func(v int) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v int) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out IntOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, int) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var intarrayType = reflect.TypeOf((*[]int)(nil)).Elem()

// IntArrayInput is an input type that accepts IntArray and IntArrayOutput values.
type IntArrayInput interface {
	Input

	// nolint: unused
	isIntArray()
}

// IntArray is an input type for []int values.
type IntArray []int

// ElementType returns the element type of this Input ([]int).
func (IntArray) ElementType() reflect.Type {
	return intarrayType
}

func (IntArray) isIntArray() {}

// IntArrayOutput is an Output that returns []int values.
type IntArrayOutput OutputType

// ElementType returns the element type of this Output ([]int).
func (IntArrayOutput) ElementType() reflect.Type {
	return intarrayType
}

func (IntArrayOutput) isIntArray() {}

// Apply applies a transformation to the intarray value when it is available.
func (out IntArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the intarray value when it is available.
func (out IntArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out IntArrayOutput) ApplyAny(applier func(v []int) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []int) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out IntArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []int) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out IntArrayOutput) ApplyAnyArray(applier func(v []int) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out IntArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out IntArrayOutput) ApplyAnyMap(applier func(v []int) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out IntArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out IntArrayOutput) ApplyArchive(applier func(v []int) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []int) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out IntArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []int) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out IntArrayOutput) ApplyArchiveArray(applier func(v []int) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out IntArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out IntArrayOutput) ApplyArchiveMap(applier func(v []int) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out IntArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out IntArrayOutput) ApplyAsset(applier func(v []int) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []int) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out IntArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []int) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out IntArrayOutput) ApplyAssetArray(applier func(v []int) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out IntArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out IntArrayOutput) ApplyAssetMap(applier func(v []int) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out IntArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out IntArrayOutput) ApplyAssetOrArchive(applier func(v []int) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []int) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out IntArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []int) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out IntArrayOutput) ApplyAssetOrArchiveArray(applier func(v []int) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out IntArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out IntArrayOutput) ApplyAssetOrArchiveMap(applier func(v []int) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out IntArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out IntArrayOutput) ApplyBool(applier func(v []int) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []int) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out IntArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []int) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out IntArrayOutput) ApplyBoolArray(applier func(v []int) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out IntArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out IntArrayOutput) ApplyBoolMap(applier func(v []int) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out IntArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out IntArrayOutput) ApplyFloat32(applier func(v []int) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []int) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out IntArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []int) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out IntArrayOutput) ApplyFloat32Array(applier func(v []int) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out IntArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out IntArrayOutput) ApplyFloat32Map(applier func(v []int) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out IntArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out IntArrayOutput) ApplyFloat64(applier func(v []int) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []int) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out IntArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []int) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out IntArrayOutput) ApplyFloat64Array(applier func(v []int) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out IntArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out IntArrayOutput) ApplyFloat64Map(applier func(v []int) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out IntArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out IntArrayOutput) ApplyID(applier func(v []int) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []int) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out IntArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []int) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out IntArrayOutput) ApplyIDArray(applier func(v []int) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out IntArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out IntArrayOutput) ApplyIDMap(applier func(v []int) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out IntArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out IntArrayOutput) ApplyInt(applier func(v []int) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []int) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out IntArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []int) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out IntArrayOutput) ApplyIntArray(applier func(v []int) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out IntArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out IntArrayOutput) ApplyIntMap(applier func(v []int) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out IntArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out IntArrayOutput) ApplyInt16(applier func(v []int) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []int) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out IntArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []int) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out IntArrayOutput) ApplyInt16Array(applier func(v []int) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out IntArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out IntArrayOutput) ApplyInt16Map(applier func(v []int) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out IntArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out IntArrayOutput) ApplyInt32(applier func(v []int) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []int) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out IntArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []int) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out IntArrayOutput) ApplyInt32Array(applier func(v []int) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out IntArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out IntArrayOutput) ApplyInt32Map(applier func(v []int) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out IntArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out IntArrayOutput) ApplyInt64(applier func(v []int) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []int) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out IntArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []int) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out IntArrayOutput) ApplyInt64Array(applier func(v []int) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out IntArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out IntArrayOutput) ApplyInt64Map(applier func(v []int) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out IntArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out IntArrayOutput) ApplyInt8(applier func(v []int) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []int) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out IntArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []int) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out IntArrayOutput) ApplyInt8Array(applier func(v []int) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out IntArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out IntArrayOutput) ApplyInt8Map(applier func(v []int) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out IntArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out IntArrayOutput) ApplyString(applier func(v []int) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []int) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out IntArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []int) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out IntArrayOutput) ApplyStringArray(applier func(v []int) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out IntArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out IntArrayOutput) ApplyStringMap(applier func(v []int) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out IntArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out IntArrayOutput) ApplyURN(applier func(v []int) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []int) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out IntArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []int) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out IntArrayOutput) ApplyURNArray(applier func(v []int) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out IntArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out IntArrayOutput) ApplyURNMap(applier func(v []int) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out IntArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out IntArrayOutput) ApplyUint(applier func(v []int) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []int) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out IntArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []int) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out IntArrayOutput) ApplyUintArray(applier func(v []int) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out IntArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out IntArrayOutput) ApplyUintMap(applier func(v []int) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out IntArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out IntArrayOutput) ApplyUint16(applier func(v []int) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []int) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out IntArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []int) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out IntArrayOutput) ApplyUint16Array(applier func(v []int) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out IntArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out IntArrayOutput) ApplyUint16Map(applier func(v []int) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out IntArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out IntArrayOutput) ApplyUint32(applier func(v []int) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []int) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out IntArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []int) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out IntArrayOutput) ApplyUint32Array(applier func(v []int) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out IntArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out IntArrayOutput) ApplyUint32Map(applier func(v []int) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out IntArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out IntArrayOutput) ApplyUint64(applier func(v []int) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []int) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out IntArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []int) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out IntArrayOutput) ApplyUint64Array(applier func(v []int) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out IntArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out IntArrayOutput) ApplyUint64Map(applier func(v []int) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out IntArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out IntArrayOutput) ApplyUint8(applier func(v []int) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []int) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out IntArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []int) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out IntArrayOutput) ApplyUint8Array(applier func(v []int) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []int) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out IntArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []int) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out IntArrayOutput) ApplyUint8Map(applier func(v []int) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []int) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out IntArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []int) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var intmapType = reflect.TypeOf((*map[string]int)(nil)).Elem()

// IntMapInput is an input type that accepts IntMap and IntMapOutput values.
type IntMapInput interface {
	Input

	// nolint: unused
	isIntMap()
}

// IntMap is an input type for map[string]int values.
type IntMap map[string]int

// ElementType returns the element type of this Input (map[string]int).
func (IntMap) ElementType() reflect.Type {
	return intmapType
}

func (IntMap) isIntMap() {}

// IntMapOutput is an Output that returns map[string]int values.
type IntMapOutput OutputType

// ElementType returns the element type of this Output (map[string]int).
func (IntMapOutput) ElementType() reflect.Type {
	return intmapType
}

func (IntMapOutput) isIntMap() {}

// Apply applies a transformation to the intmap value when it is available.
func (out IntMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the intmap value when it is available.
func (out IntMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out IntMapOutput) ApplyAny(applier func(v map[string]int) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]int) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out IntMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]int) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out IntMapOutput) ApplyAnyArray(applier func(v map[string]int) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out IntMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out IntMapOutput) ApplyAnyMap(applier func(v map[string]int) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out IntMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out IntMapOutput) ApplyArchive(applier func(v map[string]int) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out IntMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out IntMapOutput) ApplyArchiveArray(applier func(v map[string]int) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out IntMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out IntMapOutput) ApplyArchiveMap(applier func(v map[string]int) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out IntMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out IntMapOutput) ApplyAsset(applier func(v map[string]int) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]int) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out IntMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]int) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out IntMapOutput) ApplyAssetArray(applier func(v map[string]int) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out IntMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out IntMapOutput) ApplyAssetMap(applier func(v map[string]int) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out IntMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out IntMapOutput) ApplyAssetOrArchive(applier func(v map[string]int) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out IntMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out IntMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]int) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out IntMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out IntMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]int) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out IntMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out IntMapOutput) ApplyBool(applier func(v map[string]int) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]int) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out IntMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]int) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out IntMapOutput) ApplyBoolArray(applier func(v map[string]int) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out IntMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out IntMapOutput) ApplyBoolMap(applier func(v map[string]int) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out IntMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out IntMapOutput) ApplyFloat32(applier func(v map[string]int) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]int) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out IntMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]int) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out IntMapOutput) ApplyFloat32Array(applier func(v map[string]int) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out IntMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out IntMapOutput) ApplyFloat32Map(applier func(v map[string]int) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out IntMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out IntMapOutput) ApplyFloat64(applier func(v map[string]int) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]int) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out IntMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]int) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out IntMapOutput) ApplyFloat64Array(applier func(v map[string]int) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out IntMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out IntMapOutput) ApplyFloat64Map(applier func(v map[string]int) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out IntMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out IntMapOutput) ApplyID(applier func(v map[string]int) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]int) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out IntMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]int) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out IntMapOutput) ApplyIDArray(applier func(v map[string]int) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out IntMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out IntMapOutput) ApplyIDMap(applier func(v map[string]int) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out IntMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out IntMapOutput) ApplyInt(applier func(v map[string]int) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]int) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out IntMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]int) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out IntMapOutput) ApplyIntArray(applier func(v map[string]int) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out IntMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out IntMapOutput) ApplyIntMap(applier func(v map[string]int) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out IntMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out IntMapOutput) ApplyInt16(applier func(v map[string]int) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]int) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out IntMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]int) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out IntMapOutput) ApplyInt16Array(applier func(v map[string]int) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out IntMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out IntMapOutput) ApplyInt16Map(applier func(v map[string]int) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out IntMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out IntMapOutput) ApplyInt32(applier func(v map[string]int) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]int) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out IntMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]int) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out IntMapOutput) ApplyInt32Array(applier func(v map[string]int) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out IntMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out IntMapOutput) ApplyInt32Map(applier func(v map[string]int) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out IntMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out IntMapOutput) ApplyInt64(applier func(v map[string]int) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]int) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out IntMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]int) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out IntMapOutput) ApplyInt64Array(applier func(v map[string]int) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out IntMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out IntMapOutput) ApplyInt64Map(applier func(v map[string]int) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out IntMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out IntMapOutput) ApplyInt8(applier func(v map[string]int) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]int) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out IntMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]int) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out IntMapOutput) ApplyInt8Array(applier func(v map[string]int) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out IntMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out IntMapOutput) ApplyInt8Map(applier func(v map[string]int) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out IntMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out IntMapOutput) ApplyString(applier func(v map[string]int) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]int) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out IntMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]int) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out IntMapOutput) ApplyStringArray(applier func(v map[string]int) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out IntMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out IntMapOutput) ApplyStringMap(applier func(v map[string]int) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out IntMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out IntMapOutput) ApplyURN(applier func(v map[string]int) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]int) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out IntMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]int) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out IntMapOutput) ApplyURNArray(applier func(v map[string]int) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out IntMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out IntMapOutput) ApplyURNMap(applier func(v map[string]int) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out IntMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out IntMapOutput) ApplyUint(applier func(v map[string]int) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]int) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out IntMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]int) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out IntMapOutput) ApplyUintArray(applier func(v map[string]int) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out IntMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out IntMapOutput) ApplyUintMap(applier func(v map[string]int) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out IntMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out IntMapOutput) ApplyUint16(applier func(v map[string]int) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]int) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out IntMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]int) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out IntMapOutput) ApplyUint16Array(applier func(v map[string]int) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out IntMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out IntMapOutput) ApplyUint16Map(applier func(v map[string]int) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out IntMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out IntMapOutput) ApplyUint32(applier func(v map[string]int) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]int) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out IntMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]int) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out IntMapOutput) ApplyUint32Array(applier func(v map[string]int) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out IntMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out IntMapOutput) ApplyUint32Map(applier func(v map[string]int) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out IntMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out IntMapOutput) ApplyUint64(applier func(v map[string]int) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]int) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out IntMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]int) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out IntMapOutput) ApplyUint64Array(applier func(v map[string]int) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out IntMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out IntMapOutput) ApplyUint64Map(applier func(v map[string]int) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out IntMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out IntMapOutput) ApplyUint8(applier func(v map[string]int) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]int) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out IntMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]int) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out IntMapOutput) ApplyUint8Array(applier func(v map[string]int) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out IntMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out IntMapOutput) ApplyUint8Map(applier func(v map[string]int) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]int) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out IntMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int16Type = reflect.TypeOf((*int16)(nil)).Elem()

// Int16Input is an input type that accepts Int16 and Int16Output values.
type Int16Input interface {
	Input

	// nolint: unused
	isInt16()
}

// Int16 is an input type for int16 values.
type Int16 int16

// ElementType returns the element type of this Input (int16).
func (Int16) ElementType() reflect.Type {
	return int16Type
}

func (Int16) isInt16() {}

// Int16Output is an Output that returns int16 values.
type Int16Output OutputType

// ElementType returns the element type of this Output (int16).
func (Int16Output) ElementType() reflect.Type {
	return int16Type
}

func (Int16Output) isInt16() {}

// Apply applies a transformation to the int16 value when it is available.
func (out Int16Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int16 value when it is available.
func (out Int16Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int16Output) ApplyAny(applier func(v int16) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v int16) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int16Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, int16) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int16Output) ApplyAnyArray(applier func(v int16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int16Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int16Output) ApplyAnyMap(applier func(v int16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int16Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int16Output) ApplyArchive(applier func(v int16) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v int16) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int16Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, int16) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int16Output) ApplyArchiveArray(applier func(v int16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int16Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int16Output) ApplyArchiveMap(applier func(v int16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int16Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int16Output) ApplyAsset(applier func(v int16) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v int16) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int16Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, int16) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int16Output) ApplyAssetArray(applier func(v int16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int16Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int16Output) ApplyAssetMap(applier func(v int16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int16Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int16Output) ApplyAssetOrArchive(applier func(v int16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v int16) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int16Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, int16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int16Output) ApplyAssetOrArchiveArray(applier func(v int16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int16Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int16Output) ApplyAssetOrArchiveMap(applier func(v int16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int16Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int16Output) ApplyBool(applier func(v int16) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v int16) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int16Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, int16) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int16Output) ApplyBoolArray(applier func(v int16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int16Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int16Output) ApplyBoolMap(applier func(v int16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int16Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int16Output) ApplyFloat32(applier func(v int16) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v int16) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int16Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, int16) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int16Output) ApplyFloat32Array(applier func(v int16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int16Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int16Output) ApplyFloat32Map(applier func(v int16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int16Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int16Output) ApplyFloat64(applier func(v int16) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v int16) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int16Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, int16) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int16Output) ApplyFloat64Array(applier func(v int16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int16Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int16Output) ApplyFloat64Map(applier func(v int16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int16Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int16Output) ApplyID(applier func(v int16) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v int16) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int16Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, int16) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int16Output) ApplyIDArray(applier func(v int16) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int16Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int16Output) ApplyIDMap(applier func(v int16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int16Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int16Output) ApplyInt(applier func(v int16) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v int16) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int16Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, int16) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int16Output) ApplyIntArray(applier func(v int16) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int16Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int16Output) ApplyIntMap(applier func(v int16) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int16Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int16Output) ApplyInt16(applier func(v int16) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v int16) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int16Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, int16) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int16Output) ApplyInt16Array(applier func(v int16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int16Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int16Output) ApplyInt16Map(applier func(v int16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int16Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int16Output) ApplyInt32(applier func(v int16) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v int16) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int16Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, int16) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int16Output) ApplyInt32Array(applier func(v int16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int16Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int16Output) ApplyInt32Map(applier func(v int16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int16Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int16Output) ApplyInt64(applier func(v int16) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v int16) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int16Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, int16) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int16Output) ApplyInt64Array(applier func(v int16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int16Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int16Output) ApplyInt64Map(applier func(v int16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int16Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int16Output) ApplyInt8(applier func(v int16) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v int16) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int16Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, int16) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int16Output) ApplyInt8Array(applier func(v int16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int16Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int16Output) ApplyInt8Map(applier func(v int16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int16Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int16Output) ApplyString(applier func(v int16) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v int16) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int16Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, int16) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int16Output) ApplyStringArray(applier func(v int16) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int16Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int16Output) ApplyStringMap(applier func(v int16) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int16Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int16Output) ApplyURN(applier func(v int16) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v int16) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int16Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, int16) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int16Output) ApplyURNArray(applier func(v int16) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int16Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int16Output) ApplyURNMap(applier func(v int16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int16Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int16Output) ApplyUint(applier func(v int16) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v int16) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int16Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, int16) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int16Output) ApplyUintArray(applier func(v int16) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int16Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int16Output) ApplyUintMap(applier func(v int16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int16Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int16Output) ApplyUint16(applier func(v int16) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v int16) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int16Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, int16) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int16Output) ApplyUint16Array(applier func(v int16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int16Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int16Output) ApplyUint16Map(applier func(v int16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int16Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int16Output) ApplyUint32(applier func(v int16) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v int16) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int16Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, int16) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int16Output) ApplyUint32Array(applier func(v int16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int16Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int16Output) ApplyUint32Map(applier func(v int16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int16Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int16Output) ApplyUint64(applier func(v int16) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v int16) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int16Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, int16) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int16Output) ApplyUint64Array(applier func(v int16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int16Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int16Output) ApplyUint64Map(applier func(v int16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int16Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int16Output) ApplyUint8(applier func(v int16) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v int16) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int16Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, int16) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int16Output) ApplyUint8Array(applier func(v int16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v int16) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int16Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, int16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int16Output) ApplyUint8Map(applier func(v int16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v int16) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int16Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, int16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int16arrayType = reflect.TypeOf((*[]int16)(nil)).Elem()

// Int16ArrayInput is an input type that accepts Int16Array and Int16ArrayOutput values.
type Int16ArrayInput interface {
	Input

	// nolint: unused
	isInt16Array()
}

// Int16Array is an input type for []int16 values.
type Int16Array []int16

// ElementType returns the element type of this Input ([]int16).
func (Int16Array) ElementType() reflect.Type {
	return int16arrayType
}

func (Int16Array) isInt16Array() {}

// Int16ArrayOutput is an Output that returns []int16 values.
type Int16ArrayOutput OutputType

// ElementType returns the element type of this Output ([]int16).
func (Int16ArrayOutput) ElementType() reflect.Type {
	return int16arrayType
}

func (Int16ArrayOutput) isInt16Array() {}

// Apply applies a transformation to the int16array value when it is available.
func (out Int16ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int16array value when it is available.
func (out Int16ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int16ArrayOutput) ApplyAny(applier func(v []int16) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []int16) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int16ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []int16) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int16ArrayOutput) ApplyAnyArray(applier func(v []int16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int16ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int16ArrayOutput) ApplyAnyMap(applier func(v []int16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int16ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int16ArrayOutput) ApplyArchive(applier func(v []int16) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []int16) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int16ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []int16) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int16ArrayOutput) ApplyArchiveArray(applier func(v []int16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int16ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int16ArrayOutput) ApplyArchiveMap(applier func(v []int16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int16ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int16ArrayOutput) ApplyAsset(applier func(v []int16) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []int16) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int16ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []int16) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int16ArrayOutput) ApplyAssetArray(applier func(v []int16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int16ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int16ArrayOutput) ApplyAssetMap(applier func(v []int16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int16ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int16ArrayOutput) ApplyAssetOrArchive(applier func(v []int16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []int16) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int16ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []int16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int16ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []int16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int16ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int16ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []int16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int16ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int16ArrayOutput) ApplyBool(applier func(v []int16) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []int16) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int16ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []int16) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int16ArrayOutput) ApplyBoolArray(applier func(v []int16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int16ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int16ArrayOutput) ApplyBoolMap(applier func(v []int16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int16ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int16ArrayOutput) ApplyFloat32(applier func(v []int16) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []int16) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int16ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []int16) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int16ArrayOutput) ApplyFloat32Array(applier func(v []int16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int16ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int16ArrayOutput) ApplyFloat32Map(applier func(v []int16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int16ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int16ArrayOutput) ApplyFloat64(applier func(v []int16) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []int16) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int16ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []int16) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int16ArrayOutput) ApplyFloat64Array(applier func(v []int16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int16ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int16ArrayOutput) ApplyFloat64Map(applier func(v []int16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int16ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int16ArrayOutput) ApplyID(applier func(v []int16) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []int16) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int16ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []int16) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int16ArrayOutput) ApplyIDArray(applier func(v []int16) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int16ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int16ArrayOutput) ApplyIDMap(applier func(v []int16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int16ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int16ArrayOutput) ApplyInt(applier func(v []int16) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []int16) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int16ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []int16) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int16ArrayOutput) ApplyIntArray(applier func(v []int16) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int16ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int16ArrayOutput) ApplyIntMap(applier func(v []int16) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int16ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int16ArrayOutput) ApplyInt16(applier func(v []int16) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []int16) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int16ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []int16) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int16ArrayOutput) ApplyInt16Array(applier func(v []int16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int16ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int16ArrayOutput) ApplyInt16Map(applier func(v []int16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int16ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int16ArrayOutput) ApplyInt32(applier func(v []int16) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []int16) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int16ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []int16) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int16ArrayOutput) ApplyInt32Array(applier func(v []int16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int16ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int16ArrayOutput) ApplyInt32Map(applier func(v []int16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int16ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int16ArrayOutput) ApplyInt64(applier func(v []int16) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []int16) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int16ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []int16) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int16ArrayOutput) ApplyInt64Array(applier func(v []int16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int16ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int16ArrayOutput) ApplyInt64Map(applier func(v []int16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int16ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int16ArrayOutput) ApplyInt8(applier func(v []int16) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []int16) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int16ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []int16) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int16ArrayOutput) ApplyInt8Array(applier func(v []int16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int16ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int16ArrayOutput) ApplyInt8Map(applier func(v []int16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int16ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int16ArrayOutput) ApplyString(applier func(v []int16) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []int16) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int16ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []int16) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int16ArrayOutput) ApplyStringArray(applier func(v []int16) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int16ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int16ArrayOutput) ApplyStringMap(applier func(v []int16) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int16ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int16ArrayOutput) ApplyURN(applier func(v []int16) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []int16) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int16ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []int16) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int16ArrayOutput) ApplyURNArray(applier func(v []int16) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int16ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int16ArrayOutput) ApplyURNMap(applier func(v []int16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int16ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int16ArrayOutput) ApplyUint(applier func(v []int16) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []int16) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int16ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []int16) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int16ArrayOutput) ApplyUintArray(applier func(v []int16) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int16ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int16ArrayOutput) ApplyUintMap(applier func(v []int16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int16ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int16ArrayOutput) ApplyUint16(applier func(v []int16) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []int16) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int16ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []int16) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int16ArrayOutput) ApplyUint16Array(applier func(v []int16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int16ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int16ArrayOutput) ApplyUint16Map(applier func(v []int16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int16ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int16ArrayOutput) ApplyUint32(applier func(v []int16) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []int16) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int16ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []int16) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int16ArrayOutput) ApplyUint32Array(applier func(v []int16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int16ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int16ArrayOutput) ApplyUint32Map(applier func(v []int16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int16ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int16ArrayOutput) ApplyUint64(applier func(v []int16) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []int16) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int16ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []int16) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int16ArrayOutput) ApplyUint64Array(applier func(v []int16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int16ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int16ArrayOutput) ApplyUint64Map(applier func(v []int16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int16ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int16ArrayOutput) ApplyUint8(applier func(v []int16) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []int16) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int16ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []int16) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int16ArrayOutput) ApplyUint8Array(applier func(v []int16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []int16) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int16ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []int16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int16ArrayOutput) ApplyUint8Map(applier func(v []int16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []int16) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int16ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []int16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int16mapType = reflect.TypeOf((*map[string]int16)(nil)).Elem()

// Int16MapInput is an input type that accepts Int16Map and Int16MapOutput values.
type Int16MapInput interface {
	Input

	// nolint: unused
	isInt16Map()
}

// Int16Map is an input type for map[string]int16 values.
type Int16Map map[string]int16

// ElementType returns the element type of this Input (map[string]int16).
func (Int16Map) ElementType() reflect.Type {
	return int16mapType
}

func (Int16Map) isInt16Map() {}

// Int16MapOutput is an Output that returns map[string]int16 values.
type Int16MapOutput OutputType

// ElementType returns the element type of this Output (map[string]int16).
func (Int16MapOutput) ElementType() reflect.Type {
	return int16mapType
}

func (Int16MapOutput) isInt16Map() {}

// Apply applies a transformation to the int16map value when it is available.
func (out Int16MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int16map value when it is available.
func (out Int16MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int16MapOutput) ApplyAny(applier func(v map[string]int16) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]int16) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int16MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int16MapOutput) ApplyAnyArray(applier func(v map[string]int16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int16MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int16MapOutput) ApplyAnyMap(applier func(v map[string]int16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int16MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int16MapOutput) ApplyArchive(applier func(v map[string]int16) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int16) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int16MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int16MapOutput) ApplyArchiveArray(applier func(v map[string]int16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int16MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int16MapOutput) ApplyArchiveMap(applier func(v map[string]int16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int16MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int16MapOutput) ApplyAsset(applier func(v map[string]int16) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]int16) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int16MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int16MapOutput) ApplyAssetArray(applier func(v map[string]int16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int16MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int16MapOutput) ApplyAssetMap(applier func(v map[string]int16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int16MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int16MapOutput) ApplyAssetOrArchive(applier func(v map[string]int16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int16) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int16MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int16MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]int16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int16MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int16MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]int16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int16MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int16MapOutput) ApplyBool(applier func(v map[string]int16) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]int16) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int16MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int16MapOutput) ApplyBoolArray(applier func(v map[string]int16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int16MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int16MapOutput) ApplyBoolMap(applier func(v map[string]int16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int16MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int16MapOutput) ApplyFloat32(applier func(v map[string]int16) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]int16) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int16MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int16MapOutput) ApplyFloat32Array(applier func(v map[string]int16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int16MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int16MapOutput) ApplyFloat32Map(applier func(v map[string]int16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int16MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int16MapOutput) ApplyFloat64(applier func(v map[string]int16) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]int16) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int16MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int16MapOutput) ApplyFloat64Array(applier func(v map[string]int16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int16MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int16MapOutput) ApplyFloat64Map(applier func(v map[string]int16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int16MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int16MapOutput) ApplyID(applier func(v map[string]int16) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]int16) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int16MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int16MapOutput) ApplyIDArray(applier func(v map[string]int16) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int16MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int16MapOutput) ApplyIDMap(applier func(v map[string]int16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int16MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int16MapOutput) ApplyInt(applier func(v map[string]int16) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]int16) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int16MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int16MapOutput) ApplyIntArray(applier func(v map[string]int16) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int16MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int16MapOutput) ApplyIntMap(applier func(v map[string]int16) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int16MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int16MapOutput) ApplyInt16(applier func(v map[string]int16) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]int16) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int16MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int16MapOutput) ApplyInt16Array(applier func(v map[string]int16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int16MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int16MapOutput) ApplyInt16Map(applier func(v map[string]int16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int16MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int16MapOutput) ApplyInt32(applier func(v map[string]int16) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]int16) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int16MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int16MapOutput) ApplyInt32Array(applier func(v map[string]int16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int16MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int16MapOutput) ApplyInt32Map(applier func(v map[string]int16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int16MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int16MapOutput) ApplyInt64(applier func(v map[string]int16) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]int16) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int16MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int16MapOutput) ApplyInt64Array(applier func(v map[string]int16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int16MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int16MapOutput) ApplyInt64Map(applier func(v map[string]int16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int16MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int16MapOutput) ApplyInt8(applier func(v map[string]int16) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]int16) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int16MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int16MapOutput) ApplyInt8Array(applier func(v map[string]int16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int16MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int16MapOutput) ApplyInt8Map(applier func(v map[string]int16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int16MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int16MapOutput) ApplyString(applier func(v map[string]int16) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]int16) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int16MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int16MapOutput) ApplyStringArray(applier func(v map[string]int16) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int16MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int16MapOutput) ApplyStringMap(applier func(v map[string]int16) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int16MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int16MapOutput) ApplyURN(applier func(v map[string]int16) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]int16) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int16MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int16MapOutput) ApplyURNArray(applier func(v map[string]int16) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int16MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int16MapOutput) ApplyURNMap(applier func(v map[string]int16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int16MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int16MapOutput) ApplyUint(applier func(v map[string]int16) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]int16) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int16MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int16MapOutput) ApplyUintArray(applier func(v map[string]int16) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int16MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int16MapOutput) ApplyUintMap(applier func(v map[string]int16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int16MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int16MapOutput) ApplyUint16(applier func(v map[string]int16) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]int16) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int16MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int16MapOutput) ApplyUint16Array(applier func(v map[string]int16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int16MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int16MapOutput) ApplyUint16Map(applier func(v map[string]int16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int16MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int16MapOutput) ApplyUint32(applier func(v map[string]int16) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]int16) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int16MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int16MapOutput) ApplyUint32Array(applier func(v map[string]int16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int16MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int16MapOutput) ApplyUint32Map(applier func(v map[string]int16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int16MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int16MapOutput) ApplyUint64(applier func(v map[string]int16) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]int16) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int16MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int16MapOutput) ApplyUint64Array(applier func(v map[string]int16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int16MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int16MapOutput) ApplyUint64Map(applier func(v map[string]int16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int16MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int16MapOutput) ApplyUint8(applier func(v map[string]int16) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]int16) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int16MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]int16) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int16MapOutput) ApplyUint8Array(applier func(v map[string]int16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int16) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int16MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int16MapOutput) ApplyUint8Map(applier func(v map[string]int16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]int16) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int16MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int32Type = reflect.TypeOf((*int32)(nil)).Elem()

// Int32Input is an input type that accepts Int32 and Int32Output values.
type Int32Input interface {
	Input

	// nolint: unused
	isInt32()
}

// Int32 is an input type for int32 values.
type Int32 int32

// ElementType returns the element type of this Input (int32).
func (Int32) ElementType() reflect.Type {
	return int32Type
}

func (Int32) isInt32() {}

// Int32Output is an Output that returns int32 values.
type Int32Output OutputType

// ElementType returns the element type of this Output (int32).
func (Int32Output) ElementType() reflect.Type {
	return int32Type
}

func (Int32Output) isInt32() {}

// Apply applies a transformation to the int32 value when it is available.
func (out Int32Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int32 value when it is available.
func (out Int32Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int32Output) ApplyAny(applier func(v int32) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v int32) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int32Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, int32) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int32Output) ApplyAnyArray(applier func(v int32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int32Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int32Output) ApplyAnyMap(applier func(v int32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int32Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int32Output) ApplyArchive(applier func(v int32) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v int32) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int32Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, int32) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int32Output) ApplyArchiveArray(applier func(v int32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int32Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int32Output) ApplyArchiveMap(applier func(v int32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int32Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int32Output) ApplyAsset(applier func(v int32) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v int32) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int32Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, int32) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int32Output) ApplyAssetArray(applier func(v int32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int32Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int32Output) ApplyAssetMap(applier func(v int32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int32Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int32Output) ApplyAssetOrArchive(applier func(v int32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v int32) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int32Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, int32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int32Output) ApplyAssetOrArchiveArray(applier func(v int32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int32Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int32Output) ApplyAssetOrArchiveMap(applier func(v int32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int32Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int32Output) ApplyBool(applier func(v int32) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v int32) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int32Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, int32) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int32Output) ApplyBoolArray(applier func(v int32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int32Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int32Output) ApplyBoolMap(applier func(v int32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int32Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int32Output) ApplyFloat32(applier func(v int32) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v int32) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int32Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, int32) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int32Output) ApplyFloat32Array(applier func(v int32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int32Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int32Output) ApplyFloat32Map(applier func(v int32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int32Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int32Output) ApplyFloat64(applier func(v int32) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v int32) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int32Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, int32) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int32Output) ApplyFloat64Array(applier func(v int32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int32Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int32Output) ApplyFloat64Map(applier func(v int32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int32Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int32Output) ApplyID(applier func(v int32) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v int32) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int32Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, int32) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int32Output) ApplyIDArray(applier func(v int32) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int32Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int32Output) ApplyIDMap(applier func(v int32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int32Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int32Output) ApplyInt(applier func(v int32) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v int32) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int32Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, int32) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int32Output) ApplyIntArray(applier func(v int32) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int32Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int32Output) ApplyIntMap(applier func(v int32) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int32Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int32Output) ApplyInt16(applier func(v int32) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v int32) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int32Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, int32) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int32Output) ApplyInt16Array(applier func(v int32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int32Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int32Output) ApplyInt16Map(applier func(v int32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int32Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int32Output) ApplyInt32(applier func(v int32) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v int32) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int32Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, int32) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int32Output) ApplyInt32Array(applier func(v int32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int32Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int32Output) ApplyInt32Map(applier func(v int32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int32Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int32Output) ApplyInt64(applier func(v int32) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v int32) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int32Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, int32) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int32Output) ApplyInt64Array(applier func(v int32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int32Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int32Output) ApplyInt64Map(applier func(v int32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int32Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int32Output) ApplyInt8(applier func(v int32) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v int32) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int32Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, int32) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int32Output) ApplyInt8Array(applier func(v int32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int32Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int32Output) ApplyInt8Map(applier func(v int32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int32Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int32Output) ApplyString(applier func(v int32) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v int32) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int32Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, int32) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int32Output) ApplyStringArray(applier func(v int32) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int32Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int32Output) ApplyStringMap(applier func(v int32) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int32Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int32Output) ApplyURN(applier func(v int32) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v int32) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int32Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, int32) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int32Output) ApplyURNArray(applier func(v int32) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int32Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int32Output) ApplyURNMap(applier func(v int32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int32Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int32Output) ApplyUint(applier func(v int32) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v int32) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int32Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, int32) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int32Output) ApplyUintArray(applier func(v int32) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int32Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int32Output) ApplyUintMap(applier func(v int32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int32Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int32Output) ApplyUint16(applier func(v int32) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v int32) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int32Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, int32) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int32Output) ApplyUint16Array(applier func(v int32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int32Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int32Output) ApplyUint16Map(applier func(v int32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int32Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int32Output) ApplyUint32(applier func(v int32) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v int32) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int32Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, int32) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int32Output) ApplyUint32Array(applier func(v int32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int32Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int32Output) ApplyUint32Map(applier func(v int32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int32Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int32Output) ApplyUint64(applier func(v int32) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v int32) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int32Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, int32) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int32Output) ApplyUint64Array(applier func(v int32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int32Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int32Output) ApplyUint64Map(applier func(v int32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int32Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int32Output) ApplyUint8(applier func(v int32) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v int32) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int32Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, int32) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int32Output) ApplyUint8Array(applier func(v int32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v int32) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int32Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, int32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int32Output) ApplyUint8Map(applier func(v int32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v int32) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int32Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, int32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int32arrayType = reflect.TypeOf((*[]int32)(nil)).Elem()

// Int32ArrayInput is an input type that accepts Int32Array and Int32ArrayOutput values.
type Int32ArrayInput interface {
	Input

	// nolint: unused
	isInt32Array()
}

// Int32Array is an input type for []int32 values.
type Int32Array []int32

// ElementType returns the element type of this Input ([]int32).
func (Int32Array) ElementType() reflect.Type {
	return int32arrayType
}

func (Int32Array) isInt32Array() {}

// Int32ArrayOutput is an Output that returns []int32 values.
type Int32ArrayOutput OutputType

// ElementType returns the element type of this Output ([]int32).
func (Int32ArrayOutput) ElementType() reflect.Type {
	return int32arrayType
}

func (Int32ArrayOutput) isInt32Array() {}

// Apply applies a transformation to the int32array value when it is available.
func (out Int32ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int32array value when it is available.
func (out Int32ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int32ArrayOutput) ApplyAny(applier func(v []int32) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []int32) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int32ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []int32) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int32ArrayOutput) ApplyAnyArray(applier func(v []int32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int32ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int32ArrayOutput) ApplyAnyMap(applier func(v []int32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int32ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int32ArrayOutput) ApplyArchive(applier func(v []int32) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []int32) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int32ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []int32) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int32ArrayOutput) ApplyArchiveArray(applier func(v []int32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int32ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int32ArrayOutput) ApplyArchiveMap(applier func(v []int32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int32ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int32ArrayOutput) ApplyAsset(applier func(v []int32) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []int32) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int32ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []int32) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int32ArrayOutput) ApplyAssetArray(applier func(v []int32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int32ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int32ArrayOutput) ApplyAssetMap(applier func(v []int32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int32ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int32ArrayOutput) ApplyAssetOrArchive(applier func(v []int32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []int32) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int32ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []int32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int32ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []int32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int32ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int32ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []int32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int32ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int32ArrayOutput) ApplyBool(applier func(v []int32) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []int32) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int32ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []int32) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int32ArrayOutput) ApplyBoolArray(applier func(v []int32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int32ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int32ArrayOutput) ApplyBoolMap(applier func(v []int32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int32ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int32ArrayOutput) ApplyFloat32(applier func(v []int32) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []int32) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int32ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []int32) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int32ArrayOutput) ApplyFloat32Array(applier func(v []int32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int32ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int32ArrayOutput) ApplyFloat32Map(applier func(v []int32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int32ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int32ArrayOutput) ApplyFloat64(applier func(v []int32) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []int32) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int32ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []int32) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int32ArrayOutput) ApplyFloat64Array(applier func(v []int32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int32ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int32ArrayOutput) ApplyFloat64Map(applier func(v []int32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int32ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int32ArrayOutput) ApplyID(applier func(v []int32) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []int32) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int32ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []int32) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int32ArrayOutput) ApplyIDArray(applier func(v []int32) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int32ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int32ArrayOutput) ApplyIDMap(applier func(v []int32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int32ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int32ArrayOutput) ApplyInt(applier func(v []int32) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []int32) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int32ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []int32) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int32ArrayOutput) ApplyIntArray(applier func(v []int32) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int32ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int32ArrayOutput) ApplyIntMap(applier func(v []int32) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int32ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int32ArrayOutput) ApplyInt16(applier func(v []int32) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []int32) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int32ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []int32) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int32ArrayOutput) ApplyInt16Array(applier func(v []int32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int32ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int32ArrayOutput) ApplyInt16Map(applier func(v []int32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int32ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int32ArrayOutput) ApplyInt32(applier func(v []int32) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []int32) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int32ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []int32) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int32ArrayOutput) ApplyInt32Array(applier func(v []int32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int32ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int32ArrayOutput) ApplyInt32Map(applier func(v []int32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int32ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int32ArrayOutput) ApplyInt64(applier func(v []int32) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []int32) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int32ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []int32) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int32ArrayOutput) ApplyInt64Array(applier func(v []int32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int32ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int32ArrayOutput) ApplyInt64Map(applier func(v []int32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int32ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int32ArrayOutput) ApplyInt8(applier func(v []int32) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []int32) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int32ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []int32) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int32ArrayOutput) ApplyInt8Array(applier func(v []int32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int32ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int32ArrayOutput) ApplyInt8Map(applier func(v []int32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int32ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int32ArrayOutput) ApplyString(applier func(v []int32) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []int32) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int32ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []int32) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int32ArrayOutput) ApplyStringArray(applier func(v []int32) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int32ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int32ArrayOutput) ApplyStringMap(applier func(v []int32) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int32ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int32ArrayOutput) ApplyURN(applier func(v []int32) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []int32) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int32ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []int32) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int32ArrayOutput) ApplyURNArray(applier func(v []int32) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int32ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int32ArrayOutput) ApplyURNMap(applier func(v []int32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int32ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int32ArrayOutput) ApplyUint(applier func(v []int32) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []int32) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int32ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []int32) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int32ArrayOutput) ApplyUintArray(applier func(v []int32) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int32ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int32ArrayOutput) ApplyUintMap(applier func(v []int32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int32ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int32ArrayOutput) ApplyUint16(applier func(v []int32) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []int32) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int32ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []int32) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int32ArrayOutput) ApplyUint16Array(applier func(v []int32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int32ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int32ArrayOutput) ApplyUint16Map(applier func(v []int32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int32ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int32ArrayOutput) ApplyUint32(applier func(v []int32) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []int32) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int32ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []int32) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int32ArrayOutput) ApplyUint32Array(applier func(v []int32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int32ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int32ArrayOutput) ApplyUint32Map(applier func(v []int32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int32ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int32ArrayOutput) ApplyUint64(applier func(v []int32) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []int32) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int32ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []int32) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int32ArrayOutput) ApplyUint64Array(applier func(v []int32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int32ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int32ArrayOutput) ApplyUint64Map(applier func(v []int32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int32ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int32ArrayOutput) ApplyUint8(applier func(v []int32) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []int32) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int32ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []int32) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int32ArrayOutput) ApplyUint8Array(applier func(v []int32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []int32) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int32ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []int32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int32ArrayOutput) ApplyUint8Map(applier func(v []int32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []int32) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int32ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []int32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int32mapType = reflect.TypeOf((*map[string]int32)(nil)).Elem()

// Int32MapInput is an input type that accepts Int32Map and Int32MapOutput values.
type Int32MapInput interface {
	Input

	// nolint: unused
	isInt32Map()
}

// Int32Map is an input type for map[string]int32 values.
type Int32Map map[string]int32

// ElementType returns the element type of this Input (map[string]int32).
func (Int32Map) ElementType() reflect.Type {
	return int32mapType
}

func (Int32Map) isInt32Map() {}

// Int32MapOutput is an Output that returns map[string]int32 values.
type Int32MapOutput OutputType

// ElementType returns the element type of this Output (map[string]int32).
func (Int32MapOutput) ElementType() reflect.Type {
	return int32mapType
}

func (Int32MapOutput) isInt32Map() {}

// Apply applies a transformation to the int32map value when it is available.
func (out Int32MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int32map value when it is available.
func (out Int32MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int32MapOutput) ApplyAny(applier func(v map[string]int32) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]int32) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int32MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int32MapOutput) ApplyAnyArray(applier func(v map[string]int32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int32MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int32MapOutput) ApplyAnyMap(applier func(v map[string]int32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int32MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int32MapOutput) ApplyArchive(applier func(v map[string]int32) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int32) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int32MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int32MapOutput) ApplyArchiveArray(applier func(v map[string]int32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int32MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int32MapOutput) ApplyArchiveMap(applier func(v map[string]int32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int32MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int32MapOutput) ApplyAsset(applier func(v map[string]int32) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]int32) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int32MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int32MapOutput) ApplyAssetArray(applier func(v map[string]int32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int32MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int32MapOutput) ApplyAssetMap(applier func(v map[string]int32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int32MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int32MapOutput) ApplyAssetOrArchive(applier func(v map[string]int32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int32) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int32MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int32MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]int32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int32MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int32MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]int32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int32MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int32MapOutput) ApplyBool(applier func(v map[string]int32) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]int32) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int32MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int32MapOutput) ApplyBoolArray(applier func(v map[string]int32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int32MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int32MapOutput) ApplyBoolMap(applier func(v map[string]int32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int32MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int32MapOutput) ApplyFloat32(applier func(v map[string]int32) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]int32) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int32MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int32MapOutput) ApplyFloat32Array(applier func(v map[string]int32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int32MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int32MapOutput) ApplyFloat32Map(applier func(v map[string]int32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int32MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int32MapOutput) ApplyFloat64(applier func(v map[string]int32) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]int32) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int32MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int32MapOutput) ApplyFloat64Array(applier func(v map[string]int32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int32MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int32MapOutput) ApplyFloat64Map(applier func(v map[string]int32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int32MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int32MapOutput) ApplyID(applier func(v map[string]int32) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]int32) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int32MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int32MapOutput) ApplyIDArray(applier func(v map[string]int32) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int32MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int32MapOutput) ApplyIDMap(applier func(v map[string]int32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int32MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int32MapOutput) ApplyInt(applier func(v map[string]int32) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]int32) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int32MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int32MapOutput) ApplyIntArray(applier func(v map[string]int32) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int32MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int32MapOutput) ApplyIntMap(applier func(v map[string]int32) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int32MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int32MapOutput) ApplyInt16(applier func(v map[string]int32) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]int32) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int32MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int32MapOutput) ApplyInt16Array(applier func(v map[string]int32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int32MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int32MapOutput) ApplyInt16Map(applier func(v map[string]int32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int32MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int32MapOutput) ApplyInt32(applier func(v map[string]int32) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]int32) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int32MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int32MapOutput) ApplyInt32Array(applier func(v map[string]int32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int32MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int32MapOutput) ApplyInt32Map(applier func(v map[string]int32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int32MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int32MapOutput) ApplyInt64(applier func(v map[string]int32) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]int32) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int32MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int32MapOutput) ApplyInt64Array(applier func(v map[string]int32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int32MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int32MapOutput) ApplyInt64Map(applier func(v map[string]int32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int32MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int32MapOutput) ApplyInt8(applier func(v map[string]int32) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]int32) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int32MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int32MapOutput) ApplyInt8Array(applier func(v map[string]int32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int32MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int32MapOutput) ApplyInt8Map(applier func(v map[string]int32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int32MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int32MapOutput) ApplyString(applier func(v map[string]int32) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]int32) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int32MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int32MapOutput) ApplyStringArray(applier func(v map[string]int32) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int32MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int32MapOutput) ApplyStringMap(applier func(v map[string]int32) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int32MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int32MapOutput) ApplyURN(applier func(v map[string]int32) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]int32) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int32MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int32MapOutput) ApplyURNArray(applier func(v map[string]int32) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int32MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int32MapOutput) ApplyURNMap(applier func(v map[string]int32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int32MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int32MapOutput) ApplyUint(applier func(v map[string]int32) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]int32) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int32MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int32MapOutput) ApplyUintArray(applier func(v map[string]int32) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int32MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int32MapOutput) ApplyUintMap(applier func(v map[string]int32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int32MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int32MapOutput) ApplyUint16(applier func(v map[string]int32) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]int32) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int32MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int32MapOutput) ApplyUint16Array(applier func(v map[string]int32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int32MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int32MapOutput) ApplyUint16Map(applier func(v map[string]int32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int32MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int32MapOutput) ApplyUint32(applier func(v map[string]int32) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]int32) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int32MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int32MapOutput) ApplyUint32Array(applier func(v map[string]int32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int32MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int32MapOutput) ApplyUint32Map(applier func(v map[string]int32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int32MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int32MapOutput) ApplyUint64(applier func(v map[string]int32) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]int32) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int32MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int32MapOutput) ApplyUint64Array(applier func(v map[string]int32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int32MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int32MapOutput) ApplyUint64Map(applier func(v map[string]int32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int32MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int32MapOutput) ApplyUint8(applier func(v map[string]int32) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]int32) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int32MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]int32) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int32MapOutput) ApplyUint8Array(applier func(v map[string]int32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int32) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int32MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int32MapOutput) ApplyUint8Map(applier func(v map[string]int32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]int32) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int32MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int64Type = reflect.TypeOf((*int64)(nil)).Elem()

// Int64Input is an input type that accepts Int64 and Int64Output values.
type Int64Input interface {
	Input

	// nolint: unused
	isInt64()
}

// Int64 is an input type for int64 values.
type Int64 int64

// ElementType returns the element type of this Input (int64).
func (Int64) ElementType() reflect.Type {
	return int64Type
}

func (Int64) isInt64() {}

// Int64Output is an Output that returns int64 values.
type Int64Output OutputType

// ElementType returns the element type of this Output (int64).
func (Int64Output) ElementType() reflect.Type {
	return int64Type
}

func (Int64Output) isInt64() {}

// Apply applies a transformation to the int64 value when it is available.
func (out Int64Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int64 value when it is available.
func (out Int64Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int64Output) ApplyAny(applier func(v int64) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v int64) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int64Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, int64) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int64Output) ApplyAnyArray(applier func(v int64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int64Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int64Output) ApplyAnyMap(applier func(v int64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int64Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int64Output) ApplyArchive(applier func(v int64) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v int64) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int64Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, int64) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int64Output) ApplyArchiveArray(applier func(v int64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int64Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int64Output) ApplyArchiveMap(applier func(v int64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int64Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int64Output) ApplyAsset(applier func(v int64) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v int64) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int64Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, int64) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int64Output) ApplyAssetArray(applier func(v int64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int64Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int64Output) ApplyAssetMap(applier func(v int64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int64Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int64Output) ApplyAssetOrArchive(applier func(v int64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v int64) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int64Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, int64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int64Output) ApplyAssetOrArchiveArray(applier func(v int64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int64Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int64Output) ApplyAssetOrArchiveMap(applier func(v int64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int64Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int64Output) ApplyBool(applier func(v int64) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v int64) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int64Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, int64) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int64Output) ApplyBoolArray(applier func(v int64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int64Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int64Output) ApplyBoolMap(applier func(v int64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int64Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int64Output) ApplyFloat32(applier func(v int64) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v int64) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int64Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, int64) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int64Output) ApplyFloat32Array(applier func(v int64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int64Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int64Output) ApplyFloat32Map(applier func(v int64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int64Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int64Output) ApplyFloat64(applier func(v int64) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v int64) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int64Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, int64) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int64Output) ApplyFloat64Array(applier func(v int64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int64Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int64Output) ApplyFloat64Map(applier func(v int64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int64Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int64Output) ApplyID(applier func(v int64) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v int64) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int64Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, int64) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int64Output) ApplyIDArray(applier func(v int64) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int64Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int64Output) ApplyIDMap(applier func(v int64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int64Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int64Output) ApplyInt(applier func(v int64) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v int64) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int64Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, int64) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int64Output) ApplyIntArray(applier func(v int64) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int64Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int64Output) ApplyIntMap(applier func(v int64) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int64Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int64Output) ApplyInt16(applier func(v int64) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v int64) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int64Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, int64) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int64Output) ApplyInt16Array(applier func(v int64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int64Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int64Output) ApplyInt16Map(applier func(v int64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int64Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int64Output) ApplyInt32(applier func(v int64) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v int64) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int64Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, int64) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int64Output) ApplyInt32Array(applier func(v int64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int64Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int64Output) ApplyInt32Map(applier func(v int64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int64Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int64Output) ApplyInt64(applier func(v int64) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v int64) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int64Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, int64) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int64Output) ApplyInt64Array(applier func(v int64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int64Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int64Output) ApplyInt64Map(applier func(v int64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int64Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int64Output) ApplyInt8(applier func(v int64) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v int64) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int64Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, int64) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int64Output) ApplyInt8Array(applier func(v int64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int64Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int64Output) ApplyInt8Map(applier func(v int64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int64Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int64Output) ApplyString(applier func(v int64) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v int64) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int64Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, int64) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int64Output) ApplyStringArray(applier func(v int64) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int64Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int64Output) ApplyStringMap(applier func(v int64) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int64Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int64Output) ApplyURN(applier func(v int64) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v int64) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int64Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, int64) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int64Output) ApplyURNArray(applier func(v int64) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int64Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int64Output) ApplyURNMap(applier func(v int64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int64Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int64Output) ApplyUint(applier func(v int64) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v int64) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int64Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, int64) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int64Output) ApplyUintArray(applier func(v int64) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int64Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int64Output) ApplyUintMap(applier func(v int64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int64Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int64Output) ApplyUint16(applier func(v int64) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v int64) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int64Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, int64) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int64Output) ApplyUint16Array(applier func(v int64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int64Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int64Output) ApplyUint16Map(applier func(v int64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int64Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int64Output) ApplyUint32(applier func(v int64) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v int64) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int64Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, int64) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int64Output) ApplyUint32Array(applier func(v int64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int64Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int64Output) ApplyUint32Map(applier func(v int64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int64Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int64Output) ApplyUint64(applier func(v int64) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v int64) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int64Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, int64) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int64Output) ApplyUint64Array(applier func(v int64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int64Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int64Output) ApplyUint64Map(applier func(v int64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int64Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int64Output) ApplyUint8(applier func(v int64) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v int64) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int64Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, int64) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int64Output) ApplyUint8Array(applier func(v int64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v int64) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int64Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, int64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int64Output) ApplyUint8Map(applier func(v int64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v int64) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int64Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, int64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int64arrayType = reflect.TypeOf((*[]int64)(nil)).Elem()

// Int64ArrayInput is an input type that accepts Int64Array and Int64ArrayOutput values.
type Int64ArrayInput interface {
	Input

	// nolint: unused
	isInt64Array()
}

// Int64Array is an input type for []int64 values.
type Int64Array []int64

// ElementType returns the element type of this Input ([]int64).
func (Int64Array) ElementType() reflect.Type {
	return int64arrayType
}

func (Int64Array) isInt64Array() {}

// Int64ArrayOutput is an Output that returns []int64 values.
type Int64ArrayOutput OutputType

// ElementType returns the element type of this Output ([]int64).
func (Int64ArrayOutput) ElementType() reflect.Type {
	return int64arrayType
}

func (Int64ArrayOutput) isInt64Array() {}

// Apply applies a transformation to the int64array value when it is available.
func (out Int64ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int64array value when it is available.
func (out Int64ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int64ArrayOutput) ApplyAny(applier func(v []int64) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []int64) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int64ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []int64) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int64ArrayOutput) ApplyAnyArray(applier func(v []int64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int64ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int64ArrayOutput) ApplyAnyMap(applier func(v []int64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int64ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int64ArrayOutput) ApplyArchive(applier func(v []int64) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []int64) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int64ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []int64) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int64ArrayOutput) ApplyArchiveArray(applier func(v []int64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int64ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int64ArrayOutput) ApplyArchiveMap(applier func(v []int64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int64ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int64ArrayOutput) ApplyAsset(applier func(v []int64) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []int64) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int64ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []int64) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int64ArrayOutput) ApplyAssetArray(applier func(v []int64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int64ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int64ArrayOutput) ApplyAssetMap(applier func(v []int64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int64ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int64ArrayOutput) ApplyAssetOrArchive(applier func(v []int64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []int64) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int64ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []int64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int64ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []int64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int64ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int64ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []int64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int64ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int64ArrayOutput) ApplyBool(applier func(v []int64) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []int64) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int64ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []int64) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int64ArrayOutput) ApplyBoolArray(applier func(v []int64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int64ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int64ArrayOutput) ApplyBoolMap(applier func(v []int64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int64ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int64ArrayOutput) ApplyFloat32(applier func(v []int64) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []int64) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int64ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []int64) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int64ArrayOutput) ApplyFloat32Array(applier func(v []int64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int64ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int64ArrayOutput) ApplyFloat32Map(applier func(v []int64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int64ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int64ArrayOutput) ApplyFloat64(applier func(v []int64) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []int64) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int64ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []int64) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int64ArrayOutput) ApplyFloat64Array(applier func(v []int64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int64ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int64ArrayOutput) ApplyFloat64Map(applier func(v []int64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int64ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int64ArrayOutput) ApplyID(applier func(v []int64) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []int64) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int64ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []int64) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int64ArrayOutput) ApplyIDArray(applier func(v []int64) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int64ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int64ArrayOutput) ApplyIDMap(applier func(v []int64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int64ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int64ArrayOutput) ApplyInt(applier func(v []int64) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []int64) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int64ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []int64) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int64ArrayOutput) ApplyIntArray(applier func(v []int64) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int64ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int64ArrayOutput) ApplyIntMap(applier func(v []int64) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int64ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int64ArrayOutput) ApplyInt16(applier func(v []int64) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []int64) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int64ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []int64) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int64ArrayOutput) ApplyInt16Array(applier func(v []int64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int64ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int64ArrayOutput) ApplyInt16Map(applier func(v []int64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int64ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int64ArrayOutput) ApplyInt32(applier func(v []int64) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []int64) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int64ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []int64) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int64ArrayOutput) ApplyInt32Array(applier func(v []int64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int64ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int64ArrayOutput) ApplyInt32Map(applier func(v []int64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int64ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int64ArrayOutput) ApplyInt64(applier func(v []int64) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []int64) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int64ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []int64) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int64ArrayOutput) ApplyInt64Array(applier func(v []int64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int64ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int64ArrayOutput) ApplyInt64Map(applier func(v []int64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int64ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int64ArrayOutput) ApplyInt8(applier func(v []int64) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []int64) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int64ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []int64) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int64ArrayOutput) ApplyInt8Array(applier func(v []int64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int64ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int64ArrayOutput) ApplyInt8Map(applier func(v []int64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int64ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int64ArrayOutput) ApplyString(applier func(v []int64) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []int64) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int64ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []int64) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int64ArrayOutput) ApplyStringArray(applier func(v []int64) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int64ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int64ArrayOutput) ApplyStringMap(applier func(v []int64) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int64ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int64ArrayOutput) ApplyURN(applier func(v []int64) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []int64) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int64ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []int64) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int64ArrayOutput) ApplyURNArray(applier func(v []int64) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int64ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int64ArrayOutput) ApplyURNMap(applier func(v []int64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int64ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int64ArrayOutput) ApplyUint(applier func(v []int64) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []int64) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int64ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []int64) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int64ArrayOutput) ApplyUintArray(applier func(v []int64) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int64ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int64ArrayOutput) ApplyUintMap(applier func(v []int64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int64ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int64ArrayOutput) ApplyUint16(applier func(v []int64) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []int64) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int64ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []int64) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int64ArrayOutput) ApplyUint16Array(applier func(v []int64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int64ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int64ArrayOutput) ApplyUint16Map(applier func(v []int64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int64ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int64ArrayOutput) ApplyUint32(applier func(v []int64) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []int64) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int64ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []int64) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int64ArrayOutput) ApplyUint32Array(applier func(v []int64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int64ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int64ArrayOutput) ApplyUint32Map(applier func(v []int64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int64ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int64ArrayOutput) ApplyUint64(applier func(v []int64) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []int64) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int64ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []int64) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int64ArrayOutput) ApplyUint64Array(applier func(v []int64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int64ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int64ArrayOutput) ApplyUint64Map(applier func(v []int64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int64ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int64ArrayOutput) ApplyUint8(applier func(v []int64) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []int64) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int64ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []int64) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int64ArrayOutput) ApplyUint8Array(applier func(v []int64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []int64) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int64ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []int64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int64ArrayOutput) ApplyUint8Map(applier func(v []int64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []int64) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int64ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []int64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int64mapType = reflect.TypeOf((*map[string]int64)(nil)).Elem()

// Int64MapInput is an input type that accepts Int64Map and Int64MapOutput values.
type Int64MapInput interface {
	Input

	// nolint: unused
	isInt64Map()
}

// Int64Map is an input type for map[string]int64 values.
type Int64Map map[string]int64

// ElementType returns the element type of this Input (map[string]int64).
func (Int64Map) ElementType() reflect.Type {
	return int64mapType
}

func (Int64Map) isInt64Map() {}

// Int64MapOutput is an Output that returns map[string]int64 values.
type Int64MapOutput OutputType

// ElementType returns the element type of this Output (map[string]int64).
func (Int64MapOutput) ElementType() reflect.Type {
	return int64mapType
}

func (Int64MapOutput) isInt64Map() {}

// Apply applies a transformation to the int64map value when it is available.
func (out Int64MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int64map value when it is available.
func (out Int64MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int64MapOutput) ApplyAny(applier func(v map[string]int64) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]int64) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int64MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int64MapOutput) ApplyAnyArray(applier func(v map[string]int64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int64MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int64MapOutput) ApplyAnyMap(applier func(v map[string]int64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int64MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int64MapOutput) ApplyArchive(applier func(v map[string]int64) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int64) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int64MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int64MapOutput) ApplyArchiveArray(applier func(v map[string]int64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int64MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int64MapOutput) ApplyArchiveMap(applier func(v map[string]int64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int64MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int64MapOutput) ApplyAsset(applier func(v map[string]int64) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]int64) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int64MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int64MapOutput) ApplyAssetArray(applier func(v map[string]int64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int64MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int64MapOutput) ApplyAssetMap(applier func(v map[string]int64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int64MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int64MapOutput) ApplyAssetOrArchive(applier func(v map[string]int64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int64) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int64MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int64MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]int64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int64MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int64MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]int64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int64MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int64MapOutput) ApplyBool(applier func(v map[string]int64) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]int64) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int64MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int64MapOutput) ApplyBoolArray(applier func(v map[string]int64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int64MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int64MapOutput) ApplyBoolMap(applier func(v map[string]int64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int64MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int64MapOutput) ApplyFloat32(applier func(v map[string]int64) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]int64) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int64MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int64MapOutput) ApplyFloat32Array(applier func(v map[string]int64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int64MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int64MapOutput) ApplyFloat32Map(applier func(v map[string]int64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int64MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int64MapOutput) ApplyFloat64(applier func(v map[string]int64) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]int64) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int64MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int64MapOutput) ApplyFloat64Array(applier func(v map[string]int64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int64MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int64MapOutput) ApplyFloat64Map(applier func(v map[string]int64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int64MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int64MapOutput) ApplyID(applier func(v map[string]int64) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]int64) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int64MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int64MapOutput) ApplyIDArray(applier func(v map[string]int64) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int64MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int64MapOutput) ApplyIDMap(applier func(v map[string]int64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int64MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int64MapOutput) ApplyInt(applier func(v map[string]int64) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]int64) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int64MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int64MapOutput) ApplyIntArray(applier func(v map[string]int64) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int64MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int64MapOutput) ApplyIntMap(applier func(v map[string]int64) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int64MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int64MapOutput) ApplyInt16(applier func(v map[string]int64) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]int64) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int64MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int64MapOutput) ApplyInt16Array(applier func(v map[string]int64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int64MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int64MapOutput) ApplyInt16Map(applier func(v map[string]int64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int64MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int64MapOutput) ApplyInt32(applier func(v map[string]int64) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]int64) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int64MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int64MapOutput) ApplyInt32Array(applier func(v map[string]int64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int64MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int64MapOutput) ApplyInt32Map(applier func(v map[string]int64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int64MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int64MapOutput) ApplyInt64(applier func(v map[string]int64) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]int64) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int64MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int64MapOutput) ApplyInt64Array(applier func(v map[string]int64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int64MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int64MapOutput) ApplyInt64Map(applier func(v map[string]int64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int64MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int64MapOutput) ApplyInt8(applier func(v map[string]int64) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]int64) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int64MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int64MapOutput) ApplyInt8Array(applier func(v map[string]int64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int64MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int64MapOutput) ApplyInt8Map(applier func(v map[string]int64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int64MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int64MapOutput) ApplyString(applier func(v map[string]int64) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]int64) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int64MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int64MapOutput) ApplyStringArray(applier func(v map[string]int64) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int64MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int64MapOutput) ApplyStringMap(applier func(v map[string]int64) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int64MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int64MapOutput) ApplyURN(applier func(v map[string]int64) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]int64) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int64MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int64MapOutput) ApplyURNArray(applier func(v map[string]int64) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int64MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int64MapOutput) ApplyURNMap(applier func(v map[string]int64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int64MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int64MapOutput) ApplyUint(applier func(v map[string]int64) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]int64) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int64MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int64MapOutput) ApplyUintArray(applier func(v map[string]int64) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int64MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int64MapOutput) ApplyUintMap(applier func(v map[string]int64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int64MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int64MapOutput) ApplyUint16(applier func(v map[string]int64) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]int64) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int64MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int64MapOutput) ApplyUint16Array(applier func(v map[string]int64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int64MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int64MapOutput) ApplyUint16Map(applier func(v map[string]int64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int64MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int64MapOutput) ApplyUint32(applier func(v map[string]int64) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]int64) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int64MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int64MapOutput) ApplyUint32Array(applier func(v map[string]int64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int64MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int64MapOutput) ApplyUint32Map(applier func(v map[string]int64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int64MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int64MapOutput) ApplyUint64(applier func(v map[string]int64) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]int64) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int64MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int64MapOutput) ApplyUint64Array(applier func(v map[string]int64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int64MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int64MapOutput) ApplyUint64Map(applier func(v map[string]int64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int64MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int64MapOutput) ApplyUint8(applier func(v map[string]int64) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]int64) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int64MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]int64) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int64MapOutput) ApplyUint8Array(applier func(v map[string]int64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int64) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int64MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int64MapOutput) ApplyUint8Map(applier func(v map[string]int64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]int64) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int64MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int8Type = reflect.TypeOf((*int8)(nil)).Elem()

// Int8Input is an input type that accepts Int8 and Int8Output values.
type Int8Input interface {
	Input

	// nolint: unused
	isInt8()
}

// Int8 is an input type for int8 values.
type Int8 int8

// ElementType returns the element type of this Input (int8).
func (Int8) ElementType() reflect.Type {
	return int8Type
}

func (Int8) isInt8() {}

// Int8Output is an Output that returns int8 values.
type Int8Output OutputType

// ElementType returns the element type of this Output (int8).
func (Int8Output) ElementType() reflect.Type {
	return int8Type
}

func (Int8Output) isInt8() {}

// Apply applies a transformation to the int8 value when it is available.
func (out Int8Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int8 value when it is available.
func (out Int8Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int8Output) ApplyAny(applier func(v int8) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v int8) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int8Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, int8) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int8Output) ApplyAnyArray(applier func(v int8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int8Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int8Output) ApplyAnyMap(applier func(v int8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int8Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int8Output) ApplyArchive(applier func(v int8) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v int8) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int8Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, int8) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int8Output) ApplyArchiveArray(applier func(v int8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int8Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int8Output) ApplyArchiveMap(applier func(v int8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int8Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int8Output) ApplyAsset(applier func(v int8) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v int8) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int8Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, int8) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int8Output) ApplyAssetArray(applier func(v int8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int8Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int8Output) ApplyAssetMap(applier func(v int8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int8Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int8Output) ApplyAssetOrArchive(applier func(v int8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v int8) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int8Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, int8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int8Output) ApplyAssetOrArchiveArray(applier func(v int8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int8Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int8Output) ApplyAssetOrArchiveMap(applier func(v int8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int8Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int8Output) ApplyBool(applier func(v int8) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v int8) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int8Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, int8) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int8Output) ApplyBoolArray(applier func(v int8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int8Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int8Output) ApplyBoolMap(applier func(v int8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int8Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int8Output) ApplyFloat32(applier func(v int8) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v int8) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int8Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, int8) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int8Output) ApplyFloat32Array(applier func(v int8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int8Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int8Output) ApplyFloat32Map(applier func(v int8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int8Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int8Output) ApplyFloat64(applier func(v int8) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v int8) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int8Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, int8) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int8Output) ApplyFloat64Array(applier func(v int8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int8Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int8Output) ApplyFloat64Map(applier func(v int8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int8Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int8Output) ApplyID(applier func(v int8) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v int8) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int8Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, int8) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int8Output) ApplyIDArray(applier func(v int8) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int8Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int8Output) ApplyIDMap(applier func(v int8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int8Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int8Output) ApplyInt(applier func(v int8) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v int8) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int8Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, int8) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int8Output) ApplyIntArray(applier func(v int8) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int8Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int8Output) ApplyIntMap(applier func(v int8) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int8Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int8Output) ApplyInt16(applier func(v int8) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v int8) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int8Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, int8) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int8Output) ApplyInt16Array(applier func(v int8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int8Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int8Output) ApplyInt16Map(applier func(v int8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int8Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int8Output) ApplyInt32(applier func(v int8) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v int8) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int8Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, int8) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int8Output) ApplyInt32Array(applier func(v int8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int8Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int8Output) ApplyInt32Map(applier func(v int8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int8Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int8Output) ApplyInt64(applier func(v int8) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v int8) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int8Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, int8) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int8Output) ApplyInt64Array(applier func(v int8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int8Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int8Output) ApplyInt64Map(applier func(v int8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int8Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int8Output) ApplyInt8(applier func(v int8) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v int8) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int8Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, int8) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int8Output) ApplyInt8Array(applier func(v int8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int8Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int8Output) ApplyInt8Map(applier func(v int8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int8Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int8Output) ApplyString(applier func(v int8) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v int8) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int8Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, int8) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int8Output) ApplyStringArray(applier func(v int8) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int8Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int8Output) ApplyStringMap(applier func(v int8) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int8Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int8Output) ApplyURN(applier func(v int8) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v int8) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int8Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, int8) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int8Output) ApplyURNArray(applier func(v int8) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int8Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int8Output) ApplyURNMap(applier func(v int8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int8Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int8Output) ApplyUint(applier func(v int8) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v int8) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int8Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, int8) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int8Output) ApplyUintArray(applier func(v int8) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int8Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int8Output) ApplyUintMap(applier func(v int8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int8Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int8Output) ApplyUint16(applier func(v int8) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v int8) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int8Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, int8) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int8Output) ApplyUint16Array(applier func(v int8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int8Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int8Output) ApplyUint16Map(applier func(v int8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int8Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int8Output) ApplyUint32(applier func(v int8) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v int8) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int8Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, int8) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int8Output) ApplyUint32Array(applier func(v int8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int8Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int8Output) ApplyUint32Map(applier func(v int8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int8Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int8Output) ApplyUint64(applier func(v int8) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v int8) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int8Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, int8) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int8Output) ApplyUint64Array(applier func(v int8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int8Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int8Output) ApplyUint64Map(applier func(v int8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int8Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int8Output) ApplyUint8(applier func(v int8) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v int8) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int8Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, int8) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int8Output) ApplyUint8Array(applier func(v int8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v int8) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int8Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, int8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int8Output) ApplyUint8Map(applier func(v int8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v int8) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int8Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, int8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int8arrayType = reflect.TypeOf((*[]int8)(nil)).Elem()

// Int8ArrayInput is an input type that accepts Int8Array and Int8ArrayOutput values.
type Int8ArrayInput interface {
	Input

	// nolint: unused
	isInt8Array()
}

// Int8Array is an input type for []int8 values.
type Int8Array []int8

// ElementType returns the element type of this Input ([]int8).
func (Int8Array) ElementType() reflect.Type {
	return int8arrayType
}

func (Int8Array) isInt8Array() {}

// Int8ArrayOutput is an Output that returns []int8 values.
type Int8ArrayOutput OutputType

// ElementType returns the element type of this Output ([]int8).
func (Int8ArrayOutput) ElementType() reflect.Type {
	return int8arrayType
}

func (Int8ArrayOutput) isInt8Array() {}

// Apply applies a transformation to the int8array value when it is available.
func (out Int8ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int8array value when it is available.
func (out Int8ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int8ArrayOutput) ApplyAny(applier func(v []int8) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []int8) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int8ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []int8) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int8ArrayOutput) ApplyAnyArray(applier func(v []int8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int8ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int8ArrayOutput) ApplyAnyMap(applier func(v []int8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int8ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int8ArrayOutput) ApplyArchive(applier func(v []int8) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []int8) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int8ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []int8) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int8ArrayOutput) ApplyArchiveArray(applier func(v []int8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int8ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int8ArrayOutput) ApplyArchiveMap(applier func(v []int8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int8ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int8ArrayOutput) ApplyAsset(applier func(v []int8) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []int8) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int8ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []int8) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int8ArrayOutput) ApplyAssetArray(applier func(v []int8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int8ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int8ArrayOutput) ApplyAssetMap(applier func(v []int8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int8ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int8ArrayOutput) ApplyAssetOrArchive(applier func(v []int8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []int8) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int8ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []int8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int8ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []int8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int8ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int8ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []int8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int8ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int8ArrayOutput) ApplyBool(applier func(v []int8) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []int8) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int8ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []int8) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int8ArrayOutput) ApplyBoolArray(applier func(v []int8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int8ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int8ArrayOutput) ApplyBoolMap(applier func(v []int8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int8ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int8ArrayOutput) ApplyFloat32(applier func(v []int8) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []int8) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int8ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []int8) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int8ArrayOutput) ApplyFloat32Array(applier func(v []int8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int8ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int8ArrayOutput) ApplyFloat32Map(applier func(v []int8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int8ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int8ArrayOutput) ApplyFloat64(applier func(v []int8) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []int8) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int8ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []int8) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int8ArrayOutput) ApplyFloat64Array(applier func(v []int8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int8ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int8ArrayOutput) ApplyFloat64Map(applier func(v []int8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int8ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int8ArrayOutput) ApplyID(applier func(v []int8) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []int8) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int8ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []int8) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int8ArrayOutput) ApplyIDArray(applier func(v []int8) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int8ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int8ArrayOutput) ApplyIDMap(applier func(v []int8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int8ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int8ArrayOutput) ApplyInt(applier func(v []int8) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []int8) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int8ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []int8) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int8ArrayOutput) ApplyIntArray(applier func(v []int8) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int8ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int8ArrayOutput) ApplyIntMap(applier func(v []int8) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int8ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int8ArrayOutput) ApplyInt16(applier func(v []int8) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []int8) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int8ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []int8) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int8ArrayOutput) ApplyInt16Array(applier func(v []int8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int8ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int8ArrayOutput) ApplyInt16Map(applier func(v []int8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int8ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int8ArrayOutput) ApplyInt32(applier func(v []int8) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []int8) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int8ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []int8) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int8ArrayOutput) ApplyInt32Array(applier func(v []int8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int8ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int8ArrayOutput) ApplyInt32Map(applier func(v []int8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int8ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int8ArrayOutput) ApplyInt64(applier func(v []int8) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []int8) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int8ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []int8) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int8ArrayOutput) ApplyInt64Array(applier func(v []int8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int8ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int8ArrayOutput) ApplyInt64Map(applier func(v []int8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int8ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int8ArrayOutput) ApplyInt8(applier func(v []int8) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []int8) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int8ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []int8) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int8ArrayOutput) ApplyInt8Array(applier func(v []int8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int8ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int8ArrayOutput) ApplyInt8Map(applier func(v []int8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int8ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int8ArrayOutput) ApplyString(applier func(v []int8) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []int8) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int8ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []int8) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int8ArrayOutput) ApplyStringArray(applier func(v []int8) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int8ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int8ArrayOutput) ApplyStringMap(applier func(v []int8) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int8ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int8ArrayOutput) ApplyURN(applier func(v []int8) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []int8) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int8ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []int8) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int8ArrayOutput) ApplyURNArray(applier func(v []int8) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int8ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int8ArrayOutput) ApplyURNMap(applier func(v []int8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int8ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int8ArrayOutput) ApplyUint(applier func(v []int8) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []int8) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int8ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []int8) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int8ArrayOutput) ApplyUintArray(applier func(v []int8) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int8ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int8ArrayOutput) ApplyUintMap(applier func(v []int8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int8ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int8ArrayOutput) ApplyUint16(applier func(v []int8) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []int8) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int8ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []int8) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int8ArrayOutput) ApplyUint16Array(applier func(v []int8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int8ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int8ArrayOutput) ApplyUint16Map(applier func(v []int8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int8ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int8ArrayOutput) ApplyUint32(applier func(v []int8) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []int8) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int8ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []int8) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int8ArrayOutput) ApplyUint32Array(applier func(v []int8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int8ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int8ArrayOutput) ApplyUint32Map(applier func(v []int8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int8ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int8ArrayOutput) ApplyUint64(applier func(v []int8) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []int8) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int8ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []int8) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int8ArrayOutput) ApplyUint64Array(applier func(v []int8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int8ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int8ArrayOutput) ApplyUint64Map(applier func(v []int8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int8ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int8ArrayOutput) ApplyUint8(applier func(v []int8) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []int8) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int8ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []int8) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int8ArrayOutput) ApplyUint8Array(applier func(v []int8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []int8) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int8ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []int8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int8ArrayOutput) ApplyUint8Map(applier func(v []int8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []int8) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int8ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []int8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var int8mapType = reflect.TypeOf((*map[string]int8)(nil)).Elem()

// Int8MapInput is an input type that accepts Int8Map and Int8MapOutput values.
type Int8MapInput interface {
	Input

	// nolint: unused
	isInt8Map()
}

// Int8Map is an input type for map[string]int8 values.
type Int8Map map[string]int8

// ElementType returns the element type of this Input (map[string]int8).
func (Int8Map) ElementType() reflect.Type {
	return int8mapType
}

func (Int8Map) isInt8Map() {}

// Int8MapOutput is an Output that returns map[string]int8 values.
type Int8MapOutput OutputType

// ElementType returns the element type of this Output (map[string]int8).
func (Int8MapOutput) ElementType() reflect.Type {
	return int8mapType
}

func (Int8MapOutput) isInt8Map() {}

// Apply applies a transformation to the int8map value when it is available.
func (out Int8MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the int8map value when it is available.
func (out Int8MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Int8MapOutput) ApplyAny(applier func(v map[string]int8) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]int8) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Int8MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Int8MapOutput) ApplyAnyArray(applier func(v map[string]int8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Int8MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Int8MapOutput) ApplyAnyMap(applier func(v map[string]int8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Int8MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Int8MapOutput) ApplyArchive(applier func(v map[string]int8) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int8) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Int8MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Int8MapOutput) ApplyArchiveArray(applier func(v map[string]int8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Int8MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Int8MapOutput) ApplyArchiveMap(applier func(v map[string]int8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Int8MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Int8MapOutput) ApplyAsset(applier func(v map[string]int8) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]int8) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Int8MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Int8MapOutput) ApplyAssetArray(applier func(v map[string]int8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Int8MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Int8MapOutput) ApplyAssetMap(applier func(v map[string]int8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Int8MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Int8MapOutput) ApplyAssetOrArchive(applier func(v map[string]int8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]int8) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Int8MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Int8MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]int8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Int8MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Int8MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]int8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Int8MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Int8MapOutput) ApplyBool(applier func(v map[string]int8) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]int8) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Int8MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Int8MapOutput) ApplyBoolArray(applier func(v map[string]int8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Int8MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Int8MapOutput) ApplyBoolMap(applier func(v map[string]int8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Int8MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Int8MapOutput) ApplyFloat32(applier func(v map[string]int8) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]int8) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Int8MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Int8MapOutput) ApplyFloat32Array(applier func(v map[string]int8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Int8MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Int8MapOutput) ApplyFloat32Map(applier func(v map[string]int8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Int8MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Int8MapOutput) ApplyFloat64(applier func(v map[string]int8) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]int8) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Int8MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Int8MapOutput) ApplyFloat64Array(applier func(v map[string]int8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Int8MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Int8MapOutput) ApplyFloat64Map(applier func(v map[string]int8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Int8MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Int8MapOutput) ApplyID(applier func(v map[string]int8) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]int8) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Int8MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Int8MapOutput) ApplyIDArray(applier func(v map[string]int8) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Int8MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Int8MapOutput) ApplyIDMap(applier func(v map[string]int8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Int8MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Int8MapOutput) ApplyInt(applier func(v map[string]int8) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]int8) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Int8MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Int8MapOutput) ApplyIntArray(applier func(v map[string]int8) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Int8MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Int8MapOutput) ApplyIntMap(applier func(v map[string]int8) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Int8MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Int8MapOutput) ApplyInt16(applier func(v map[string]int8) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]int8) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Int8MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Int8MapOutput) ApplyInt16Array(applier func(v map[string]int8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Int8MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Int8MapOutput) ApplyInt16Map(applier func(v map[string]int8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Int8MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Int8MapOutput) ApplyInt32(applier func(v map[string]int8) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]int8) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Int8MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Int8MapOutput) ApplyInt32Array(applier func(v map[string]int8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Int8MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Int8MapOutput) ApplyInt32Map(applier func(v map[string]int8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Int8MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Int8MapOutput) ApplyInt64(applier func(v map[string]int8) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]int8) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Int8MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Int8MapOutput) ApplyInt64Array(applier func(v map[string]int8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Int8MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Int8MapOutput) ApplyInt64Map(applier func(v map[string]int8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Int8MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Int8MapOutput) ApplyInt8(applier func(v map[string]int8) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]int8) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Int8MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Int8MapOutput) ApplyInt8Array(applier func(v map[string]int8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Int8MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Int8MapOutput) ApplyInt8Map(applier func(v map[string]int8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Int8MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Int8MapOutput) ApplyString(applier func(v map[string]int8) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]int8) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Int8MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Int8MapOutput) ApplyStringArray(applier func(v map[string]int8) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Int8MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Int8MapOutput) ApplyStringMap(applier func(v map[string]int8) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Int8MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Int8MapOutput) ApplyURN(applier func(v map[string]int8) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]int8) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Int8MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Int8MapOutput) ApplyURNArray(applier func(v map[string]int8) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Int8MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Int8MapOutput) ApplyURNMap(applier func(v map[string]int8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Int8MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Int8MapOutput) ApplyUint(applier func(v map[string]int8) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]int8) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Int8MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Int8MapOutput) ApplyUintArray(applier func(v map[string]int8) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Int8MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Int8MapOutput) ApplyUintMap(applier func(v map[string]int8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Int8MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Int8MapOutput) ApplyUint16(applier func(v map[string]int8) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]int8) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Int8MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Int8MapOutput) ApplyUint16Array(applier func(v map[string]int8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Int8MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Int8MapOutput) ApplyUint16Map(applier func(v map[string]int8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Int8MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Int8MapOutput) ApplyUint32(applier func(v map[string]int8) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]int8) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Int8MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Int8MapOutput) ApplyUint32Array(applier func(v map[string]int8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Int8MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Int8MapOutput) ApplyUint32Map(applier func(v map[string]int8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Int8MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Int8MapOutput) ApplyUint64(applier func(v map[string]int8) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]int8) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Int8MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Int8MapOutput) ApplyUint64Array(applier func(v map[string]int8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Int8MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Int8MapOutput) ApplyUint64Map(applier func(v map[string]int8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Int8MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Int8MapOutput) ApplyUint8(applier func(v map[string]int8) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]int8) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Int8MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]int8) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Int8MapOutput) ApplyUint8Array(applier func(v map[string]int8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]int8) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Int8MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]int8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Int8MapOutput) ApplyUint8Map(applier func(v map[string]int8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]int8) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Int8MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]int8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var stringType = reflect.TypeOf((*string)(nil)).Elem()

// StringInput is an input type that accepts String and StringOutput values.
type StringInput interface {
	Input

	// nolint: unused
	isString()
}

// String is an input type for string values.
type String string

// ElementType returns the element type of this Input (string).
func (String) ElementType() reflect.Type {
	return stringType
}

func (String) isString() {}

// StringOutput is an Output that returns string values.
type StringOutput OutputType

// ElementType returns the element type of this Output (string).
func (StringOutput) ElementType() reflect.Type {
	return stringType
}

func (StringOutput) isString() {}

// Apply applies a transformation to the string value when it is available.
func (out StringOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the string value when it is available.
func (out StringOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out StringOutput) ApplyAny(applier func(v string) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v string) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out StringOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, string) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out StringOutput) ApplyAnyArray(applier func(v string) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v string) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out StringOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out StringOutput) ApplyAnyMap(applier func(v string) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out StringOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out StringOutput) ApplyArchive(applier func(v string) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v string) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out StringOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, string) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out StringOutput) ApplyArchiveArray(applier func(v string) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v string) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out StringOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out StringOutput) ApplyArchiveMap(applier func(v string) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out StringOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out StringOutput) ApplyAsset(applier func(v string) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v string) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out StringOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, string) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out StringOutput) ApplyAssetArray(applier func(v string) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v string) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out StringOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out StringOutput) ApplyAssetMap(applier func(v string) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out StringOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out StringOutput) ApplyAssetOrArchive(applier func(v string) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v string) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out StringOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, string) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out StringOutput) ApplyAssetOrArchiveArray(applier func(v string) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v string) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out StringOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out StringOutput) ApplyAssetOrArchiveMap(applier func(v string) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out StringOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out StringOutput) ApplyBool(applier func(v string) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v string) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out StringOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, string) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out StringOutput) ApplyBoolArray(applier func(v string) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v string) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out StringOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out StringOutput) ApplyBoolMap(applier func(v string) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out StringOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out StringOutput) ApplyFloat32(applier func(v string) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v string) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out StringOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, string) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out StringOutput) ApplyFloat32Array(applier func(v string) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out StringOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out StringOutput) ApplyFloat32Map(applier func(v string) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out StringOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out StringOutput) ApplyFloat64(applier func(v string) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v string) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out StringOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, string) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out StringOutput) ApplyFloat64Array(applier func(v string) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out StringOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out StringOutput) ApplyFloat64Map(applier func(v string) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out StringOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out StringOutput) ApplyID(applier func(v string) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v string) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out StringOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, string) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out StringOutput) ApplyIDArray(applier func(v string) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v string) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out StringOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out StringOutput) ApplyIDMap(applier func(v string) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out StringOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out StringOutput) ApplyInt(applier func(v string) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v string) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out StringOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, string) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out StringOutput) ApplyIntArray(applier func(v string) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v string) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out StringOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out StringOutput) ApplyIntMap(applier func(v string) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out StringOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out StringOutput) ApplyInt16(applier func(v string) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v string) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out StringOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, string) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out StringOutput) ApplyInt16Array(applier func(v string) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out StringOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out StringOutput) ApplyInt16Map(applier func(v string) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out StringOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out StringOutput) ApplyInt32(applier func(v string) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v string) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out StringOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, string) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out StringOutput) ApplyInt32Array(applier func(v string) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out StringOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out StringOutput) ApplyInt32Map(applier func(v string) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out StringOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out StringOutput) ApplyInt64(applier func(v string) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v string) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out StringOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, string) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out StringOutput) ApplyInt64Array(applier func(v string) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out StringOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out StringOutput) ApplyInt64Map(applier func(v string) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out StringOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out StringOutput) ApplyInt8(applier func(v string) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v string) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out StringOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, string) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out StringOutput) ApplyInt8Array(applier func(v string) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out StringOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out StringOutput) ApplyInt8Map(applier func(v string) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out StringOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out StringOutput) ApplyString(applier func(v string) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v string) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out StringOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, string) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out StringOutput) ApplyStringArray(applier func(v string) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v string) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out StringOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out StringOutput) ApplyStringMap(applier func(v string) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out StringOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out StringOutput) ApplyURN(applier func(v string) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v string) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out StringOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, string) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out StringOutput) ApplyURNArray(applier func(v string) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v string) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out StringOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out StringOutput) ApplyURNMap(applier func(v string) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out StringOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out StringOutput) ApplyUint(applier func(v string) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v string) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out StringOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, string) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out StringOutput) ApplyUintArray(applier func(v string) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v string) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out StringOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out StringOutput) ApplyUintMap(applier func(v string) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v string) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out StringOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out StringOutput) ApplyUint16(applier func(v string) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v string) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out StringOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, string) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out StringOutput) ApplyUint16Array(applier func(v string) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out StringOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out StringOutput) ApplyUint16Map(applier func(v string) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out StringOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out StringOutput) ApplyUint32(applier func(v string) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v string) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out StringOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, string) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out StringOutput) ApplyUint32Array(applier func(v string) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out StringOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out StringOutput) ApplyUint32Map(applier func(v string) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out StringOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out StringOutput) ApplyUint64(applier func(v string) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v string) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out StringOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, string) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out StringOutput) ApplyUint64Array(applier func(v string) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out StringOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out StringOutput) ApplyUint64Map(applier func(v string) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out StringOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out StringOutput) ApplyUint8(applier func(v string) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v string) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out StringOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, string) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out StringOutput) ApplyUint8Array(applier func(v string) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v string) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out StringOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, string) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out StringOutput) ApplyUint8Map(applier func(v string) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v string) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out StringOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, string) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var stringarrayType = reflect.TypeOf((*[]string)(nil)).Elem()

// StringArrayInput is an input type that accepts StringArray and StringArrayOutput values.
type StringArrayInput interface {
	Input

	// nolint: unused
	isStringArray()
}

// StringArray is an input type for []string values.
type StringArray []string

// ElementType returns the element type of this Input ([]string).
func (StringArray) ElementType() reflect.Type {
	return stringarrayType
}

func (StringArray) isStringArray() {}

// StringArrayOutput is an Output that returns []string values.
type StringArrayOutput OutputType

// ElementType returns the element type of this Output ([]string).
func (StringArrayOutput) ElementType() reflect.Type {
	return stringarrayType
}

func (StringArrayOutput) isStringArray() {}

// Apply applies a transformation to the stringarray value when it is available.
func (out StringArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the stringarray value when it is available.
func (out StringArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out StringArrayOutput) ApplyAny(applier func(v []string) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []string) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out StringArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []string) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out StringArrayOutput) ApplyAnyArray(applier func(v []string) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out StringArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out StringArrayOutput) ApplyAnyMap(applier func(v []string) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out StringArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out StringArrayOutput) ApplyArchive(applier func(v []string) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []string) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out StringArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []string) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out StringArrayOutput) ApplyArchiveArray(applier func(v []string) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out StringArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out StringArrayOutput) ApplyArchiveMap(applier func(v []string) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out StringArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out StringArrayOutput) ApplyAsset(applier func(v []string) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []string) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out StringArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []string) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out StringArrayOutput) ApplyAssetArray(applier func(v []string) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out StringArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out StringArrayOutput) ApplyAssetMap(applier func(v []string) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out StringArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out StringArrayOutput) ApplyAssetOrArchive(applier func(v []string) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []string) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out StringArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []string) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out StringArrayOutput) ApplyAssetOrArchiveArray(applier func(v []string) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out StringArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out StringArrayOutput) ApplyAssetOrArchiveMap(applier func(v []string) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out StringArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out StringArrayOutput) ApplyBool(applier func(v []string) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []string) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out StringArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []string) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out StringArrayOutput) ApplyBoolArray(applier func(v []string) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out StringArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out StringArrayOutput) ApplyBoolMap(applier func(v []string) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out StringArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out StringArrayOutput) ApplyFloat32(applier func(v []string) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []string) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out StringArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []string) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out StringArrayOutput) ApplyFloat32Array(applier func(v []string) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out StringArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out StringArrayOutput) ApplyFloat32Map(applier func(v []string) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out StringArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out StringArrayOutput) ApplyFloat64(applier func(v []string) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []string) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out StringArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []string) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out StringArrayOutput) ApplyFloat64Array(applier func(v []string) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out StringArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out StringArrayOutput) ApplyFloat64Map(applier func(v []string) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out StringArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out StringArrayOutput) ApplyID(applier func(v []string) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []string) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out StringArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []string) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out StringArrayOutput) ApplyIDArray(applier func(v []string) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out StringArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out StringArrayOutput) ApplyIDMap(applier func(v []string) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out StringArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out StringArrayOutput) ApplyInt(applier func(v []string) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []string) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out StringArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []string) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out StringArrayOutput) ApplyIntArray(applier func(v []string) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out StringArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out StringArrayOutput) ApplyIntMap(applier func(v []string) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out StringArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out StringArrayOutput) ApplyInt16(applier func(v []string) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []string) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out StringArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []string) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out StringArrayOutput) ApplyInt16Array(applier func(v []string) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out StringArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out StringArrayOutput) ApplyInt16Map(applier func(v []string) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out StringArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out StringArrayOutput) ApplyInt32(applier func(v []string) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []string) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out StringArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []string) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out StringArrayOutput) ApplyInt32Array(applier func(v []string) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out StringArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out StringArrayOutput) ApplyInt32Map(applier func(v []string) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out StringArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out StringArrayOutput) ApplyInt64(applier func(v []string) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []string) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out StringArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []string) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out StringArrayOutput) ApplyInt64Array(applier func(v []string) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out StringArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out StringArrayOutput) ApplyInt64Map(applier func(v []string) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out StringArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out StringArrayOutput) ApplyInt8(applier func(v []string) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []string) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out StringArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []string) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out StringArrayOutput) ApplyInt8Array(applier func(v []string) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out StringArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out StringArrayOutput) ApplyInt8Map(applier func(v []string) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out StringArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out StringArrayOutput) ApplyString(applier func(v []string) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []string) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out StringArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []string) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out StringArrayOutput) ApplyStringArray(applier func(v []string) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out StringArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out StringArrayOutput) ApplyStringMap(applier func(v []string) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out StringArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out StringArrayOutput) ApplyURN(applier func(v []string) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []string) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out StringArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []string) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out StringArrayOutput) ApplyURNArray(applier func(v []string) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out StringArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out StringArrayOutput) ApplyURNMap(applier func(v []string) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out StringArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out StringArrayOutput) ApplyUint(applier func(v []string) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []string) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out StringArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []string) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out StringArrayOutput) ApplyUintArray(applier func(v []string) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out StringArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out StringArrayOutput) ApplyUintMap(applier func(v []string) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out StringArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out StringArrayOutput) ApplyUint16(applier func(v []string) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []string) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out StringArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []string) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out StringArrayOutput) ApplyUint16Array(applier func(v []string) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out StringArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out StringArrayOutput) ApplyUint16Map(applier func(v []string) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out StringArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out StringArrayOutput) ApplyUint32(applier func(v []string) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []string) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out StringArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []string) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out StringArrayOutput) ApplyUint32Array(applier func(v []string) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out StringArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out StringArrayOutput) ApplyUint32Map(applier func(v []string) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out StringArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out StringArrayOutput) ApplyUint64(applier func(v []string) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []string) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out StringArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []string) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out StringArrayOutput) ApplyUint64Array(applier func(v []string) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out StringArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out StringArrayOutput) ApplyUint64Map(applier func(v []string) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out StringArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out StringArrayOutput) ApplyUint8(applier func(v []string) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []string) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out StringArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []string) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out StringArrayOutput) ApplyUint8Array(applier func(v []string) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []string) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out StringArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []string) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out StringArrayOutput) ApplyUint8Map(applier func(v []string) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []string) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out StringArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []string) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var stringmapType = reflect.TypeOf((*map[string]string)(nil)).Elem()

// StringMapInput is an input type that accepts StringMap and StringMapOutput values.
type StringMapInput interface {
	Input

	// nolint: unused
	isStringMap()
}

// StringMap is an input type for map[string]string values.
type StringMap map[string]string

// ElementType returns the element type of this Input (map[string]string).
func (StringMap) ElementType() reflect.Type {
	return stringmapType
}

func (StringMap) isStringMap() {}

// StringMapOutput is an Output that returns map[string]string values.
type StringMapOutput OutputType

// ElementType returns the element type of this Output (map[string]string).
func (StringMapOutput) ElementType() reflect.Type {
	return stringmapType
}

func (StringMapOutput) isStringMap() {}

// Apply applies a transformation to the stringmap value when it is available.
func (out StringMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the stringmap value when it is available.
func (out StringMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out StringMapOutput) ApplyAny(applier func(v map[string]string) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]string) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out StringMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]string) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out StringMapOutput) ApplyAnyArray(applier func(v map[string]string) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out StringMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out StringMapOutput) ApplyAnyMap(applier func(v map[string]string) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out StringMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out StringMapOutput) ApplyArchive(applier func(v map[string]string) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]string) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out StringMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]string) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out StringMapOutput) ApplyArchiveArray(applier func(v map[string]string) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out StringMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out StringMapOutput) ApplyArchiveMap(applier func(v map[string]string) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out StringMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out StringMapOutput) ApplyAsset(applier func(v map[string]string) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]string) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out StringMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]string) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out StringMapOutput) ApplyAssetArray(applier func(v map[string]string) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out StringMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out StringMapOutput) ApplyAssetMap(applier func(v map[string]string) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out StringMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out StringMapOutput) ApplyAssetOrArchive(applier func(v map[string]string) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]string) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out StringMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]string) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out StringMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]string) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out StringMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out StringMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]string) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out StringMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out StringMapOutput) ApplyBool(applier func(v map[string]string) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]string) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out StringMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]string) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out StringMapOutput) ApplyBoolArray(applier func(v map[string]string) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out StringMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out StringMapOutput) ApplyBoolMap(applier func(v map[string]string) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out StringMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out StringMapOutput) ApplyFloat32(applier func(v map[string]string) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]string) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out StringMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]string) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out StringMapOutput) ApplyFloat32Array(applier func(v map[string]string) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out StringMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out StringMapOutput) ApplyFloat32Map(applier func(v map[string]string) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out StringMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out StringMapOutput) ApplyFloat64(applier func(v map[string]string) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]string) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out StringMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]string) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out StringMapOutput) ApplyFloat64Array(applier func(v map[string]string) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out StringMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out StringMapOutput) ApplyFloat64Map(applier func(v map[string]string) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out StringMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out StringMapOutput) ApplyID(applier func(v map[string]string) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]string) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out StringMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]string) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out StringMapOutput) ApplyIDArray(applier func(v map[string]string) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out StringMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out StringMapOutput) ApplyIDMap(applier func(v map[string]string) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out StringMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out StringMapOutput) ApplyInt(applier func(v map[string]string) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]string) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out StringMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]string) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out StringMapOutput) ApplyIntArray(applier func(v map[string]string) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out StringMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out StringMapOutput) ApplyIntMap(applier func(v map[string]string) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out StringMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out StringMapOutput) ApplyInt16(applier func(v map[string]string) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]string) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out StringMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]string) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out StringMapOutput) ApplyInt16Array(applier func(v map[string]string) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out StringMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out StringMapOutput) ApplyInt16Map(applier func(v map[string]string) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out StringMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out StringMapOutput) ApplyInt32(applier func(v map[string]string) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]string) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out StringMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]string) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out StringMapOutput) ApplyInt32Array(applier func(v map[string]string) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out StringMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out StringMapOutput) ApplyInt32Map(applier func(v map[string]string) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out StringMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out StringMapOutput) ApplyInt64(applier func(v map[string]string) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]string) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out StringMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]string) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out StringMapOutput) ApplyInt64Array(applier func(v map[string]string) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out StringMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out StringMapOutput) ApplyInt64Map(applier func(v map[string]string) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out StringMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out StringMapOutput) ApplyInt8(applier func(v map[string]string) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]string) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out StringMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]string) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out StringMapOutput) ApplyInt8Array(applier func(v map[string]string) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out StringMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out StringMapOutput) ApplyInt8Map(applier func(v map[string]string) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out StringMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out StringMapOutput) ApplyString(applier func(v map[string]string) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]string) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out StringMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]string) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out StringMapOutput) ApplyStringArray(applier func(v map[string]string) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out StringMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out StringMapOutput) ApplyStringMap(applier func(v map[string]string) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out StringMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out StringMapOutput) ApplyURN(applier func(v map[string]string) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]string) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out StringMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]string) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out StringMapOutput) ApplyURNArray(applier func(v map[string]string) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out StringMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out StringMapOutput) ApplyURNMap(applier func(v map[string]string) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out StringMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out StringMapOutput) ApplyUint(applier func(v map[string]string) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]string) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out StringMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]string) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out StringMapOutput) ApplyUintArray(applier func(v map[string]string) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out StringMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out StringMapOutput) ApplyUintMap(applier func(v map[string]string) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out StringMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out StringMapOutput) ApplyUint16(applier func(v map[string]string) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]string) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out StringMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]string) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out StringMapOutput) ApplyUint16Array(applier func(v map[string]string) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out StringMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out StringMapOutput) ApplyUint16Map(applier func(v map[string]string) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out StringMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out StringMapOutput) ApplyUint32(applier func(v map[string]string) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]string) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out StringMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]string) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out StringMapOutput) ApplyUint32Array(applier func(v map[string]string) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out StringMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out StringMapOutput) ApplyUint32Map(applier func(v map[string]string) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out StringMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out StringMapOutput) ApplyUint64(applier func(v map[string]string) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]string) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out StringMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]string) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out StringMapOutput) ApplyUint64Array(applier func(v map[string]string) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out StringMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out StringMapOutput) ApplyUint64Map(applier func(v map[string]string) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out StringMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out StringMapOutput) ApplyUint8(applier func(v map[string]string) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]string) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out StringMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]string) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out StringMapOutput) ApplyUint8Array(applier func(v map[string]string) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]string) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out StringMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]string) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out StringMapOutput) ApplyUint8Map(applier func(v map[string]string) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]string) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out StringMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]string) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var urnType = reflect.TypeOf((*URN)(nil)).Elem()

// URNInput is an input type that accepts URN and URNOutput values.
type URNInput interface {
	Input

	// nolint: unused
	isURN()
}

// ElementType returns the element type of this Input (URN).
func (URN) ElementType() reflect.Type {
	return urnType
}

func (URN) isURN() {}

func (URN) isString() {}

// URNOutput is an Output that returns URN values.
type URNOutput OutputType

// ElementType returns the element type of this Output (URN).
func (URNOutput) ElementType() reflect.Type {
	return urnType
}

func (URNOutput) isURN() {}

func (URNOutput) isString() {}

// Apply applies a transformation to the urn value when it is available.
func (out URNOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the urn value when it is available.
func (out URNOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out URNOutput) ApplyAny(applier func(v URN) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v URN) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out URNOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, URN) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out URNOutput) ApplyAnyArray(applier func(v URN) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out URNOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out URNOutput) ApplyAnyMap(applier func(v URN) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out URNOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out URNOutput) ApplyArchive(applier func(v URN) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v URN) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out URNOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, URN) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out URNOutput) ApplyArchiveArray(applier func(v URN) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out URNOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out URNOutput) ApplyArchiveMap(applier func(v URN) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out URNOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out URNOutput) ApplyAsset(applier func(v URN) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v URN) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out URNOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, URN) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out URNOutput) ApplyAssetArray(applier func(v URN) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out URNOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out URNOutput) ApplyAssetMap(applier func(v URN) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out URNOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out URNOutput) ApplyAssetOrArchive(applier func(v URN) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v URN) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out URNOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, URN) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out URNOutput) ApplyAssetOrArchiveArray(applier func(v URN) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out URNOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out URNOutput) ApplyAssetOrArchiveMap(applier func(v URN) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out URNOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out URNOutput) ApplyBool(applier func(v URN) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v URN) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out URNOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, URN) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out URNOutput) ApplyBoolArray(applier func(v URN) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out URNOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out URNOutput) ApplyBoolMap(applier func(v URN) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out URNOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out URNOutput) ApplyFloat32(applier func(v URN) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v URN) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out URNOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, URN) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out URNOutput) ApplyFloat32Array(applier func(v URN) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out URNOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out URNOutput) ApplyFloat32Map(applier func(v URN) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out URNOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out URNOutput) ApplyFloat64(applier func(v URN) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v URN) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out URNOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, URN) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out URNOutput) ApplyFloat64Array(applier func(v URN) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out URNOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out URNOutput) ApplyFloat64Map(applier func(v URN) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out URNOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out URNOutput) ApplyID(applier func(v URN) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v URN) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out URNOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, URN) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out URNOutput) ApplyIDArray(applier func(v URN) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out URNOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out URNOutput) ApplyIDMap(applier func(v URN) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out URNOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out URNOutput) ApplyInt(applier func(v URN) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v URN) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out URNOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, URN) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out URNOutput) ApplyIntArray(applier func(v URN) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out URNOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out URNOutput) ApplyIntMap(applier func(v URN) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out URNOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out URNOutput) ApplyInt16(applier func(v URN) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v URN) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out URNOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, URN) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out URNOutput) ApplyInt16Array(applier func(v URN) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out URNOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out URNOutput) ApplyInt16Map(applier func(v URN) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out URNOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out URNOutput) ApplyInt32(applier func(v URN) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v URN) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out URNOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, URN) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out URNOutput) ApplyInt32Array(applier func(v URN) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out URNOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out URNOutput) ApplyInt32Map(applier func(v URN) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out URNOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out URNOutput) ApplyInt64(applier func(v URN) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v URN) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out URNOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, URN) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out URNOutput) ApplyInt64Array(applier func(v URN) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out URNOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out URNOutput) ApplyInt64Map(applier func(v URN) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out URNOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out URNOutput) ApplyInt8(applier func(v URN) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v URN) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out URNOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, URN) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out URNOutput) ApplyInt8Array(applier func(v URN) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out URNOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out URNOutput) ApplyInt8Map(applier func(v URN) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out URNOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out URNOutput) ApplyString(applier func(v URN) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v URN) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out URNOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, URN) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out URNOutput) ApplyStringArray(applier func(v URN) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out URNOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out URNOutput) ApplyStringMap(applier func(v URN) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out URNOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out URNOutput) ApplyURN(applier func(v URN) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v URN) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out URNOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, URN) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out URNOutput) ApplyURNArray(applier func(v URN) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out URNOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out URNOutput) ApplyURNMap(applier func(v URN) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out URNOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out URNOutput) ApplyUint(applier func(v URN) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v URN) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out URNOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, URN) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out URNOutput) ApplyUintArray(applier func(v URN) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out URNOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out URNOutput) ApplyUintMap(applier func(v URN) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out URNOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out URNOutput) ApplyUint16(applier func(v URN) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v URN) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out URNOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, URN) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out URNOutput) ApplyUint16Array(applier func(v URN) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out URNOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out URNOutput) ApplyUint16Map(applier func(v URN) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out URNOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out URNOutput) ApplyUint32(applier func(v URN) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v URN) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out URNOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, URN) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out URNOutput) ApplyUint32Array(applier func(v URN) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out URNOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out URNOutput) ApplyUint32Map(applier func(v URN) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out URNOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out URNOutput) ApplyUint64(applier func(v URN) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v URN) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out URNOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, URN) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out URNOutput) ApplyUint64Array(applier func(v URN) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out URNOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out URNOutput) ApplyUint64Map(applier func(v URN) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out URNOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out URNOutput) ApplyUint8(applier func(v URN) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v URN) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out URNOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, URN) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out URNOutput) ApplyUint8Array(applier func(v URN) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v URN) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out URNOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, URN) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out URNOutput) ApplyUint8Map(applier func(v URN) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v URN) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out URNOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, URN) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var urnarrayType = reflect.TypeOf((*[]URN)(nil)).Elem()

// URNArrayInput is an input type that accepts URNArray and URNArrayOutput values.
type URNArrayInput interface {
	Input

	// nolint: unused
	isURNArray()
}

// URNArray is an input type for []URN values.
type URNArray []URN

// ElementType returns the element type of this Input ([]URN).
func (URNArray) ElementType() reflect.Type {
	return urnarrayType
}

func (URNArray) isURNArray() {}

// URNArrayOutput is an Output that returns []URN values.
type URNArrayOutput OutputType

// ElementType returns the element type of this Output ([]URN).
func (URNArrayOutput) ElementType() reflect.Type {
	return urnarrayType
}

func (URNArrayOutput) isURNArray() {}

// Apply applies a transformation to the urnarray value when it is available.
func (out URNArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the urnarray value when it is available.
func (out URNArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out URNArrayOutput) ApplyAny(applier func(v []URN) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []URN) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out URNArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []URN) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out URNArrayOutput) ApplyAnyArray(applier func(v []URN) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out URNArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out URNArrayOutput) ApplyAnyMap(applier func(v []URN) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out URNArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out URNArrayOutput) ApplyArchive(applier func(v []URN) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []URN) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out URNArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []URN) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out URNArrayOutput) ApplyArchiveArray(applier func(v []URN) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out URNArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out URNArrayOutput) ApplyArchiveMap(applier func(v []URN) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out URNArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out URNArrayOutput) ApplyAsset(applier func(v []URN) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []URN) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out URNArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []URN) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out URNArrayOutput) ApplyAssetArray(applier func(v []URN) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out URNArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out URNArrayOutput) ApplyAssetMap(applier func(v []URN) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out URNArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out URNArrayOutput) ApplyAssetOrArchive(applier func(v []URN) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []URN) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out URNArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []URN) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out URNArrayOutput) ApplyAssetOrArchiveArray(applier func(v []URN) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out URNArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out URNArrayOutput) ApplyAssetOrArchiveMap(applier func(v []URN) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out URNArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out URNArrayOutput) ApplyBool(applier func(v []URN) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []URN) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out URNArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []URN) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out URNArrayOutput) ApplyBoolArray(applier func(v []URN) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out URNArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out URNArrayOutput) ApplyBoolMap(applier func(v []URN) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out URNArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out URNArrayOutput) ApplyFloat32(applier func(v []URN) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []URN) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out URNArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []URN) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out URNArrayOutput) ApplyFloat32Array(applier func(v []URN) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out URNArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out URNArrayOutput) ApplyFloat32Map(applier func(v []URN) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out URNArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out URNArrayOutput) ApplyFloat64(applier func(v []URN) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []URN) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out URNArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []URN) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out URNArrayOutput) ApplyFloat64Array(applier func(v []URN) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out URNArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out URNArrayOutput) ApplyFloat64Map(applier func(v []URN) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out URNArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out URNArrayOutput) ApplyID(applier func(v []URN) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []URN) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out URNArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []URN) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out URNArrayOutput) ApplyIDArray(applier func(v []URN) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out URNArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out URNArrayOutput) ApplyIDMap(applier func(v []URN) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out URNArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out URNArrayOutput) ApplyInt(applier func(v []URN) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []URN) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out URNArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []URN) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out URNArrayOutput) ApplyIntArray(applier func(v []URN) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out URNArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out URNArrayOutput) ApplyIntMap(applier func(v []URN) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out URNArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out URNArrayOutput) ApplyInt16(applier func(v []URN) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []URN) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out URNArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []URN) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out URNArrayOutput) ApplyInt16Array(applier func(v []URN) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out URNArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out URNArrayOutput) ApplyInt16Map(applier func(v []URN) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out URNArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out URNArrayOutput) ApplyInt32(applier func(v []URN) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []URN) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out URNArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []URN) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out URNArrayOutput) ApplyInt32Array(applier func(v []URN) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out URNArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out URNArrayOutput) ApplyInt32Map(applier func(v []URN) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out URNArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out URNArrayOutput) ApplyInt64(applier func(v []URN) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []URN) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out URNArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []URN) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out URNArrayOutput) ApplyInt64Array(applier func(v []URN) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out URNArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out URNArrayOutput) ApplyInt64Map(applier func(v []URN) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out URNArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out URNArrayOutput) ApplyInt8(applier func(v []URN) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []URN) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out URNArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []URN) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out URNArrayOutput) ApplyInt8Array(applier func(v []URN) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out URNArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out URNArrayOutput) ApplyInt8Map(applier func(v []URN) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out URNArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out URNArrayOutput) ApplyString(applier func(v []URN) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []URN) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out URNArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []URN) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out URNArrayOutput) ApplyStringArray(applier func(v []URN) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out URNArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out URNArrayOutput) ApplyStringMap(applier func(v []URN) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out URNArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out URNArrayOutput) ApplyURN(applier func(v []URN) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []URN) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out URNArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []URN) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out URNArrayOutput) ApplyURNArray(applier func(v []URN) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out URNArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out URNArrayOutput) ApplyURNMap(applier func(v []URN) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out URNArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out URNArrayOutput) ApplyUint(applier func(v []URN) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []URN) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out URNArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []URN) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out URNArrayOutput) ApplyUintArray(applier func(v []URN) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out URNArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out URNArrayOutput) ApplyUintMap(applier func(v []URN) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out URNArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out URNArrayOutput) ApplyUint16(applier func(v []URN) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []URN) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out URNArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []URN) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out URNArrayOutput) ApplyUint16Array(applier func(v []URN) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out URNArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out URNArrayOutput) ApplyUint16Map(applier func(v []URN) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out URNArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out URNArrayOutput) ApplyUint32(applier func(v []URN) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []URN) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out URNArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []URN) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out URNArrayOutput) ApplyUint32Array(applier func(v []URN) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out URNArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out URNArrayOutput) ApplyUint32Map(applier func(v []URN) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out URNArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out URNArrayOutput) ApplyUint64(applier func(v []URN) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []URN) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out URNArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []URN) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out URNArrayOutput) ApplyUint64Array(applier func(v []URN) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out URNArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out URNArrayOutput) ApplyUint64Map(applier func(v []URN) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out URNArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out URNArrayOutput) ApplyUint8(applier func(v []URN) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []URN) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out URNArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []URN) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out URNArrayOutput) ApplyUint8Array(applier func(v []URN) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []URN) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out URNArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []URN) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out URNArrayOutput) ApplyUint8Map(applier func(v []URN) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []URN) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out URNArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []URN) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var urnmapType = reflect.TypeOf((*map[string]URN)(nil)).Elem()

// URNMapInput is an input type that accepts URNMap and URNMapOutput values.
type URNMapInput interface {
	Input

	// nolint: unused
	isURNMap()
}

// URNMap is an input type for map[string]URN values.
type URNMap map[string]URN

// ElementType returns the element type of this Input (map[string]URN).
func (URNMap) ElementType() reflect.Type {
	return urnmapType
}

func (URNMap) isURNMap() {}

// URNMapOutput is an Output that returns map[string]URN values.
type URNMapOutput OutputType

// ElementType returns the element type of this Output (map[string]URN).
func (URNMapOutput) ElementType() reflect.Type {
	return urnmapType
}

func (URNMapOutput) isURNMap() {}

// Apply applies a transformation to the urnmap value when it is available.
func (out URNMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the urnmap value when it is available.
func (out URNMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out URNMapOutput) ApplyAny(applier func(v map[string]URN) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]URN) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out URNMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out URNMapOutput) ApplyAnyArray(applier func(v map[string]URN) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out URNMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out URNMapOutput) ApplyAnyMap(applier func(v map[string]URN) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out URNMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out URNMapOutput) ApplyArchive(applier func(v map[string]URN) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]URN) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out URNMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out URNMapOutput) ApplyArchiveArray(applier func(v map[string]URN) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out URNMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out URNMapOutput) ApplyArchiveMap(applier func(v map[string]URN) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out URNMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out URNMapOutput) ApplyAsset(applier func(v map[string]URN) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]URN) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out URNMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out URNMapOutput) ApplyAssetArray(applier func(v map[string]URN) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out URNMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out URNMapOutput) ApplyAssetMap(applier func(v map[string]URN) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out URNMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out URNMapOutput) ApplyAssetOrArchive(applier func(v map[string]URN) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]URN) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out URNMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out URNMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]URN) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out URNMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out URNMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]URN) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out URNMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out URNMapOutput) ApplyBool(applier func(v map[string]URN) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]URN) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out URNMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out URNMapOutput) ApplyBoolArray(applier func(v map[string]URN) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out URNMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out URNMapOutput) ApplyBoolMap(applier func(v map[string]URN) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out URNMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out URNMapOutput) ApplyFloat32(applier func(v map[string]URN) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]URN) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out URNMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out URNMapOutput) ApplyFloat32Array(applier func(v map[string]URN) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out URNMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out URNMapOutput) ApplyFloat32Map(applier func(v map[string]URN) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out URNMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out URNMapOutput) ApplyFloat64(applier func(v map[string]URN) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]URN) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out URNMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out URNMapOutput) ApplyFloat64Array(applier func(v map[string]URN) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out URNMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out URNMapOutput) ApplyFloat64Map(applier func(v map[string]URN) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out URNMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out URNMapOutput) ApplyID(applier func(v map[string]URN) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]URN) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out URNMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out URNMapOutput) ApplyIDArray(applier func(v map[string]URN) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out URNMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out URNMapOutput) ApplyIDMap(applier func(v map[string]URN) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out URNMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out URNMapOutput) ApplyInt(applier func(v map[string]URN) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]URN) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out URNMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out URNMapOutput) ApplyIntArray(applier func(v map[string]URN) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out URNMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out URNMapOutput) ApplyIntMap(applier func(v map[string]URN) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out URNMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out URNMapOutput) ApplyInt16(applier func(v map[string]URN) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]URN) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out URNMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out URNMapOutput) ApplyInt16Array(applier func(v map[string]URN) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out URNMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out URNMapOutput) ApplyInt16Map(applier func(v map[string]URN) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out URNMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out URNMapOutput) ApplyInt32(applier func(v map[string]URN) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]URN) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out URNMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out URNMapOutput) ApplyInt32Array(applier func(v map[string]URN) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out URNMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out URNMapOutput) ApplyInt32Map(applier func(v map[string]URN) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out URNMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out URNMapOutput) ApplyInt64(applier func(v map[string]URN) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]URN) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out URNMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out URNMapOutput) ApplyInt64Array(applier func(v map[string]URN) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out URNMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out URNMapOutput) ApplyInt64Map(applier func(v map[string]URN) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out URNMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out URNMapOutput) ApplyInt8(applier func(v map[string]URN) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]URN) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out URNMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out URNMapOutput) ApplyInt8Array(applier func(v map[string]URN) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out URNMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out URNMapOutput) ApplyInt8Map(applier func(v map[string]URN) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out URNMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out URNMapOutput) ApplyString(applier func(v map[string]URN) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]URN) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out URNMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out URNMapOutput) ApplyStringArray(applier func(v map[string]URN) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out URNMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out URNMapOutput) ApplyStringMap(applier func(v map[string]URN) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out URNMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out URNMapOutput) ApplyURN(applier func(v map[string]URN) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]URN) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out URNMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out URNMapOutput) ApplyURNArray(applier func(v map[string]URN) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out URNMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out URNMapOutput) ApplyURNMap(applier func(v map[string]URN) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out URNMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out URNMapOutput) ApplyUint(applier func(v map[string]URN) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]URN) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out URNMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out URNMapOutput) ApplyUintArray(applier func(v map[string]URN) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out URNMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out URNMapOutput) ApplyUintMap(applier func(v map[string]URN) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out URNMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out URNMapOutput) ApplyUint16(applier func(v map[string]URN) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]URN) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out URNMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out URNMapOutput) ApplyUint16Array(applier func(v map[string]URN) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out URNMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out URNMapOutput) ApplyUint16Map(applier func(v map[string]URN) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out URNMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out URNMapOutput) ApplyUint32(applier func(v map[string]URN) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]URN) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out URNMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out URNMapOutput) ApplyUint32Array(applier func(v map[string]URN) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out URNMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out URNMapOutput) ApplyUint32Map(applier func(v map[string]URN) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out URNMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out URNMapOutput) ApplyUint64(applier func(v map[string]URN) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]URN) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out URNMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out URNMapOutput) ApplyUint64Array(applier func(v map[string]URN) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out URNMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out URNMapOutput) ApplyUint64Map(applier func(v map[string]URN) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out URNMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out URNMapOutput) ApplyUint8(applier func(v map[string]URN) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]URN) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out URNMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]URN) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out URNMapOutput) ApplyUint8Array(applier func(v map[string]URN) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]URN) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out URNMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]URN) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out URNMapOutput) ApplyUint8Map(applier func(v map[string]URN) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]URN) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out URNMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]URN) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uintType = reflect.TypeOf((*uint)(nil)).Elem()

// UintInput is an input type that accepts Uint and UintOutput values.
type UintInput interface {
	Input

	// nolint: unused
	isUint()
}

// Uint is an input type for uint values.
type Uint uint

// ElementType returns the element type of this Input (uint).
func (Uint) ElementType() reflect.Type {
	return uintType
}

func (Uint) isUint() {}

// UintOutput is an Output that returns uint values.
type UintOutput OutputType

// ElementType returns the element type of this Output (uint).
func (UintOutput) ElementType() reflect.Type {
	return uintType
}

func (UintOutput) isUint() {}

// Apply applies a transformation to the uint value when it is available.
func (out UintOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint value when it is available.
func (out UintOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out UintOutput) ApplyAny(applier func(v uint) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v uint) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out UintOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, uint) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out UintOutput) ApplyAnyArray(applier func(v uint) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out UintOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out UintOutput) ApplyAnyMap(applier func(v uint) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out UintOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out UintOutput) ApplyArchive(applier func(v uint) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v uint) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out UintOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, uint) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out UintOutput) ApplyArchiveArray(applier func(v uint) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out UintOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out UintOutput) ApplyArchiveMap(applier func(v uint) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out UintOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out UintOutput) ApplyAsset(applier func(v uint) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v uint) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out UintOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, uint) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out UintOutput) ApplyAssetArray(applier func(v uint) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out UintOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out UintOutput) ApplyAssetMap(applier func(v uint) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out UintOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out UintOutput) ApplyAssetOrArchive(applier func(v uint) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v uint) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out UintOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, uint) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out UintOutput) ApplyAssetOrArchiveArray(applier func(v uint) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out UintOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out UintOutput) ApplyAssetOrArchiveMap(applier func(v uint) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out UintOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out UintOutput) ApplyBool(applier func(v uint) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v uint) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out UintOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, uint) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out UintOutput) ApplyBoolArray(applier func(v uint) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out UintOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out UintOutput) ApplyBoolMap(applier func(v uint) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out UintOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out UintOutput) ApplyFloat32(applier func(v uint) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v uint) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out UintOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, uint) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out UintOutput) ApplyFloat32Array(applier func(v uint) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out UintOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out UintOutput) ApplyFloat32Map(applier func(v uint) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out UintOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out UintOutput) ApplyFloat64(applier func(v uint) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v uint) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out UintOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, uint) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out UintOutput) ApplyFloat64Array(applier func(v uint) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out UintOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out UintOutput) ApplyFloat64Map(applier func(v uint) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out UintOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out UintOutput) ApplyID(applier func(v uint) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v uint) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out UintOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, uint) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out UintOutput) ApplyIDArray(applier func(v uint) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out UintOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out UintOutput) ApplyIDMap(applier func(v uint) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out UintOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out UintOutput) ApplyInt(applier func(v uint) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v uint) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out UintOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, uint) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out UintOutput) ApplyIntArray(applier func(v uint) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out UintOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out UintOutput) ApplyIntMap(applier func(v uint) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out UintOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out UintOutput) ApplyInt16(applier func(v uint) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v uint) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out UintOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, uint) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out UintOutput) ApplyInt16Array(applier func(v uint) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out UintOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out UintOutput) ApplyInt16Map(applier func(v uint) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out UintOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out UintOutput) ApplyInt32(applier func(v uint) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v uint) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out UintOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, uint) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out UintOutput) ApplyInt32Array(applier func(v uint) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out UintOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out UintOutput) ApplyInt32Map(applier func(v uint) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out UintOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out UintOutput) ApplyInt64(applier func(v uint) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v uint) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out UintOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, uint) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out UintOutput) ApplyInt64Array(applier func(v uint) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out UintOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out UintOutput) ApplyInt64Map(applier func(v uint) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out UintOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out UintOutput) ApplyInt8(applier func(v uint) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v uint) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out UintOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, uint) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out UintOutput) ApplyInt8Array(applier func(v uint) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out UintOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out UintOutput) ApplyInt8Map(applier func(v uint) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out UintOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out UintOutput) ApplyString(applier func(v uint) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v uint) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out UintOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, uint) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out UintOutput) ApplyStringArray(applier func(v uint) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out UintOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out UintOutput) ApplyStringMap(applier func(v uint) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out UintOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out UintOutput) ApplyURN(applier func(v uint) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v uint) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out UintOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, uint) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out UintOutput) ApplyURNArray(applier func(v uint) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out UintOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out UintOutput) ApplyURNMap(applier func(v uint) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out UintOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out UintOutput) ApplyUint(applier func(v uint) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v uint) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out UintOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, uint) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out UintOutput) ApplyUintArray(applier func(v uint) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out UintOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out UintOutput) ApplyUintMap(applier func(v uint) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out UintOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out UintOutput) ApplyUint16(applier func(v uint) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v uint) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out UintOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, uint) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out UintOutput) ApplyUint16Array(applier func(v uint) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out UintOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out UintOutput) ApplyUint16Map(applier func(v uint) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out UintOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out UintOutput) ApplyUint32(applier func(v uint) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v uint) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out UintOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, uint) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out UintOutput) ApplyUint32Array(applier func(v uint) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out UintOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out UintOutput) ApplyUint32Map(applier func(v uint) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out UintOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out UintOutput) ApplyUint64(applier func(v uint) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v uint) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out UintOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, uint) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out UintOutput) ApplyUint64Array(applier func(v uint) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out UintOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out UintOutput) ApplyUint64Map(applier func(v uint) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out UintOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out UintOutput) ApplyUint8(applier func(v uint) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v uint) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out UintOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, uint) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out UintOutput) ApplyUint8Array(applier func(v uint) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v uint) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out UintOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, uint) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out UintOutput) ApplyUint8Map(applier func(v uint) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v uint) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out UintOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, uint) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uintarrayType = reflect.TypeOf((*[]uint)(nil)).Elem()

// UintArrayInput is an input type that accepts UintArray and UintArrayOutput values.
type UintArrayInput interface {
	Input

	// nolint: unused
	isUintArray()
}

// UintArray is an input type for []uint values.
type UintArray []uint

// ElementType returns the element type of this Input ([]uint).
func (UintArray) ElementType() reflect.Type {
	return uintarrayType
}

func (UintArray) isUintArray() {}

// UintArrayOutput is an Output that returns []uint values.
type UintArrayOutput OutputType

// ElementType returns the element type of this Output ([]uint).
func (UintArrayOutput) ElementType() reflect.Type {
	return uintarrayType
}

func (UintArrayOutput) isUintArray() {}

// Apply applies a transformation to the uintarray value when it is available.
func (out UintArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uintarray value when it is available.
func (out UintArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out UintArrayOutput) ApplyAny(applier func(v []uint) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []uint) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out UintArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []uint) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out UintArrayOutput) ApplyAnyArray(applier func(v []uint) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out UintArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out UintArrayOutput) ApplyAnyMap(applier func(v []uint) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out UintArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out UintArrayOutput) ApplyArchive(applier func(v []uint) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []uint) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out UintArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []uint) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out UintArrayOutput) ApplyArchiveArray(applier func(v []uint) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out UintArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out UintArrayOutput) ApplyArchiveMap(applier func(v []uint) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out UintArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out UintArrayOutput) ApplyAsset(applier func(v []uint) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []uint) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out UintArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []uint) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out UintArrayOutput) ApplyAssetArray(applier func(v []uint) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out UintArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out UintArrayOutput) ApplyAssetMap(applier func(v []uint) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out UintArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out UintArrayOutput) ApplyAssetOrArchive(applier func(v []uint) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []uint) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out UintArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []uint) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out UintArrayOutput) ApplyAssetOrArchiveArray(applier func(v []uint) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out UintArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out UintArrayOutput) ApplyAssetOrArchiveMap(applier func(v []uint) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out UintArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out UintArrayOutput) ApplyBool(applier func(v []uint) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []uint) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out UintArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []uint) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out UintArrayOutput) ApplyBoolArray(applier func(v []uint) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out UintArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out UintArrayOutput) ApplyBoolMap(applier func(v []uint) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out UintArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out UintArrayOutput) ApplyFloat32(applier func(v []uint) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []uint) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out UintArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []uint) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out UintArrayOutput) ApplyFloat32Array(applier func(v []uint) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out UintArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out UintArrayOutput) ApplyFloat32Map(applier func(v []uint) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out UintArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out UintArrayOutput) ApplyFloat64(applier func(v []uint) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []uint) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out UintArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []uint) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out UintArrayOutput) ApplyFloat64Array(applier func(v []uint) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out UintArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out UintArrayOutput) ApplyFloat64Map(applier func(v []uint) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out UintArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out UintArrayOutput) ApplyID(applier func(v []uint) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []uint) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out UintArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []uint) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out UintArrayOutput) ApplyIDArray(applier func(v []uint) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out UintArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out UintArrayOutput) ApplyIDMap(applier func(v []uint) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out UintArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out UintArrayOutput) ApplyInt(applier func(v []uint) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []uint) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out UintArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []uint) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out UintArrayOutput) ApplyIntArray(applier func(v []uint) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out UintArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out UintArrayOutput) ApplyIntMap(applier func(v []uint) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out UintArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out UintArrayOutput) ApplyInt16(applier func(v []uint) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []uint) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out UintArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []uint) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out UintArrayOutput) ApplyInt16Array(applier func(v []uint) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out UintArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out UintArrayOutput) ApplyInt16Map(applier func(v []uint) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out UintArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out UintArrayOutput) ApplyInt32(applier func(v []uint) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []uint) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out UintArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []uint) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out UintArrayOutput) ApplyInt32Array(applier func(v []uint) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out UintArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out UintArrayOutput) ApplyInt32Map(applier func(v []uint) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out UintArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out UintArrayOutput) ApplyInt64(applier func(v []uint) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []uint) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out UintArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []uint) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out UintArrayOutput) ApplyInt64Array(applier func(v []uint) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out UintArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out UintArrayOutput) ApplyInt64Map(applier func(v []uint) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out UintArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out UintArrayOutput) ApplyInt8(applier func(v []uint) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []uint) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out UintArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []uint) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out UintArrayOutput) ApplyInt8Array(applier func(v []uint) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out UintArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out UintArrayOutput) ApplyInt8Map(applier func(v []uint) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out UintArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out UintArrayOutput) ApplyString(applier func(v []uint) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []uint) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out UintArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []uint) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out UintArrayOutput) ApplyStringArray(applier func(v []uint) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out UintArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out UintArrayOutput) ApplyStringMap(applier func(v []uint) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out UintArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out UintArrayOutput) ApplyURN(applier func(v []uint) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []uint) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out UintArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []uint) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out UintArrayOutput) ApplyURNArray(applier func(v []uint) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out UintArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out UintArrayOutput) ApplyURNMap(applier func(v []uint) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out UintArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out UintArrayOutput) ApplyUint(applier func(v []uint) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []uint) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out UintArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []uint) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out UintArrayOutput) ApplyUintArray(applier func(v []uint) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out UintArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out UintArrayOutput) ApplyUintMap(applier func(v []uint) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out UintArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out UintArrayOutput) ApplyUint16(applier func(v []uint) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []uint) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out UintArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []uint) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out UintArrayOutput) ApplyUint16Array(applier func(v []uint) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out UintArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out UintArrayOutput) ApplyUint16Map(applier func(v []uint) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out UintArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out UintArrayOutput) ApplyUint32(applier func(v []uint) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []uint) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out UintArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []uint) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out UintArrayOutput) ApplyUint32Array(applier func(v []uint) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out UintArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out UintArrayOutput) ApplyUint32Map(applier func(v []uint) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out UintArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out UintArrayOutput) ApplyUint64(applier func(v []uint) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []uint) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out UintArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []uint) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out UintArrayOutput) ApplyUint64Array(applier func(v []uint) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out UintArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out UintArrayOutput) ApplyUint64Map(applier func(v []uint) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out UintArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out UintArrayOutput) ApplyUint8(applier func(v []uint) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []uint) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out UintArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []uint) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out UintArrayOutput) ApplyUint8Array(applier func(v []uint) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []uint) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out UintArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out UintArrayOutput) ApplyUint8Map(applier func(v []uint) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []uint) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out UintArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []uint) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uintmapType = reflect.TypeOf((*map[string]uint)(nil)).Elem()

// UintMapInput is an input type that accepts UintMap and UintMapOutput values.
type UintMapInput interface {
	Input

	// nolint: unused
	isUintMap()
}

// UintMap is an input type for map[string]uint values.
type UintMap map[string]uint

// ElementType returns the element type of this Input (map[string]uint).
func (UintMap) ElementType() reflect.Type {
	return uintmapType
}

func (UintMap) isUintMap() {}

// UintMapOutput is an Output that returns map[string]uint values.
type UintMapOutput OutputType

// ElementType returns the element type of this Output (map[string]uint).
func (UintMapOutput) ElementType() reflect.Type {
	return uintmapType
}

func (UintMapOutput) isUintMap() {}

// Apply applies a transformation to the uintmap value when it is available.
func (out UintMapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uintmap value when it is available.
func (out UintMapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out UintMapOutput) ApplyAny(applier func(v map[string]uint) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]uint) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out UintMapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out UintMapOutput) ApplyAnyArray(applier func(v map[string]uint) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out UintMapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out UintMapOutput) ApplyAnyMap(applier func(v map[string]uint) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out UintMapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out UintMapOutput) ApplyArchive(applier func(v map[string]uint) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out UintMapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out UintMapOutput) ApplyArchiveArray(applier func(v map[string]uint) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out UintMapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out UintMapOutput) ApplyArchiveMap(applier func(v map[string]uint) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out UintMapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out UintMapOutput) ApplyAsset(applier func(v map[string]uint) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]uint) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out UintMapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out UintMapOutput) ApplyAssetArray(applier func(v map[string]uint) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out UintMapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out UintMapOutput) ApplyAssetMap(applier func(v map[string]uint) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out UintMapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out UintMapOutput) ApplyAssetOrArchive(applier func(v map[string]uint) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out UintMapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out UintMapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]uint) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out UintMapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out UintMapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]uint) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out UintMapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out UintMapOutput) ApplyBool(applier func(v map[string]uint) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]uint) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out UintMapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out UintMapOutput) ApplyBoolArray(applier func(v map[string]uint) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out UintMapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out UintMapOutput) ApplyBoolMap(applier func(v map[string]uint) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out UintMapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out UintMapOutput) ApplyFloat32(applier func(v map[string]uint) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]uint) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out UintMapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out UintMapOutput) ApplyFloat32Array(applier func(v map[string]uint) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out UintMapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out UintMapOutput) ApplyFloat32Map(applier func(v map[string]uint) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out UintMapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out UintMapOutput) ApplyFloat64(applier func(v map[string]uint) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]uint) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out UintMapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out UintMapOutput) ApplyFloat64Array(applier func(v map[string]uint) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out UintMapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out UintMapOutput) ApplyFloat64Map(applier func(v map[string]uint) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out UintMapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out UintMapOutput) ApplyID(applier func(v map[string]uint) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]uint) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out UintMapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out UintMapOutput) ApplyIDArray(applier func(v map[string]uint) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out UintMapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out UintMapOutput) ApplyIDMap(applier func(v map[string]uint) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out UintMapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out UintMapOutput) ApplyInt(applier func(v map[string]uint) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]uint) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out UintMapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out UintMapOutput) ApplyIntArray(applier func(v map[string]uint) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out UintMapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out UintMapOutput) ApplyIntMap(applier func(v map[string]uint) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out UintMapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out UintMapOutput) ApplyInt16(applier func(v map[string]uint) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]uint) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out UintMapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out UintMapOutput) ApplyInt16Array(applier func(v map[string]uint) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out UintMapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out UintMapOutput) ApplyInt16Map(applier func(v map[string]uint) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out UintMapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out UintMapOutput) ApplyInt32(applier func(v map[string]uint) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]uint) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out UintMapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out UintMapOutput) ApplyInt32Array(applier func(v map[string]uint) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out UintMapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out UintMapOutput) ApplyInt32Map(applier func(v map[string]uint) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out UintMapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out UintMapOutput) ApplyInt64(applier func(v map[string]uint) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]uint) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out UintMapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out UintMapOutput) ApplyInt64Array(applier func(v map[string]uint) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out UintMapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out UintMapOutput) ApplyInt64Map(applier func(v map[string]uint) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out UintMapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out UintMapOutput) ApplyInt8(applier func(v map[string]uint) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]uint) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out UintMapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out UintMapOutput) ApplyInt8Array(applier func(v map[string]uint) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out UintMapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out UintMapOutput) ApplyInt8Map(applier func(v map[string]uint) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out UintMapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out UintMapOutput) ApplyString(applier func(v map[string]uint) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]uint) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out UintMapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out UintMapOutput) ApplyStringArray(applier func(v map[string]uint) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out UintMapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out UintMapOutput) ApplyStringMap(applier func(v map[string]uint) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out UintMapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out UintMapOutput) ApplyURN(applier func(v map[string]uint) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]uint) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out UintMapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out UintMapOutput) ApplyURNArray(applier func(v map[string]uint) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out UintMapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out UintMapOutput) ApplyURNMap(applier func(v map[string]uint) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out UintMapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out UintMapOutput) ApplyUint(applier func(v map[string]uint) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]uint) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out UintMapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out UintMapOutput) ApplyUintArray(applier func(v map[string]uint) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out UintMapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out UintMapOutput) ApplyUintMap(applier func(v map[string]uint) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out UintMapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out UintMapOutput) ApplyUint16(applier func(v map[string]uint) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]uint) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out UintMapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out UintMapOutput) ApplyUint16Array(applier func(v map[string]uint) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out UintMapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out UintMapOutput) ApplyUint16Map(applier func(v map[string]uint) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out UintMapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out UintMapOutput) ApplyUint32(applier func(v map[string]uint) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]uint) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out UintMapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out UintMapOutput) ApplyUint32Array(applier func(v map[string]uint) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out UintMapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out UintMapOutput) ApplyUint32Map(applier func(v map[string]uint) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out UintMapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out UintMapOutput) ApplyUint64(applier func(v map[string]uint) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]uint) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out UintMapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out UintMapOutput) ApplyUint64Array(applier func(v map[string]uint) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out UintMapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out UintMapOutput) ApplyUint64Map(applier func(v map[string]uint) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out UintMapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out UintMapOutput) ApplyUint8(applier func(v map[string]uint) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]uint) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out UintMapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]uint) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out UintMapOutput) ApplyUint8Array(applier func(v map[string]uint) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out UintMapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out UintMapOutput) ApplyUint8Map(applier func(v map[string]uint) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out UintMapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint16Type = reflect.TypeOf((*uint16)(nil)).Elem()

// Uint16Input is an input type that accepts Uint16 and Uint16Output values.
type Uint16Input interface {
	Input

	// nolint: unused
	isUint16()
}

// Uint16 is an input type for uint16 values.
type Uint16 uint16

// ElementType returns the element type of this Input (uint16).
func (Uint16) ElementType() reflect.Type {
	return uint16Type
}

func (Uint16) isUint16() {}

// Uint16Output is an Output that returns uint16 values.
type Uint16Output OutputType

// ElementType returns the element type of this Output (uint16).
func (Uint16Output) ElementType() reflect.Type {
	return uint16Type
}

func (Uint16Output) isUint16() {}

// Apply applies a transformation to the uint16 value when it is available.
func (out Uint16Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint16 value when it is available.
func (out Uint16Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint16Output) ApplyAny(applier func(v uint16) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v uint16) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint16Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, uint16) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint16Output) ApplyAnyArray(applier func(v uint16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint16Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint16Output) ApplyAnyMap(applier func(v uint16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint16Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint16Output) ApplyArchive(applier func(v uint16) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v uint16) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint16Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, uint16) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint16Output) ApplyArchiveArray(applier func(v uint16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint16Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint16Output) ApplyArchiveMap(applier func(v uint16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint16Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint16Output) ApplyAsset(applier func(v uint16) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v uint16) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint16Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, uint16) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint16Output) ApplyAssetArray(applier func(v uint16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint16Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint16Output) ApplyAssetMap(applier func(v uint16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint16Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint16Output) ApplyAssetOrArchive(applier func(v uint16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v uint16) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint16Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, uint16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint16Output) ApplyAssetOrArchiveArray(applier func(v uint16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint16Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint16Output) ApplyAssetOrArchiveMap(applier func(v uint16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint16Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint16Output) ApplyBool(applier func(v uint16) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v uint16) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint16Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, uint16) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint16Output) ApplyBoolArray(applier func(v uint16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint16Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint16Output) ApplyBoolMap(applier func(v uint16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint16Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint16Output) ApplyFloat32(applier func(v uint16) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v uint16) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint16Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, uint16) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint16Output) ApplyFloat32Array(applier func(v uint16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint16Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint16Output) ApplyFloat32Map(applier func(v uint16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint16Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint16Output) ApplyFloat64(applier func(v uint16) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v uint16) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint16Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, uint16) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint16Output) ApplyFloat64Array(applier func(v uint16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint16Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint16Output) ApplyFloat64Map(applier func(v uint16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint16Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint16Output) ApplyID(applier func(v uint16) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v uint16) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint16Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, uint16) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint16Output) ApplyIDArray(applier func(v uint16) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint16Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint16Output) ApplyIDMap(applier func(v uint16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint16Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint16Output) ApplyInt(applier func(v uint16) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v uint16) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint16Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, uint16) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint16Output) ApplyIntArray(applier func(v uint16) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint16Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint16Output) ApplyIntMap(applier func(v uint16) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint16Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint16Output) ApplyInt16(applier func(v uint16) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v uint16) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint16Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, uint16) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint16Output) ApplyInt16Array(applier func(v uint16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint16Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint16Output) ApplyInt16Map(applier func(v uint16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint16Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint16Output) ApplyInt32(applier func(v uint16) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v uint16) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint16Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, uint16) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint16Output) ApplyInt32Array(applier func(v uint16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint16Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint16Output) ApplyInt32Map(applier func(v uint16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint16Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint16Output) ApplyInt64(applier func(v uint16) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v uint16) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint16Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, uint16) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint16Output) ApplyInt64Array(applier func(v uint16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint16Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint16Output) ApplyInt64Map(applier func(v uint16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint16Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint16Output) ApplyInt8(applier func(v uint16) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v uint16) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint16Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, uint16) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint16Output) ApplyInt8Array(applier func(v uint16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint16Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint16Output) ApplyInt8Map(applier func(v uint16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint16Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint16Output) ApplyString(applier func(v uint16) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v uint16) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint16Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, uint16) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint16Output) ApplyStringArray(applier func(v uint16) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint16Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint16Output) ApplyStringMap(applier func(v uint16) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint16Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint16Output) ApplyURN(applier func(v uint16) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v uint16) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint16Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, uint16) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint16Output) ApplyURNArray(applier func(v uint16) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint16Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint16Output) ApplyURNMap(applier func(v uint16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint16Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint16Output) ApplyUint(applier func(v uint16) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v uint16) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint16Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, uint16) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint16Output) ApplyUintArray(applier func(v uint16) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint16Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint16Output) ApplyUintMap(applier func(v uint16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint16Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint16Output) ApplyUint16(applier func(v uint16) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v uint16) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint16Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, uint16) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint16Output) ApplyUint16Array(applier func(v uint16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint16Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint16Output) ApplyUint16Map(applier func(v uint16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint16Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint16Output) ApplyUint32(applier func(v uint16) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v uint16) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint16Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, uint16) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint16Output) ApplyUint32Array(applier func(v uint16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint16Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint16Output) ApplyUint32Map(applier func(v uint16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint16Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint16Output) ApplyUint64(applier func(v uint16) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v uint16) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint16Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, uint16) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint16Output) ApplyUint64Array(applier func(v uint16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint16Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint16Output) ApplyUint64Map(applier func(v uint16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint16Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint16Output) ApplyUint8(applier func(v uint16) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v uint16) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint16Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, uint16) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint16Output) ApplyUint8Array(applier func(v uint16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v uint16) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint16Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, uint16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint16Output) ApplyUint8Map(applier func(v uint16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v uint16) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint16Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, uint16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint16arrayType = reflect.TypeOf((*[]uint16)(nil)).Elem()

// Uint16ArrayInput is an input type that accepts Uint16Array and Uint16ArrayOutput values.
type Uint16ArrayInput interface {
	Input

	// nolint: unused
	isUint16Array()
}

// Uint16Array is an input type for []uint16 values.
type Uint16Array []uint16

// ElementType returns the element type of this Input ([]uint16).
func (Uint16Array) ElementType() reflect.Type {
	return uint16arrayType
}

func (Uint16Array) isUint16Array() {}

// Uint16ArrayOutput is an Output that returns []uint16 values.
type Uint16ArrayOutput OutputType

// ElementType returns the element type of this Output ([]uint16).
func (Uint16ArrayOutput) ElementType() reflect.Type {
	return uint16arrayType
}

func (Uint16ArrayOutput) isUint16Array() {}

// Apply applies a transformation to the uint16array value when it is available.
func (out Uint16ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint16array value when it is available.
func (out Uint16ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint16ArrayOutput) ApplyAny(applier func(v []uint16) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []uint16) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint16ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []uint16) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint16ArrayOutput) ApplyAnyArray(applier func(v []uint16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint16ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint16ArrayOutput) ApplyAnyMap(applier func(v []uint16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint16ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint16ArrayOutput) ApplyArchive(applier func(v []uint16) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []uint16) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint16ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []uint16) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint16ArrayOutput) ApplyArchiveArray(applier func(v []uint16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint16ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint16ArrayOutput) ApplyArchiveMap(applier func(v []uint16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint16ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint16ArrayOutput) ApplyAsset(applier func(v []uint16) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []uint16) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint16ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []uint16) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint16ArrayOutput) ApplyAssetArray(applier func(v []uint16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint16ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint16ArrayOutput) ApplyAssetMap(applier func(v []uint16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint16ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint16ArrayOutput) ApplyAssetOrArchive(applier func(v []uint16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []uint16) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint16ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []uint16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint16ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []uint16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint16ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint16ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []uint16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint16ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint16ArrayOutput) ApplyBool(applier func(v []uint16) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []uint16) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint16ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []uint16) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint16ArrayOutput) ApplyBoolArray(applier func(v []uint16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint16ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint16ArrayOutput) ApplyBoolMap(applier func(v []uint16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint16ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint16ArrayOutput) ApplyFloat32(applier func(v []uint16) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []uint16) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint16ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []uint16) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint16ArrayOutput) ApplyFloat32Array(applier func(v []uint16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint16ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint16ArrayOutput) ApplyFloat32Map(applier func(v []uint16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint16ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint16ArrayOutput) ApplyFloat64(applier func(v []uint16) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []uint16) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint16ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []uint16) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint16ArrayOutput) ApplyFloat64Array(applier func(v []uint16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint16ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint16ArrayOutput) ApplyFloat64Map(applier func(v []uint16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint16ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint16ArrayOutput) ApplyID(applier func(v []uint16) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []uint16) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint16ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []uint16) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint16ArrayOutput) ApplyIDArray(applier func(v []uint16) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint16ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint16ArrayOutput) ApplyIDMap(applier func(v []uint16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint16ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint16ArrayOutput) ApplyInt(applier func(v []uint16) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []uint16) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint16ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []uint16) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint16ArrayOutput) ApplyIntArray(applier func(v []uint16) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint16ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint16ArrayOutput) ApplyIntMap(applier func(v []uint16) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint16ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint16ArrayOutput) ApplyInt16(applier func(v []uint16) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []uint16) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint16ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []uint16) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint16ArrayOutput) ApplyInt16Array(applier func(v []uint16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint16ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint16ArrayOutput) ApplyInt16Map(applier func(v []uint16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint16ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint16ArrayOutput) ApplyInt32(applier func(v []uint16) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []uint16) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint16ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []uint16) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint16ArrayOutput) ApplyInt32Array(applier func(v []uint16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint16ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint16ArrayOutput) ApplyInt32Map(applier func(v []uint16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint16ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint16ArrayOutput) ApplyInt64(applier func(v []uint16) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []uint16) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint16ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []uint16) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint16ArrayOutput) ApplyInt64Array(applier func(v []uint16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint16ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint16ArrayOutput) ApplyInt64Map(applier func(v []uint16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint16ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint16ArrayOutput) ApplyInt8(applier func(v []uint16) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []uint16) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint16ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []uint16) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint16ArrayOutput) ApplyInt8Array(applier func(v []uint16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint16ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint16ArrayOutput) ApplyInt8Map(applier func(v []uint16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint16ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint16ArrayOutput) ApplyString(applier func(v []uint16) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []uint16) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint16ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []uint16) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint16ArrayOutput) ApplyStringArray(applier func(v []uint16) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint16ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint16ArrayOutput) ApplyStringMap(applier func(v []uint16) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint16ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint16ArrayOutput) ApplyURN(applier func(v []uint16) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []uint16) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint16ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []uint16) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint16ArrayOutput) ApplyURNArray(applier func(v []uint16) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint16ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint16ArrayOutput) ApplyURNMap(applier func(v []uint16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint16ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint16ArrayOutput) ApplyUint(applier func(v []uint16) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []uint16) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint16ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []uint16) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint16ArrayOutput) ApplyUintArray(applier func(v []uint16) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint16ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint16ArrayOutput) ApplyUintMap(applier func(v []uint16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint16ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint16ArrayOutput) ApplyUint16(applier func(v []uint16) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []uint16) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint16ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []uint16) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint16ArrayOutput) ApplyUint16Array(applier func(v []uint16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint16ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint16ArrayOutput) ApplyUint16Map(applier func(v []uint16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint16ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint16ArrayOutput) ApplyUint32(applier func(v []uint16) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []uint16) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint16ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []uint16) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint16ArrayOutput) ApplyUint32Array(applier func(v []uint16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint16ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint16ArrayOutput) ApplyUint32Map(applier func(v []uint16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint16ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint16ArrayOutput) ApplyUint64(applier func(v []uint16) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []uint16) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint16ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []uint16) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint16ArrayOutput) ApplyUint64Array(applier func(v []uint16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint16ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint16ArrayOutput) ApplyUint64Map(applier func(v []uint16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint16ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint16ArrayOutput) ApplyUint8(applier func(v []uint16) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []uint16) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint16ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []uint16) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint16ArrayOutput) ApplyUint8Array(applier func(v []uint16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []uint16) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint16ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint16ArrayOutput) ApplyUint8Map(applier func(v []uint16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []uint16) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint16ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []uint16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint16mapType = reflect.TypeOf((*map[string]uint16)(nil)).Elem()

// Uint16MapInput is an input type that accepts Uint16Map and Uint16MapOutput values.
type Uint16MapInput interface {
	Input

	// nolint: unused
	isUint16Map()
}

// Uint16Map is an input type for map[string]uint16 values.
type Uint16Map map[string]uint16

// ElementType returns the element type of this Input (map[string]uint16).
func (Uint16Map) ElementType() reflect.Type {
	return uint16mapType
}

func (Uint16Map) isUint16Map() {}

// Uint16MapOutput is an Output that returns map[string]uint16 values.
type Uint16MapOutput OutputType

// ElementType returns the element type of this Output (map[string]uint16).
func (Uint16MapOutput) ElementType() reflect.Type {
	return uint16mapType
}

func (Uint16MapOutput) isUint16Map() {}

// Apply applies a transformation to the uint16map value when it is available.
func (out Uint16MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint16map value when it is available.
func (out Uint16MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint16MapOutput) ApplyAny(applier func(v map[string]uint16) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint16MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint16MapOutput) ApplyAnyArray(applier func(v map[string]uint16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint16MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint16MapOutput) ApplyAnyMap(applier func(v map[string]uint16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint16MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint16MapOutput) ApplyArchive(applier func(v map[string]uint16) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint16MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint16MapOutput) ApplyArchiveArray(applier func(v map[string]uint16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint16MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint16MapOutput) ApplyArchiveMap(applier func(v map[string]uint16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint16MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint16MapOutput) ApplyAsset(applier func(v map[string]uint16) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint16MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint16MapOutput) ApplyAssetArray(applier func(v map[string]uint16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint16MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint16MapOutput) ApplyAssetMap(applier func(v map[string]uint16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint16MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint16MapOutput) ApplyAssetOrArchive(applier func(v map[string]uint16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint16MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint16MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]uint16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint16MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint16MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]uint16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint16MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint16MapOutput) ApplyBool(applier func(v map[string]uint16) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint16MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint16MapOutput) ApplyBoolArray(applier func(v map[string]uint16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint16MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint16MapOutput) ApplyBoolMap(applier func(v map[string]uint16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint16MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint16MapOutput) ApplyFloat32(applier func(v map[string]uint16) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint16MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint16MapOutput) ApplyFloat32Array(applier func(v map[string]uint16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint16MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint16MapOutput) ApplyFloat32Map(applier func(v map[string]uint16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint16MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint16MapOutput) ApplyFloat64(applier func(v map[string]uint16) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint16MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint16MapOutput) ApplyFloat64Array(applier func(v map[string]uint16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint16MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint16MapOutput) ApplyFloat64Map(applier func(v map[string]uint16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint16MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint16MapOutput) ApplyID(applier func(v map[string]uint16) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint16MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint16MapOutput) ApplyIDArray(applier func(v map[string]uint16) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint16MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint16MapOutput) ApplyIDMap(applier func(v map[string]uint16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint16MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint16MapOutput) ApplyInt(applier func(v map[string]uint16) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint16MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint16MapOutput) ApplyIntArray(applier func(v map[string]uint16) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint16MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint16MapOutput) ApplyIntMap(applier func(v map[string]uint16) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint16MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint16MapOutput) ApplyInt16(applier func(v map[string]uint16) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint16MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint16MapOutput) ApplyInt16Array(applier func(v map[string]uint16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint16MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint16MapOutput) ApplyInt16Map(applier func(v map[string]uint16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint16MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint16MapOutput) ApplyInt32(applier func(v map[string]uint16) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint16MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint16MapOutput) ApplyInt32Array(applier func(v map[string]uint16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint16MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint16MapOutput) ApplyInt32Map(applier func(v map[string]uint16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint16MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint16MapOutput) ApplyInt64(applier func(v map[string]uint16) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint16MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint16MapOutput) ApplyInt64Array(applier func(v map[string]uint16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint16MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint16MapOutput) ApplyInt64Map(applier func(v map[string]uint16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint16MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint16MapOutput) ApplyInt8(applier func(v map[string]uint16) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint16MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint16MapOutput) ApplyInt8Array(applier func(v map[string]uint16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint16MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint16MapOutput) ApplyInt8Map(applier func(v map[string]uint16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint16MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint16MapOutput) ApplyString(applier func(v map[string]uint16) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint16MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint16MapOutput) ApplyStringArray(applier func(v map[string]uint16) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint16MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint16MapOutput) ApplyStringMap(applier func(v map[string]uint16) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint16MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint16MapOutput) ApplyURN(applier func(v map[string]uint16) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint16MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint16MapOutput) ApplyURNArray(applier func(v map[string]uint16) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint16MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint16MapOutput) ApplyURNMap(applier func(v map[string]uint16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint16MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint16MapOutput) ApplyUint(applier func(v map[string]uint16) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint16MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint16MapOutput) ApplyUintArray(applier func(v map[string]uint16) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint16MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint16MapOutput) ApplyUintMap(applier func(v map[string]uint16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint16MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint16MapOutput) ApplyUint16(applier func(v map[string]uint16) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint16MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint16MapOutput) ApplyUint16Array(applier func(v map[string]uint16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint16MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint16MapOutput) ApplyUint16Map(applier func(v map[string]uint16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint16MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint16MapOutput) ApplyUint32(applier func(v map[string]uint16) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint16MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint16MapOutput) ApplyUint32Array(applier func(v map[string]uint16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint16MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint16MapOutput) ApplyUint32Map(applier func(v map[string]uint16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint16MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint16MapOutput) ApplyUint64(applier func(v map[string]uint16) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint16MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint16MapOutput) ApplyUint64Array(applier func(v map[string]uint16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint16MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint16MapOutput) ApplyUint64Map(applier func(v map[string]uint16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint16MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint16MapOutput) ApplyUint8(applier func(v map[string]uint16) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]uint16) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint16MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint16MapOutput) ApplyUint8Array(applier func(v map[string]uint16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint16) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint16MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint16MapOutput) ApplyUint8Map(applier func(v map[string]uint16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint16) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint16MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint16) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint32Type = reflect.TypeOf((*uint32)(nil)).Elem()

// Uint32Input is an input type that accepts Uint32 and Uint32Output values.
type Uint32Input interface {
	Input

	// nolint: unused
	isUint32()
}

// Uint32 is an input type for uint32 values.
type Uint32 uint32

// ElementType returns the element type of this Input (uint32).
func (Uint32) ElementType() reflect.Type {
	return uint32Type
}

func (Uint32) isUint32() {}

// Uint32Output is an Output that returns uint32 values.
type Uint32Output OutputType

// ElementType returns the element type of this Output (uint32).
func (Uint32Output) ElementType() reflect.Type {
	return uint32Type
}

func (Uint32Output) isUint32() {}

// Apply applies a transformation to the uint32 value when it is available.
func (out Uint32Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint32 value when it is available.
func (out Uint32Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint32Output) ApplyAny(applier func(v uint32) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v uint32) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint32Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, uint32) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint32Output) ApplyAnyArray(applier func(v uint32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint32Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint32Output) ApplyAnyMap(applier func(v uint32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint32Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint32Output) ApplyArchive(applier func(v uint32) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v uint32) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint32Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, uint32) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint32Output) ApplyArchiveArray(applier func(v uint32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint32Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint32Output) ApplyArchiveMap(applier func(v uint32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint32Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint32Output) ApplyAsset(applier func(v uint32) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v uint32) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint32Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, uint32) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint32Output) ApplyAssetArray(applier func(v uint32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint32Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint32Output) ApplyAssetMap(applier func(v uint32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint32Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint32Output) ApplyAssetOrArchive(applier func(v uint32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v uint32) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint32Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, uint32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint32Output) ApplyAssetOrArchiveArray(applier func(v uint32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint32Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint32Output) ApplyAssetOrArchiveMap(applier func(v uint32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint32Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint32Output) ApplyBool(applier func(v uint32) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v uint32) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint32Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, uint32) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint32Output) ApplyBoolArray(applier func(v uint32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint32Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint32Output) ApplyBoolMap(applier func(v uint32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint32Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint32Output) ApplyFloat32(applier func(v uint32) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v uint32) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint32Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, uint32) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint32Output) ApplyFloat32Array(applier func(v uint32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint32Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint32Output) ApplyFloat32Map(applier func(v uint32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint32Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint32Output) ApplyFloat64(applier func(v uint32) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v uint32) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint32Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, uint32) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint32Output) ApplyFloat64Array(applier func(v uint32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint32Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint32Output) ApplyFloat64Map(applier func(v uint32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint32Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint32Output) ApplyID(applier func(v uint32) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v uint32) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint32Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, uint32) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint32Output) ApplyIDArray(applier func(v uint32) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint32Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint32Output) ApplyIDMap(applier func(v uint32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint32Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint32Output) ApplyInt(applier func(v uint32) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v uint32) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint32Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, uint32) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint32Output) ApplyIntArray(applier func(v uint32) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint32Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint32Output) ApplyIntMap(applier func(v uint32) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint32Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint32Output) ApplyInt16(applier func(v uint32) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v uint32) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint32Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, uint32) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint32Output) ApplyInt16Array(applier func(v uint32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint32Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint32Output) ApplyInt16Map(applier func(v uint32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint32Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint32Output) ApplyInt32(applier func(v uint32) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v uint32) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint32Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, uint32) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint32Output) ApplyInt32Array(applier func(v uint32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint32Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint32Output) ApplyInt32Map(applier func(v uint32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint32Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint32Output) ApplyInt64(applier func(v uint32) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v uint32) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint32Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, uint32) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint32Output) ApplyInt64Array(applier func(v uint32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint32Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint32Output) ApplyInt64Map(applier func(v uint32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint32Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint32Output) ApplyInt8(applier func(v uint32) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v uint32) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint32Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, uint32) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint32Output) ApplyInt8Array(applier func(v uint32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint32Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint32Output) ApplyInt8Map(applier func(v uint32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint32Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint32Output) ApplyString(applier func(v uint32) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v uint32) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint32Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, uint32) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint32Output) ApplyStringArray(applier func(v uint32) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint32Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint32Output) ApplyStringMap(applier func(v uint32) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint32Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint32Output) ApplyURN(applier func(v uint32) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v uint32) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint32Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, uint32) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint32Output) ApplyURNArray(applier func(v uint32) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint32Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint32Output) ApplyURNMap(applier func(v uint32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint32Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint32Output) ApplyUint(applier func(v uint32) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v uint32) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint32Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, uint32) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint32Output) ApplyUintArray(applier func(v uint32) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint32Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint32Output) ApplyUintMap(applier func(v uint32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint32Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint32Output) ApplyUint16(applier func(v uint32) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v uint32) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint32Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, uint32) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint32Output) ApplyUint16Array(applier func(v uint32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint32Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint32Output) ApplyUint16Map(applier func(v uint32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint32Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint32Output) ApplyUint32(applier func(v uint32) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v uint32) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint32Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, uint32) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint32Output) ApplyUint32Array(applier func(v uint32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint32Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint32Output) ApplyUint32Map(applier func(v uint32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint32Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint32Output) ApplyUint64(applier func(v uint32) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v uint32) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint32Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, uint32) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint32Output) ApplyUint64Array(applier func(v uint32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint32Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint32Output) ApplyUint64Map(applier func(v uint32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint32Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint32Output) ApplyUint8(applier func(v uint32) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v uint32) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint32Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, uint32) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint32Output) ApplyUint8Array(applier func(v uint32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v uint32) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint32Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, uint32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint32Output) ApplyUint8Map(applier func(v uint32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v uint32) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint32Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, uint32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint32arrayType = reflect.TypeOf((*[]uint32)(nil)).Elem()

// Uint32ArrayInput is an input type that accepts Uint32Array and Uint32ArrayOutput values.
type Uint32ArrayInput interface {
	Input

	// nolint: unused
	isUint32Array()
}

// Uint32Array is an input type for []uint32 values.
type Uint32Array []uint32

// ElementType returns the element type of this Input ([]uint32).
func (Uint32Array) ElementType() reflect.Type {
	return uint32arrayType
}

func (Uint32Array) isUint32Array() {}

// Uint32ArrayOutput is an Output that returns []uint32 values.
type Uint32ArrayOutput OutputType

// ElementType returns the element type of this Output ([]uint32).
func (Uint32ArrayOutput) ElementType() reflect.Type {
	return uint32arrayType
}

func (Uint32ArrayOutput) isUint32Array() {}

// Apply applies a transformation to the uint32array value when it is available.
func (out Uint32ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint32array value when it is available.
func (out Uint32ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint32ArrayOutput) ApplyAny(applier func(v []uint32) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []uint32) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint32ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []uint32) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint32ArrayOutput) ApplyAnyArray(applier func(v []uint32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint32ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint32ArrayOutput) ApplyAnyMap(applier func(v []uint32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint32ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint32ArrayOutput) ApplyArchive(applier func(v []uint32) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []uint32) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint32ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []uint32) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint32ArrayOutput) ApplyArchiveArray(applier func(v []uint32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint32ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint32ArrayOutput) ApplyArchiveMap(applier func(v []uint32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint32ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint32ArrayOutput) ApplyAsset(applier func(v []uint32) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []uint32) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint32ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []uint32) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint32ArrayOutput) ApplyAssetArray(applier func(v []uint32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint32ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint32ArrayOutput) ApplyAssetMap(applier func(v []uint32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint32ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint32ArrayOutput) ApplyAssetOrArchive(applier func(v []uint32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []uint32) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint32ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []uint32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint32ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []uint32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint32ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint32ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []uint32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint32ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint32ArrayOutput) ApplyBool(applier func(v []uint32) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []uint32) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint32ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []uint32) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint32ArrayOutput) ApplyBoolArray(applier func(v []uint32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint32ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint32ArrayOutput) ApplyBoolMap(applier func(v []uint32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint32ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint32ArrayOutput) ApplyFloat32(applier func(v []uint32) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []uint32) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint32ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []uint32) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint32ArrayOutput) ApplyFloat32Array(applier func(v []uint32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint32ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint32ArrayOutput) ApplyFloat32Map(applier func(v []uint32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint32ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint32ArrayOutput) ApplyFloat64(applier func(v []uint32) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []uint32) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint32ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []uint32) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint32ArrayOutput) ApplyFloat64Array(applier func(v []uint32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint32ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint32ArrayOutput) ApplyFloat64Map(applier func(v []uint32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint32ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint32ArrayOutput) ApplyID(applier func(v []uint32) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []uint32) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint32ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []uint32) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint32ArrayOutput) ApplyIDArray(applier func(v []uint32) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint32ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint32ArrayOutput) ApplyIDMap(applier func(v []uint32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint32ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint32ArrayOutput) ApplyInt(applier func(v []uint32) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []uint32) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint32ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []uint32) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint32ArrayOutput) ApplyIntArray(applier func(v []uint32) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint32ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint32ArrayOutput) ApplyIntMap(applier func(v []uint32) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint32ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint32ArrayOutput) ApplyInt16(applier func(v []uint32) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []uint32) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint32ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []uint32) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint32ArrayOutput) ApplyInt16Array(applier func(v []uint32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint32ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint32ArrayOutput) ApplyInt16Map(applier func(v []uint32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint32ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint32ArrayOutput) ApplyInt32(applier func(v []uint32) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []uint32) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint32ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []uint32) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint32ArrayOutput) ApplyInt32Array(applier func(v []uint32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint32ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint32ArrayOutput) ApplyInt32Map(applier func(v []uint32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint32ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint32ArrayOutput) ApplyInt64(applier func(v []uint32) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []uint32) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint32ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []uint32) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint32ArrayOutput) ApplyInt64Array(applier func(v []uint32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint32ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint32ArrayOutput) ApplyInt64Map(applier func(v []uint32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint32ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint32ArrayOutput) ApplyInt8(applier func(v []uint32) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []uint32) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint32ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []uint32) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint32ArrayOutput) ApplyInt8Array(applier func(v []uint32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint32ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint32ArrayOutput) ApplyInt8Map(applier func(v []uint32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint32ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint32ArrayOutput) ApplyString(applier func(v []uint32) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []uint32) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint32ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []uint32) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint32ArrayOutput) ApplyStringArray(applier func(v []uint32) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint32ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint32ArrayOutput) ApplyStringMap(applier func(v []uint32) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint32ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint32ArrayOutput) ApplyURN(applier func(v []uint32) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []uint32) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint32ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []uint32) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint32ArrayOutput) ApplyURNArray(applier func(v []uint32) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint32ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint32ArrayOutput) ApplyURNMap(applier func(v []uint32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint32ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint32ArrayOutput) ApplyUint(applier func(v []uint32) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []uint32) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint32ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []uint32) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint32ArrayOutput) ApplyUintArray(applier func(v []uint32) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint32ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint32ArrayOutput) ApplyUintMap(applier func(v []uint32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint32ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint32ArrayOutput) ApplyUint16(applier func(v []uint32) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []uint32) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint32ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []uint32) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint32ArrayOutput) ApplyUint16Array(applier func(v []uint32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint32ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint32ArrayOutput) ApplyUint16Map(applier func(v []uint32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint32ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint32ArrayOutput) ApplyUint32(applier func(v []uint32) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []uint32) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint32ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []uint32) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint32ArrayOutput) ApplyUint32Array(applier func(v []uint32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint32ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint32ArrayOutput) ApplyUint32Map(applier func(v []uint32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint32ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint32ArrayOutput) ApplyUint64(applier func(v []uint32) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []uint32) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint32ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []uint32) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint32ArrayOutput) ApplyUint64Array(applier func(v []uint32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint32ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint32ArrayOutput) ApplyUint64Map(applier func(v []uint32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint32ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint32ArrayOutput) ApplyUint8(applier func(v []uint32) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []uint32) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint32ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []uint32) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint32ArrayOutput) ApplyUint8Array(applier func(v []uint32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []uint32) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint32ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint32ArrayOutput) ApplyUint8Map(applier func(v []uint32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []uint32) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint32ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []uint32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint32mapType = reflect.TypeOf((*map[string]uint32)(nil)).Elem()

// Uint32MapInput is an input type that accepts Uint32Map and Uint32MapOutput values.
type Uint32MapInput interface {
	Input

	// nolint: unused
	isUint32Map()
}

// Uint32Map is an input type for map[string]uint32 values.
type Uint32Map map[string]uint32

// ElementType returns the element type of this Input (map[string]uint32).
func (Uint32Map) ElementType() reflect.Type {
	return uint32mapType
}

func (Uint32Map) isUint32Map() {}

// Uint32MapOutput is an Output that returns map[string]uint32 values.
type Uint32MapOutput OutputType

// ElementType returns the element type of this Output (map[string]uint32).
func (Uint32MapOutput) ElementType() reflect.Type {
	return uint32mapType
}

func (Uint32MapOutput) isUint32Map() {}

// Apply applies a transformation to the uint32map value when it is available.
func (out Uint32MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint32map value when it is available.
func (out Uint32MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint32MapOutput) ApplyAny(applier func(v map[string]uint32) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint32MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint32MapOutput) ApplyAnyArray(applier func(v map[string]uint32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint32MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint32MapOutput) ApplyAnyMap(applier func(v map[string]uint32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint32MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint32MapOutput) ApplyArchive(applier func(v map[string]uint32) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint32MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint32MapOutput) ApplyArchiveArray(applier func(v map[string]uint32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint32MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint32MapOutput) ApplyArchiveMap(applier func(v map[string]uint32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint32MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint32MapOutput) ApplyAsset(applier func(v map[string]uint32) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint32MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint32MapOutput) ApplyAssetArray(applier func(v map[string]uint32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint32MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint32MapOutput) ApplyAssetMap(applier func(v map[string]uint32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint32MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint32MapOutput) ApplyAssetOrArchive(applier func(v map[string]uint32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint32MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint32MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]uint32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint32MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint32MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]uint32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint32MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint32MapOutput) ApplyBool(applier func(v map[string]uint32) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint32MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint32MapOutput) ApplyBoolArray(applier func(v map[string]uint32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint32MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint32MapOutput) ApplyBoolMap(applier func(v map[string]uint32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint32MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint32MapOutput) ApplyFloat32(applier func(v map[string]uint32) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint32MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint32MapOutput) ApplyFloat32Array(applier func(v map[string]uint32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint32MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint32MapOutput) ApplyFloat32Map(applier func(v map[string]uint32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint32MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint32MapOutput) ApplyFloat64(applier func(v map[string]uint32) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint32MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint32MapOutput) ApplyFloat64Array(applier func(v map[string]uint32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint32MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint32MapOutput) ApplyFloat64Map(applier func(v map[string]uint32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint32MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint32MapOutput) ApplyID(applier func(v map[string]uint32) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint32MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint32MapOutput) ApplyIDArray(applier func(v map[string]uint32) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint32MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint32MapOutput) ApplyIDMap(applier func(v map[string]uint32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint32MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint32MapOutput) ApplyInt(applier func(v map[string]uint32) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint32MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint32MapOutput) ApplyIntArray(applier func(v map[string]uint32) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint32MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint32MapOutput) ApplyIntMap(applier func(v map[string]uint32) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint32MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint32MapOutput) ApplyInt16(applier func(v map[string]uint32) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint32MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint32MapOutput) ApplyInt16Array(applier func(v map[string]uint32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint32MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint32MapOutput) ApplyInt16Map(applier func(v map[string]uint32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint32MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint32MapOutput) ApplyInt32(applier func(v map[string]uint32) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint32MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint32MapOutput) ApplyInt32Array(applier func(v map[string]uint32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint32MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint32MapOutput) ApplyInt32Map(applier func(v map[string]uint32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint32MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint32MapOutput) ApplyInt64(applier func(v map[string]uint32) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint32MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint32MapOutput) ApplyInt64Array(applier func(v map[string]uint32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint32MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint32MapOutput) ApplyInt64Map(applier func(v map[string]uint32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint32MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint32MapOutput) ApplyInt8(applier func(v map[string]uint32) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint32MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint32MapOutput) ApplyInt8Array(applier func(v map[string]uint32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint32MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint32MapOutput) ApplyInt8Map(applier func(v map[string]uint32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint32MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint32MapOutput) ApplyString(applier func(v map[string]uint32) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint32MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint32MapOutput) ApplyStringArray(applier func(v map[string]uint32) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint32MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint32MapOutput) ApplyStringMap(applier func(v map[string]uint32) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint32MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint32MapOutput) ApplyURN(applier func(v map[string]uint32) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint32MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint32MapOutput) ApplyURNArray(applier func(v map[string]uint32) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint32MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint32MapOutput) ApplyURNMap(applier func(v map[string]uint32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint32MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint32MapOutput) ApplyUint(applier func(v map[string]uint32) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint32MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint32MapOutput) ApplyUintArray(applier func(v map[string]uint32) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint32MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint32MapOutput) ApplyUintMap(applier func(v map[string]uint32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint32MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint32MapOutput) ApplyUint16(applier func(v map[string]uint32) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint32MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint32MapOutput) ApplyUint16Array(applier func(v map[string]uint32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint32MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint32MapOutput) ApplyUint16Map(applier func(v map[string]uint32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint32MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint32MapOutput) ApplyUint32(applier func(v map[string]uint32) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint32MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint32MapOutput) ApplyUint32Array(applier func(v map[string]uint32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint32MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint32MapOutput) ApplyUint32Map(applier func(v map[string]uint32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint32MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint32MapOutput) ApplyUint64(applier func(v map[string]uint32) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint32MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint32MapOutput) ApplyUint64Array(applier func(v map[string]uint32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint32MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint32MapOutput) ApplyUint64Map(applier func(v map[string]uint32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint32MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint32MapOutput) ApplyUint8(applier func(v map[string]uint32) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]uint32) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint32MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint32MapOutput) ApplyUint8Array(applier func(v map[string]uint32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint32) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint32MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint32MapOutput) ApplyUint8Map(applier func(v map[string]uint32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint32) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint32MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint32) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint64Type = reflect.TypeOf((*uint64)(nil)).Elem()

// Uint64Input is an input type that accepts Uint64 and Uint64Output values.
type Uint64Input interface {
	Input

	// nolint: unused
	isUint64()
}

// Uint64 is an input type for uint64 values.
type Uint64 uint64

// ElementType returns the element type of this Input (uint64).
func (Uint64) ElementType() reflect.Type {
	return uint64Type
}

func (Uint64) isUint64() {}

// Uint64Output is an Output that returns uint64 values.
type Uint64Output OutputType

// ElementType returns the element type of this Output (uint64).
func (Uint64Output) ElementType() reflect.Type {
	return uint64Type
}

func (Uint64Output) isUint64() {}

// Apply applies a transformation to the uint64 value when it is available.
func (out Uint64Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint64 value when it is available.
func (out Uint64Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint64Output) ApplyAny(applier func(v uint64) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v uint64) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint64Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, uint64) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint64Output) ApplyAnyArray(applier func(v uint64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint64Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint64Output) ApplyAnyMap(applier func(v uint64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint64Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint64Output) ApplyArchive(applier func(v uint64) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v uint64) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint64Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, uint64) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint64Output) ApplyArchiveArray(applier func(v uint64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint64Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint64Output) ApplyArchiveMap(applier func(v uint64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint64Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint64Output) ApplyAsset(applier func(v uint64) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v uint64) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint64Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, uint64) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint64Output) ApplyAssetArray(applier func(v uint64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint64Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint64Output) ApplyAssetMap(applier func(v uint64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint64Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint64Output) ApplyAssetOrArchive(applier func(v uint64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v uint64) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint64Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, uint64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint64Output) ApplyAssetOrArchiveArray(applier func(v uint64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint64Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint64Output) ApplyAssetOrArchiveMap(applier func(v uint64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint64Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint64Output) ApplyBool(applier func(v uint64) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v uint64) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint64Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, uint64) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint64Output) ApplyBoolArray(applier func(v uint64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint64Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint64Output) ApplyBoolMap(applier func(v uint64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint64Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint64Output) ApplyFloat32(applier func(v uint64) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v uint64) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint64Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, uint64) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint64Output) ApplyFloat32Array(applier func(v uint64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint64Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint64Output) ApplyFloat32Map(applier func(v uint64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint64Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint64Output) ApplyFloat64(applier func(v uint64) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v uint64) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint64Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, uint64) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint64Output) ApplyFloat64Array(applier func(v uint64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint64Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint64Output) ApplyFloat64Map(applier func(v uint64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint64Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint64Output) ApplyID(applier func(v uint64) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v uint64) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint64Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, uint64) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint64Output) ApplyIDArray(applier func(v uint64) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint64Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint64Output) ApplyIDMap(applier func(v uint64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint64Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint64Output) ApplyInt(applier func(v uint64) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v uint64) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint64Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, uint64) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint64Output) ApplyIntArray(applier func(v uint64) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint64Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint64Output) ApplyIntMap(applier func(v uint64) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint64Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint64Output) ApplyInt16(applier func(v uint64) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v uint64) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint64Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, uint64) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint64Output) ApplyInt16Array(applier func(v uint64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint64Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint64Output) ApplyInt16Map(applier func(v uint64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint64Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint64Output) ApplyInt32(applier func(v uint64) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v uint64) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint64Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, uint64) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint64Output) ApplyInt32Array(applier func(v uint64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint64Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint64Output) ApplyInt32Map(applier func(v uint64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint64Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint64Output) ApplyInt64(applier func(v uint64) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v uint64) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint64Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, uint64) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint64Output) ApplyInt64Array(applier func(v uint64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint64Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint64Output) ApplyInt64Map(applier func(v uint64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint64Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint64Output) ApplyInt8(applier func(v uint64) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v uint64) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint64Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, uint64) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint64Output) ApplyInt8Array(applier func(v uint64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint64Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint64Output) ApplyInt8Map(applier func(v uint64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint64Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint64Output) ApplyString(applier func(v uint64) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v uint64) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint64Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, uint64) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint64Output) ApplyStringArray(applier func(v uint64) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint64Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint64Output) ApplyStringMap(applier func(v uint64) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint64Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint64Output) ApplyURN(applier func(v uint64) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v uint64) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint64Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, uint64) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint64Output) ApplyURNArray(applier func(v uint64) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint64Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint64Output) ApplyURNMap(applier func(v uint64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint64Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint64Output) ApplyUint(applier func(v uint64) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v uint64) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint64Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, uint64) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint64Output) ApplyUintArray(applier func(v uint64) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint64Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint64Output) ApplyUintMap(applier func(v uint64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint64Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint64Output) ApplyUint16(applier func(v uint64) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v uint64) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint64Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, uint64) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint64Output) ApplyUint16Array(applier func(v uint64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint64Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint64Output) ApplyUint16Map(applier func(v uint64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint64Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint64Output) ApplyUint32(applier func(v uint64) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v uint64) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint64Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, uint64) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint64Output) ApplyUint32Array(applier func(v uint64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint64Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint64Output) ApplyUint32Map(applier func(v uint64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint64Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint64Output) ApplyUint64(applier func(v uint64) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v uint64) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint64Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, uint64) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint64Output) ApplyUint64Array(applier func(v uint64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint64Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint64Output) ApplyUint64Map(applier func(v uint64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint64Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint64Output) ApplyUint8(applier func(v uint64) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v uint64) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint64Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, uint64) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint64Output) ApplyUint8Array(applier func(v uint64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v uint64) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint64Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, uint64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint64Output) ApplyUint8Map(applier func(v uint64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v uint64) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint64Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, uint64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint64arrayType = reflect.TypeOf((*[]uint64)(nil)).Elem()

// Uint64ArrayInput is an input type that accepts Uint64Array and Uint64ArrayOutput values.
type Uint64ArrayInput interface {
	Input

	// nolint: unused
	isUint64Array()
}

// Uint64Array is an input type for []uint64 values.
type Uint64Array []uint64

// ElementType returns the element type of this Input ([]uint64).
func (Uint64Array) ElementType() reflect.Type {
	return uint64arrayType
}

func (Uint64Array) isUint64Array() {}

// Uint64ArrayOutput is an Output that returns []uint64 values.
type Uint64ArrayOutput OutputType

// ElementType returns the element type of this Output ([]uint64).
func (Uint64ArrayOutput) ElementType() reflect.Type {
	return uint64arrayType
}

func (Uint64ArrayOutput) isUint64Array() {}

// Apply applies a transformation to the uint64array value when it is available.
func (out Uint64ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint64array value when it is available.
func (out Uint64ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint64ArrayOutput) ApplyAny(applier func(v []uint64) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []uint64) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint64ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []uint64) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint64ArrayOutput) ApplyAnyArray(applier func(v []uint64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint64ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint64ArrayOutput) ApplyAnyMap(applier func(v []uint64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint64ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint64ArrayOutput) ApplyArchive(applier func(v []uint64) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []uint64) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint64ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []uint64) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint64ArrayOutput) ApplyArchiveArray(applier func(v []uint64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint64ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint64ArrayOutput) ApplyArchiveMap(applier func(v []uint64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint64ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint64ArrayOutput) ApplyAsset(applier func(v []uint64) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []uint64) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint64ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []uint64) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint64ArrayOutput) ApplyAssetArray(applier func(v []uint64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint64ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint64ArrayOutput) ApplyAssetMap(applier func(v []uint64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint64ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint64ArrayOutput) ApplyAssetOrArchive(applier func(v []uint64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []uint64) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint64ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []uint64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint64ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []uint64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint64ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint64ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []uint64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint64ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint64ArrayOutput) ApplyBool(applier func(v []uint64) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []uint64) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint64ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []uint64) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint64ArrayOutput) ApplyBoolArray(applier func(v []uint64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint64ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint64ArrayOutput) ApplyBoolMap(applier func(v []uint64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint64ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint64ArrayOutput) ApplyFloat32(applier func(v []uint64) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []uint64) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint64ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []uint64) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint64ArrayOutput) ApplyFloat32Array(applier func(v []uint64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint64ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint64ArrayOutput) ApplyFloat32Map(applier func(v []uint64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint64ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint64ArrayOutput) ApplyFloat64(applier func(v []uint64) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []uint64) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint64ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []uint64) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint64ArrayOutput) ApplyFloat64Array(applier func(v []uint64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint64ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint64ArrayOutput) ApplyFloat64Map(applier func(v []uint64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint64ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint64ArrayOutput) ApplyID(applier func(v []uint64) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []uint64) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint64ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []uint64) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint64ArrayOutput) ApplyIDArray(applier func(v []uint64) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint64ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint64ArrayOutput) ApplyIDMap(applier func(v []uint64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint64ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint64ArrayOutput) ApplyInt(applier func(v []uint64) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []uint64) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint64ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []uint64) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint64ArrayOutput) ApplyIntArray(applier func(v []uint64) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint64ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint64ArrayOutput) ApplyIntMap(applier func(v []uint64) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint64ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint64ArrayOutput) ApplyInt16(applier func(v []uint64) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []uint64) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint64ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []uint64) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint64ArrayOutput) ApplyInt16Array(applier func(v []uint64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint64ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint64ArrayOutput) ApplyInt16Map(applier func(v []uint64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint64ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint64ArrayOutput) ApplyInt32(applier func(v []uint64) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []uint64) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint64ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []uint64) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint64ArrayOutput) ApplyInt32Array(applier func(v []uint64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint64ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint64ArrayOutput) ApplyInt32Map(applier func(v []uint64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint64ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint64ArrayOutput) ApplyInt64(applier func(v []uint64) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []uint64) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint64ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []uint64) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint64ArrayOutput) ApplyInt64Array(applier func(v []uint64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint64ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint64ArrayOutput) ApplyInt64Map(applier func(v []uint64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint64ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint64ArrayOutput) ApplyInt8(applier func(v []uint64) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []uint64) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint64ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []uint64) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint64ArrayOutput) ApplyInt8Array(applier func(v []uint64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint64ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint64ArrayOutput) ApplyInt8Map(applier func(v []uint64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint64ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint64ArrayOutput) ApplyString(applier func(v []uint64) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []uint64) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint64ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []uint64) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint64ArrayOutput) ApplyStringArray(applier func(v []uint64) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint64ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint64ArrayOutput) ApplyStringMap(applier func(v []uint64) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint64ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint64ArrayOutput) ApplyURN(applier func(v []uint64) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []uint64) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint64ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []uint64) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint64ArrayOutput) ApplyURNArray(applier func(v []uint64) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint64ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint64ArrayOutput) ApplyURNMap(applier func(v []uint64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint64ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint64ArrayOutput) ApplyUint(applier func(v []uint64) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []uint64) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint64ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []uint64) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint64ArrayOutput) ApplyUintArray(applier func(v []uint64) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint64ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint64ArrayOutput) ApplyUintMap(applier func(v []uint64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint64ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint64ArrayOutput) ApplyUint16(applier func(v []uint64) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []uint64) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint64ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []uint64) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint64ArrayOutput) ApplyUint16Array(applier func(v []uint64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint64ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint64ArrayOutput) ApplyUint16Map(applier func(v []uint64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint64ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint64ArrayOutput) ApplyUint32(applier func(v []uint64) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []uint64) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint64ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []uint64) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint64ArrayOutput) ApplyUint32Array(applier func(v []uint64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint64ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint64ArrayOutput) ApplyUint32Map(applier func(v []uint64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint64ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint64ArrayOutput) ApplyUint64(applier func(v []uint64) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []uint64) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint64ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []uint64) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint64ArrayOutput) ApplyUint64Array(applier func(v []uint64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint64ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint64ArrayOutput) ApplyUint64Map(applier func(v []uint64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint64ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint64ArrayOutput) ApplyUint8(applier func(v []uint64) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []uint64) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint64ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []uint64) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint64ArrayOutput) ApplyUint8Array(applier func(v []uint64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []uint64) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint64ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint64ArrayOutput) ApplyUint8Map(applier func(v []uint64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []uint64) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint64ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []uint64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint64mapType = reflect.TypeOf((*map[string]uint64)(nil)).Elem()

// Uint64MapInput is an input type that accepts Uint64Map and Uint64MapOutput values.
type Uint64MapInput interface {
	Input

	// nolint: unused
	isUint64Map()
}

// Uint64Map is an input type for map[string]uint64 values.
type Uint64Map map[string]uint64

// ElementType returns the element type of this Input (map[string]uint64).
func (Uint64Map) ElementType() reflect.Type {
	return uint64mapType
}

func (Uint64Map) isUint64Map() {}

// Uint64MapOutput is an Output that returns map[string]uint64 values.
type Uint64MapOutput OutputType

// ElementType returns the element type of this Output (map[string]uint64).
func (Uint64MapOutput) ElementType() reflect.Type {
	return uint64mapType
}

func (Uint64MapOutput) isUint64Map() {}

// Apply applies a transformation to the uint64map value when it is available.
func (out Uint64MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint64map value when it is available.
func (out Uint64MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint64MapOutput) ApplyAny(applier func(v map[string]uint64) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint64MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint64MapOutput) ApplyAnyArray(applier func(v map[string]uint64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint64MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint64MapOutput) ApplyAnyMap(applier func(v map[string]uint64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint64MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint64MapOutput) ApplyArchive(applier func(v map[string]uint64) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint64MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint64MapOutput) ApplyArchiveArray(applier func(v map[string]uint64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint64MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint64MapOutput) ApplyArchiveMap(applier func(v map[string]uint64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint64MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint64MapOutput) ApplyAsset(applier func(v map[string]uint64) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint64MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint64MapOutput) ApplyAssetArray(applier func(v map[string]uint64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint64MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint64MapOutput) ApplyAssetMap(applier func(v map[string]uint64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint64MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint64MapOutput) ApplyAssetOrArchive(applier func(v map[string]uint64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint64MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint64MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]uint64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint64MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint64MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]uint64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint64MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint64MapOutput) ApplyBool(applier func(v map[string]uint64) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint64MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint64MapOutput) ApplyBoolArray(applier func(v map[string]uint64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint64MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint64MapOutput) ApplyBoolMap(applier func(v map[string]uint64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint64MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint64MapOutput) ApplyFloat32(applier func(v map[string]uint64) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint64MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint64MapOutput) ApplyFloat32Array(applier func(v map[string]uint64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint64MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint64MapOutput) ApplyFloat32Map(applier func(v map[string]uint64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint64MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint64MapOutput) ApplyFloat64(applier func(v map[string]uint64) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint64MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint64MapOutput) ApplyFloat64Array(applier func(v map[string]uint64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint64MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint64MapOutput) ApplyFloat64Map(applier func(v map[string]uint64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint64MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint64MapOutput) ApplyID(applier func(v map[string]uint64) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint64MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint64MapOutput) ApplyIDArray(applier func(v map[string]uint64) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint64MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint64MapOutput) ApplyIDMap(applier func(v map[string]uint64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint64MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint64MapOutput) ApplyInt(applier func(v map[string]uint64) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint64MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint64MapOutput) ApplyIntArray(applier func(v map[string]uint64) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint64MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint64MapOutput) ApplyIntMap(applier func(v map[string]uint64) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint64MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint64MapOutput) ApplyInt16(applier func(v map[string]uint64) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint64MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint64MapOutput) ApplyInt16Array(applier func(v map[string]uint64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint64MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint64MapOutput) ApplyInt16Map(applier func(v map[string]uint64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint64MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint64MapOutput) ApplyInt32(applier func(v map[string]uint64) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint64MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint64MapOutput) ApplyInt32Array(applier func(v map[string]uint64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint64MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint64MapOutput) ApplyInt32Map(applier func(v map[string]uint64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint64MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint64MapOutput) ApplyInt64(applier func(v map[string]uint64) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint64MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint64MapOutput) ApplyInt64Array(applier func(v map[string]uint64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint64MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint64MapOutput) ApplyInt64Map(applier func(v map[string]uint64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint64MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint64MapOutput) ApplyInt8(applier func(v map[string]uint64) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint64MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint64MapOutput) ApplyInt8Array(applier func(v map[string]uint64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint64MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint64MapOutput) ApplyInt8Map(applier func(v map[string]uint64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint64MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint64MapOutput) ApplyString(applier func(v map[string]uint64) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint64MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint64MapOutput) ApplyStringArray(applier func(v map[string]uint64) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint64MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint64MapOutput) ApplyStringMap(applier func(v map[string]uint64) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint64MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint64MapOutput) ApplyURN(applier func(v map[string]uint64) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint64MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint64MapOutput) ApplyURNArray(applier func(v map[string]uint64) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint64MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint64MapOutput) ApplyURNMap(applier func(v map[string]uint64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint64MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint64MapOutput) ApplyUint(applier func(v map[string]uint64) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint64MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint64MapOutput) ApplyUintArray(applier func(v map[string]uint64) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint64MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint64MapOutput) ApplyUintMap(applier func(v map[string]uint64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint64MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint64MapOutput) ApplyUint16(applier func(v map[string]uint64) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint64MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint64MapOutput) ApplyUint16Array(applier func(v map[string]uint64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint64MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint64MapOutput) ApplyUint16Map(applier func(v map[string]uint64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint64MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint64MapOutput) ApplyUint32(applier func(v map[string]uint64) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint64MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint64MapOutput) ApplyUint32Array(applier func(v map[string]uint64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint64MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint64MapOutput) ApplyUint32Map(applier func(v map[string]uint64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint64MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint64MapOutput) ApplyUint64(applier func(v map[string]uint64) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint64MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint64MapOutput) ApplyUint64Array(applier func(v map[string]uint64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint64MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint64MapOutput) ApplyUint64Map(applier func(v map[string]uint64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint64MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint64MapOutput) ApplyUint8(applier func(v map[string]uint64) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]uint64) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint64MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint64MapOutput) ApplyUint8Array(applier func(v map[string]uint64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint64) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint64MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint64MapOutput) ApplyUint8Map(applier func(v map[string]uint64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint64) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint64MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint64) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint8Type = reflect.TypeOf((*uint8)(nil)).Elem()

// Uint8Input is an input type that accepts Uint8 and Uint8Output values.
type Uint8Input interface {
	Input

	// nolint: unused
	isUint8()
}

// Uint8 is an input type for uint8 values.
type Uint8 uint8

// ElementType returns the element type of this Input (uint8).
func (Uint8) ElementType() reflect.Type {
	return uint8Type
}

func (Uint8) isUint8() {}

// Uint8Output is an Output that returns uint8 values.
type Uint8Output OutputType

// ElementType returns the element type of this Output (uint8).
func (Uint8Output) ElementType() reflect.Type {
	return uint8Type
}

func (Uint8Output) isUint8() {}

// Apply applies a transformation to the uint8 value when it is available.
func (out Uint8Output) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint8 value when it is available.
func (out Uint8Output) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint8Output) ApplyAny(applier func(v uint8) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v uint8) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint8Output) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, uint8) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint8Output) ApplyAnyArray(applier func(v uint8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint8Output) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint8Output) ApplyAnyMap(applier func(v uint8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint8Output) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint8Output) ApplyArchive(applier func(v uint8) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v uint8) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint8Output) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, uint8) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint8Output) ApplyArchiveArray(applier func(v uint8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint8Output) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint8Output) ApplyArchiveMap(applier func(v uint8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint8Output) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint8Output) ApplyAsset(applier func(v uint8) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v uint8) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint8Output) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, uint8) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint8Output) ApplyAssetArray(applier func(v uint8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint8Output) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint8Output) ApplyAssetMap(applier func(v uint8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint8Output) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint8Output) ApplyAssetOrArchive(applier func(v uint8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v uint8) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint8Output) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, uint8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint8Output) ApplyAssetOrArchiveArray(applier func(v uint8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint8Output) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint8Output) ApplyAssetOrArchiveMap(applier func(v uint8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint8Output) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint8Output) ApplyBool(applier func(v uint8) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v uint8) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint8Output) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, uint8) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint8Output) ApplyBoolArray(applier func(v uint8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint8Output) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint8Output) ApplyBoolMap(applier func(v uint8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint8Output) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint8Output) ApplyFloat32(applier func(v uint8) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v uint8) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint8Output) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, uint8) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint8Output) ApplyFloat32Array(applier func(v uint8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint8Output) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint8Output) ApplyFloat32Map(applier func(v uint8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint8Output) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint8Output) ApplyFloat64(applier func(v uint8) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v uint8) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint8Output) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, uint8) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint8Output) ApplyFloat64Array(applier func(v uint8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint8Output) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint8Output) ApplyFloat64Map(applier func(v uint8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint8Output) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint8Output) ApplyID(applier func(v uint8) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v uint8) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint8Output) ApplyIDWithContext(ctx context.Context, applier func(context.Context, uint8) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint8Output) ApplyIDArray(applier func(v uint8) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint8Output) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint8Output) ApplyIDMap(applier func(v uint8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint8Output) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint8Output) ApplyInt(applier func(v uint8) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v uint8) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint8Output) ApplyIntWithContext(ctx context.Context, applier func(context.Context, uint8) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint8Output) ApplyIntArray(applier func(v uint8) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint8Output) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint8Output) ApplyIntMap(applier func(v uint8) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint8Output) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint8Output) ApplyInt16(applier func(v uint8) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v uint8) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint8Output) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, uint8) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint8Output) ApplyInt16Array(applier func(v uint8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint8Output) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint8Output) ApplyInt16Map(applier func(v uint8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint8Output) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint8Output) ApplyInt32(applier func(v uint8) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v uint8) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint8Output) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, uint8) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint8Output) ApplyInt32Array(applier func(v uint8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint8Output) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint8Output) ApplyInt32Map(applier func(v uint8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint8Output) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint8Output) ApplyInt64(applier func(v uint8) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v uint8) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint8Output) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, uint8) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint8Output) ApplyInt64Array(applier func(v uint8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint8Output) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint8Output) ApplyInt64Map(applier func(v uint8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint8Output) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint8Output) ApplyInt8(applier func(v uint8) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v uint8) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint8Output) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, uint8) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint8Output) ApplyInt8Array(applier func(v uint8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint8Output) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint8Output) ApplyInt8Map(applier func(v uint8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint8Output) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint8Output) ApplyString(applier func(v uint8) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v uint8) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint8Output) ApplyStringWithContext(ctx context.Context, applier func(context.Context, uint8) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint8Output) ApplyStringArray(applier func(v uint8) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint8Output) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint8Output) ApplyStringMap(applier func(v uint8) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint8Output) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint8Output) ApplyURN(applier func(v uint8) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v uint8) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint8Output) ApplyURNWithContext(ctx context.Context, applier func(context.Context, uint8) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint8Output) ApplyURNArray(applier func(v uint8) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint8Output) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint8Output) ApplyURNMap(applier func(v uint8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint8Output) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint8Output) ApplyUint(applier func(v uint8) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v uint8) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint8Output) ApplyUintWithContext(ctx context.Context, applier func(context.Context, uint8) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint8Output) ApplyUintArray(applier func(v uint8) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint8Output) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint8Output) ApplyUintMap(applier func(v uint8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint8Output) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint8Output) ApplyUint16(applier func(v uint8) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v uint8) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint8Output) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, uint8) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint8Output) ApplyUint16Array(applier func(v uint8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint8Output) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint8Output) ApplyUint16Map(applier func(v uint8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint8Output) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint8Output) ApplyUint32(applier func(v uint8) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v uint8) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint8Output) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, uint8) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint8Output) ApplyUint32Array(applier func(v uint8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint8Output) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint8Output) ApplyUint32Map(applier func(v uint8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint8Output) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint8Output) ApplyUint64(applier func(v uint8) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v uint8) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint8Output) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, uint8) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint8Output) ApplyUint64Array(applier func(v uint8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint8Output) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint8Output) ApplyUint64Map(applier func(v uint8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint8Output) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint8Output) ApplyUint8(applier func(v uint8) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v uint8) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint8Output) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, uint8) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint8Output) ApplyUint8Array(applier func(v uint8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v uint8) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint8Output) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, uint8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint8Output) ApplyUint8Map(applier func(v uint8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v uint8) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint8Output) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, uint8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint8arrayType = reflect.TypeOf((*[]uint8)(nil)).Elem()

// Uint8ArrayInput is an input type that accepts Uint8Array and Uint8ArrayOutput values.
type Uint8ArrayInput interface {
	Input

	// nolint: unused
	isUint8Array()
}

// Uint8Array is an input type for []uint8 values.
type Uint8Array []uint8

// ElementType returns the element type of this Input ([]uint8).
func (Uint8Array) ElementType() reflect.Type {
	return uint8arrayType
}

func (Uint8Array) isUint8Array() {}

// Uint8ArrayOutput is an Output that returns []uint8 values.
type Uint8ArrayOutput OutputType

// ElementType returns the element type of this Output ([]uint8).
func (Uint8ArrayOutput) ElementType() reflect.Type {
	return uint8arrayType
}

func (Uint8ArrayOutput) isUint8Array() {}

// Apply applies a transformation to the uint8array value when it is available.
func (out Uint8ArrayOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint8array value when it is available.
func (out Uint8ArrayOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint8ArrayOutput) ApplyAny(applier func(v []uint8) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v []uint8) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint8ArrayOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, []uint8) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint8ArrayOutput) ApplyAnyArray(applier func(v []uint8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint8ArrayOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint8ArrayOutput) ApplyAnyMap(applier func(v []uint8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint8ArrayOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint8ArrayOutput) ApplyArchive(applier func(v []uint8) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v []uint8) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint8ArrayOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, []uint8) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint8ArrayOutput) ApplyArchiveArray(applier func(v []uint8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint8ArrayOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint8ArrayOutput) ApplyArchiveMap(applier func(v []uint8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint8ArrayOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint8ArrayOutput) ApplyAsset(applier func(v []uint8) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v []uint8) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint8ArrayOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, []uint8) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint8ArrayOutput) ApplyAssetArray(applier func(v []uint8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint8ArrayOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint8ArrayOutput) ApplyAssetMap(applier func(v []uint8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint8ArrayOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint8ArrayOutput) ApplyAssetOrArchive(applier func(v []uint8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v []uint8) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint8ArrayOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, []uint8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint8ArrayOutput) ApplyAssetOrArchiveArray(applier func(v []uint8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint8ArrayOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint8ArrayOutput) ApplyAssetOrArchiveMap(applier func(v []uint8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint8ArrayOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint8ArrayOutput) ApplyBool(applier func(v []uint8) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v []uint8) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint8ArrayOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, []uint8) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint8ArrayOutput) ApplyBoolArray(applier func(v []uint8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint8ArrayOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint8ArrayOutput) ApplyBoolMap(applier func(v []uint8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint8ArrayOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint8ArrayOutput) ApplyFloat32(applier func(v []uint8) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v []uint8) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint8ArrayOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, []uint8) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint8ArrayOutput) ApplyFloat32Array(applier func(v []uint8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint8ArrayOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint8ArrayOutput) ApplyFloat32Map(applier func(v []uint8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint8ArrayOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint8ArrayOutput) ApplyFloat64(applier func(v []uint8) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v []uint8) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint8ArrayOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, []uint8) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint8ArrayOutput) ApplyFloat64Array(applier func(v []uint8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint8ArrayOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint8ArrayOutput) ApplyFloat64Map(applier func(v []uint8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint8ArrayOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint8ArrayOutput) ApplyID(applier func(v []uint8) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v []uint8) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint8ArrayOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, []uint8) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint8ArrayOutput) ApplyIDArray(applier func(v []uint8) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint8ArrayOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint8ArrayOutput) ApplyIDMap(applier func(v []uint8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint8ArrayOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint8ArrayOutput) ApplyInt(applier func(v []uint8) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v []uint8) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint8ArrayOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, []uint8) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint8ArrayOutput) ApplyIntArray(applier func(v []uint8) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint8ArrayOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint8ArrayOutput) ApplyIntMap(applier func(v []uint8) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint8ArrayOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint8ArrayOutput) ApplyInt16(applier func(v []uint8) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v []uint8) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint8ArrayOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, []uint8) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint8ArrayOutput) ApplyInt16Array(applier func(v []uint8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint8ArrayOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint8ArrayOutput) ApplyInt16Map(applier func(v []uint8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint8ArrayOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint8ArrayOutput) ApplyInt32(applier func(v []uint8) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v []uint8) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint8ArrayOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, []uint8) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint8ArrayOutput) ApplyInt32Array(applier func(v []uint8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint8ArrayOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint8ArrayOutput) ApplyInt32Map(applier func(v []uint8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint8ArrayOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint8ArrayOutput) ApplyInt64(applier func(v []uint8) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v []uint8) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint8ArrayOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, []uint8) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint8ArrayOutput) ApplyInt64Array(applier func(v []uint8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint8ArrayOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint8ArrayOutput) ApplyInt64Map(applier func(v []uint8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint8ArrayOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint8ArrayOutput) ApplyInt8(applier func(v []uint8) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v []uint8) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint8ArrayOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, []uint8) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint8ArrayOutput) ApplyInt8Array(applier func(v []uint8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint8ArrayOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint8ArrayOutput) ApplyInt8Map(applier func(v []uint8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint8ArrayOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint8ArrayOutput) ApplyString(applier func(v []uint8) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v []uint8) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint8ArrayOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, []uint8) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint8ArrayOutput) ApplyStringArray(applier func(v []uint8) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint8ArrayOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint8ArrayOutput) ApplyStringMap(applier func(v []uint8) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint8ArrayOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint8ArrayOutput) ApplyURN(applier func(v []uint8) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v []uint8) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint8ArrayOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, []uint8) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint8ArrayOutput) ApplyURNArray(applier func(v []uint8) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint8ArrayOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint8ArrayOutput) ApplyURNMap(applier func(v []uint8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint8ArrayOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint8ArrayOutput) ApplyUint(applier func(v []uint8) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v []uint8) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint8ArrayOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, []uint8) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint8ArrayOutput) ApplyUintArray(applier func(v []uint8) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint8ArrayOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint8ArrayOutput) ApplyUintMap(applier func(v []uint8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint8ArrayOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint8ArrayOutput) ApplyUint16(applier func(v []uint8) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v []uint8) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint8ArrayOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, []uint8) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint8ArrayOutput) ApplyUint16Array(applier func(v []uint8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint8ArrayOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint8ArrayOutput) ApplyUint16Map(applier func(v []uint8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint8ArrayOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint8ArrayOutput) ApplyUint32(applier func(v []uint8) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v []uint8) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint8ArrayOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, []uint8) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint8ArrayOutput) ApplyUint32Array(applier func(v []uint8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint8ArrayOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint8ArrayOutput) ApplyUint32Map(applier func(v []uint8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint8ArrayOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint8ArrayOutput) ApplyUint64(applier func(v []uint8) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v []uint8) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint8ArrayOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, []uint8) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint8ArrayOutput) ApplyUint64Array(applier func(v []uint8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint8ArrayOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint8ArrayOutput) ApplyUint64Map(applier func(v []uint8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint8ArrayOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint8ArrayOutput) ApplyUint8(applier func(v []uint8) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v []uint8) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint8ArrayOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, []uint8) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint8ArrayOutput) ApplyUint8Array(applier func(v []uint8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v []uint8) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint8ArrayOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, []uint8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint8ArrayOutput) ApplyUint8Map(applier func(v []uint8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v []uint8) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint8ArrayOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, []uint8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

var uint8mapType = reflect.TypeOf((*map[string]uint8)(nil)).Elem()

// Uint8MapInput is an input type that accepts Uint8Map and Uint8MapOutput values.
type Uint8MapInput interface {
	Input

	// nolint: unused
	isUint8Map()
}

// Uint8Map is an input type for map[string]uint8 values.
type Uint8Map map[string]uint8

// ElementType returns the element type of this Input (map[string]uint8).
func (Uint8Map) ElementType() reflect.Type {
	return uint8mapType
}

func (Uint8Map) isUint8Map() {}

// Uint8MapOutput is an Output that returns map[string]uint8 values.
type Uint8MapOutput OutputType

// ElementType returns the element type of this Output (map[string]uint8).
func (Uint8MapOutput) ElementType() reflect.Type {
	return uint8mapType
}

func (Uint8MapOutput) isUint8Map() {}

// Apply applies a transformation to the uint8map value when it is available.
func (out Uint8MapOutput) Apply(applier interface{}) Output {
	return Apply(out, applier)
}

// ApplyWithContext applies a transformation to the uint8map value when it is available.
func (out Uint8MapOutput) ApplyWithContext(ctx context.Context, applier interface{}) Output {
	return ApplyWithContext(ctx, out, applier)
}

// ApplyAny is like Apply, but returns a AnyOutput.
func (out Uint8MapOutput) ApplyAny(applier func(v map[string]uint8) (interface{}, error)) AnyOutput {
	return out.ApplyAnyWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyWithContext is like ApplyWithContext, but returns a AnyOutput.
func (out Uint8MapOutput) ApplyAnyWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (interface{}, error)) AnyOutput {
	return out.ApplyWithContext(ctx, applier).(AnyOutput)
}

// ApplyAnyArray is like Apply, but returns a AnyArrayOutput.
func (out Uint8MapOutput) ApplyAnyArray(applier func(v map[string]uint8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyAnyArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyArrayWithContext is like ApplyWithContext, but returns a AnyArrayOutput.
func (out Uint8MapOutput) ApplyAnyArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]interface{}, error)) AnyArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AnyArrayOutput)
}

// ApplyAnyMap is like Apply, but returns a AnyMapOutput.
func (out Uint8MapOutput) ApplyAnyMap(applier func(v map[string]uint8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyAnyMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]interface{}, error) {
		return applier(v)
	})
}

// ApplyAnyMapWithContext is like ApplyWithContext, but returns a AnyMapOutput.
func (out Uint8MapOutput) ApplyAnyMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]interface{}, error)) AnyMapOutput {
	return out.ApplyWithContext(ctx, applier).(AnyMapOutput)
}

// ApplyArchive is like Apply, but returns a ArchiveOutput.
func (out Uint8MapOutput) ApplyArchive(applier func(v map[string]uint8) (Archive, error)) ArchiveOutput {
	return out.ApplyArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveWithContext is like ApplyWithContext, but returns a ArchiveOutput.
func (out Uint8MapOutput) ApplyArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (Archive, error)) ArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveOutput)
}

// ApplyArchiveArray is like Apply, but returns a ArchiveArrayOutput.
func (out Uint8MapOutput) ApplyArchiveArray(applier func(v map[string]uint8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveArrayWithContext is like ApplyWithContext, but returns a ArchiveArrayOutput.
func (out Uint8MapOutput) ApplyArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]Archive, error)) ArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveArrayOutput)
}

// ApplyArchiveMap is like Apply, but returns a ArchiveMapOutput.
func (out Uint8MapOutput) ApplyArchiveMap(applier func(v map[string]uint8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]Archive, error) {
		return applier(v)
	})
}

// ApplyArchiveMapWithContext is like ApplyWithContext, but returns a ArchiveMapOutput.
func (out Uint8MapOutput) ApplyArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]Archive, error)) ArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(ArchiveMapOutput)
}

// ApplyAsset is like Apply, but returns a AssetOutput.
func (out Uint8MapOutput) ApplyAsset(applier func(v map[string]uint8) (Asset, error)) AssetOutput {
	return out.ApplyAssetWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (Asset, error) {
		return applier(v)
	})
}

// ApplyAssetWithContext is like ApplyWithContext, but returns a AssetOutput.
func (out Uint8MapOutput) ApplyAssetWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (Asset, error)) AssetOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOutput)
}

// ApplyAssetArray is like Apply, but returns a AssetArrayOutput.
func (out Uint8MapOutput) ApplyAssetArray(applier func(v map[string]uint8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyAssetArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetArrayWithContext is like ApplyWithContext, but returns a AssetArrayOutput.
func (out Uint8MapOutput) ApplyAssetArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]Asset, error)) AssetArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetArrayOutput)
}

// ApplyAssetMap is like Apply, but returns a AssetMapOutput.
func (out Uint8MapOutput) ApplyAssetMap(applier func(v map[string]uint8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyAssetMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]Asset, error) {
		return applier(v)
	})
}

// ApplyAssetMapWithContext is like ApplyWithContext, but returns a AssetMapOutput.
func (out Uint8MapOutput) ApplyAssetMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]Asset, error)) AssetMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetMapOutput)
}

// ApplyAssetOrArchive is like Apply, but returns a AssetOrArchiveOutput.
func (out Uint8MapOutput) ApplyAssetOrArchive(applier func(v map[string]uint8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyAssetOrArchiveWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveWithContext is like ApplyWithContext, but returns a AssetOrArchiveOutput.
func (out Uint8MapOutput) ApplyAssetOrArchiveWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (AssetOrArchive, error)) AssetOrArchiveOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveOutput)
}

// ApplyAssetOrArchiveArray is like Apply, but returns a AssetOrArchiveArrayOutput.
func (out Uint8MapOutput) ApplyAssetOrArchiveArray(applier func(v map[string]uint8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyAssetOrArchiveArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveArrayWithContext is like ApplyWithContext, but returns a AssetOrArchiveArrayOutput.
func (out Uint8MapOutput) ApplyAssetOrArchiveArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]AssetOrArchive, error)) AssetOrArchiveArrayOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveArrayOutput)
}

// ApplyAssetOrArchiveMap is like Apply, but returns a AssetOrArchiveMapOutput.
func (out Uint8MapOutput) ApplyAssetOrArchiveMap(applier func(v map[string]uint8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyAssetOrArchiveMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]AssetOrArchive, error) {
		return applier(v)
	})
}

// ApplyAssetOrArchiveMapWithContext is like ApplyWithContext, but returns a AssetOrArchiveMapOutput.
func (out Uint8MapOutput) ApplyAssetOrArchiveMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]AssetOrArchive, error)) AssetOrArchiveMapOutput {
	return out.ApplyWithContext(ctx, applier).(AssetOrArchiveMapOutput)
}

// ApplyBool is like Apply, but returns a BoolOutput.
func (out Uint8MapOutput) ApplyBool(applier func(v map[string]uint8) (bool, error)) BoolOutput {
	return out.ApplyBoolWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (bool, error) {
		return applier(v)
	})
}

// ApplyBoolWithContext is like ApplyWithContext, but returns a BoolOutput.
func (out Uint8MapOutput) ApplyBoolWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (bool, error)) BoolOutput {
	return out.ApplyWithContext(ctx, applier).(BoolOutput)
}

// ApplyBoolArray is like Apply, but returns a BoolArrayOutput.
func (out Uint8MapOutput) ApplyBoolArray(applier func(v map[string]uint8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyBoolArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]bool, error) {
		return applier(v)
	})
}

// ApplyBoolArrayWithContext is like ApplyWithContext, but returns a BoolArrayOutput.
func (out Uint8MapOutput) ApplyBoolArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]bool, error)) BoolArrayOutput {
	return out.ApplyWithContext(ctx, applier).(BoolArrayOutput)
}

// ApplyBoolMap is like Apply, but returns a BoolMapOutput.
func (out Uint8MapOutput) ApplyBoolMap(applier func(v map[string]uint8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyBoolMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]bool, error) {
		return applier(v)
	})
}

// ApplyBoolMapWithContext is like ApplyWithContext, but returns a BoolMapOutput.
func (out Uint8MapOutput) ApplyBoolMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]bool, error)) BoolMapOutput {
	return out.ApplyWithContext(ctx, applier).(BoolMapOutput)
}

// ApplyFloat32 is like Apply, but returns a Float32Output.
func (out Uint8MapOutput) ApplyFloat32(applier func(v map[string]uint8) (float32, error)) Float32Output {
	return out.ApplyFloat32WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (float32, error) {
		return applier(v)
	})
}

// ApplyFloat32WithContext is like ApplyWithContext, but returns a Float32Output.
func (out Uint8MapOutput) ApplyFloat32WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (float32, error)) Float32Output {
	return out.ApplyWithContext(ctx, applier).(Float32Output)
}

// ApplyFloat32Array is like Apply, but returns a Float32ArrayOutput.
func (out Uint8MapOutput) ApplyFloat32Array(applier func(v map[string]uint8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyFloat32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32ArrayWithContext is like ApplyWithContext, but returns a Float32ArrayOutput.
func (out Uint8MapOutput) ApplyFloat32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]float32, error)) Float32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float32ArrayOutput)
}

// ApplyFloat32Map is like Apply, but returns a Float32MapOutput.
func (out Uint8MapOutput) ApplyFloat32Map(applier func(v map[string]uint8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyFloat32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]float32, error) {
		return applier(v)
	})
}

// ApplyFloat32MapWithContext is like ApplyWithContext, but returns a Float32MapOutput.
func (out Uint8MapOutput) ApplyFloat32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]float32, error)) Float32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float32MapOutput)
}

// ApplyFloat64 is like Apply, but returns a Float64Output.
func (out Uint8MapOutput) ApplyFloat64(applier func(v map[string]uint8) (float64, error)) Float64Output {
	return out.ApplyFloat64WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (float64, error) {
		return applier(v)
	})
}

// ApplyFloat64WithContext is like ApplyWithContext, but returns a Float64Output.
func (out Uint8MapOutput) ApplyFloat64WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (float64, error)) Float64Output {
	return out.ApplyWithContext(ctx, applier).(Float64Output)
}

// ApplyFloat64Array is like Apply, but returns a Float64ArrayOutput.
func (out Uint8MapOutput) ApplyFloat64Array(applier func(v map[string]uint8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyFloat64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64ArrayWithContext is like ApplyWithContext, but returns a Float64ArrayOutput.
func (out Uint8MapOutput) ApplyFloat64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]float64, error)) Float64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Float64ArrayOutput)
}

// ApplyFloat64Map is like Apply, but returns a Float64MapOutput.
func (out Uint8MapOutput) ApplyFloat64Map(applier func(v map[string]uint8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyFloat64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]float64, error) {
		return applier(v)
	})
}

// ApplyFloat64MapWithContext is like ApplyWithContext, but returns a Float64MapOutput.
func (out Uint8MapOutput) ApplyFloat64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]float64, error)) Float64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Float64MapOutput)
}

// ApplyID is like Apply, but returns a IDOutput.
func (out Uint8MapOutput) ApplyID(applier func(v map[string]uint8) (ID, error)) IDOutput {
	return out.ApplyIDWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (ID, error) {
		return applier(v)
	})
}

// ApplyIDWithContext is like ApplyWithContext, but returns a IDOutput.
func (out Uint8MapOutput) ApplyIDWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (ID, error)) IDOutput {
	return out.ApplyWithContext(ctx, applier).(IDOutput)
}

// ApplyIDArray is like Apply, but returns a IDArrayOutput.
func (out Uint8MapOutput) ApplyIDArray(applier func(v map[string]uint8) ([]ID, error)) IDArrayOutput {
	return out.ApplyIDArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]ID, error) {
		return applier(v)
	})
}

// ApplyIDArrayWithContext is like ApplyWithContext, but returns a IDArrayOutput.
func (out Uint8MapOutput) ApplyIDArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]ID, error)) IDArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IDArrayOutput)
}

// ApplyIDMap is like Apply, but returns a IDMapOutput.
func (out Uint8MapOutput) ApplyIDMap(applier func(v map[string]uint8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyIDMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]ID, error) {
		return applier(v)
	})
}

// ApplyIDMapWithContext is like ApplyWithContext, but returns a IDMapOutput.
func (out Uint8MapOutput) ApplyIDMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]ID, error)) IDMapOutput {
	return out.ApplyWithContext(ctx, applier).(IDMapOutput)
}

// ApplyInt is like Apply, but returns a IntOutput.
func (out Uint8MapOutput) ApplyInt(applier func(v map[string]uint8) (int, error)) IntOutput {
	return out.ApplyIntWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (int, error) {
		return applier(v)
	})
}

// ApplyIntWithContext is like ApplyWithContext, but returns a IntOutput.
func (out Uint8MapOutput) ApplyIntWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (int, error)) IntOutput {
	return out.ApplyWithContext(ctx, applier).(IntOutput)
}

// ApplyIntArray is like Apply, but returns a IntArrayOutput.
func (out Uint8MapOutput) ApplyIntArray(applier func(v map[string]uint8) ([]int, error)) IntArrayOutput {
	return out.ApplyIntArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]int, error) {
		return applier(v)
	})
}

// ApplyIntArrayWithContext is like ApplyWithContext, but returns a IntArrayOutput.
func (out Uint8MapOutput) ApplyIntArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]int, error)) IntArrayOutput {
	return out.ApplyWithContext(ctx, applier).(IntArrayOutput)
}

// ApplyIntMap is like Apply, but returns a IntMapOutput.
func (out Uint8MapOutput) ApplyIntMap(applier func(v map[string]uint8) (map[string]int, error)) IntMapOutput {
	return out.ApplyIntMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]int, error) {
		return applier(v)
	})
}

// ApplyIntMapWithContext is like ApplyWithContext, but returns a IntMapOutput.
func (out Uint8MapOutput) ApplyIntMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]int, error)) IntMapOutput {
	return out.ApplyWithContext(ctx, applier).(IntMapOutput)
}

// ApplyInt16 is like Apply, but returns a Int16Output.
func (out Uint8MapOutput) ApplyInt16(applier func(v map[string]uint8) (int16, error)) Int16Output {
	return out.ApplyInt16WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (int16, error) {
		return applier(v)
	})
}

// ApplyInt16WithContext is like ApplyWithContext, but returns a Int16Output.
func (out Uint8MapOutput) ApplyInt16WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (int16, error)) Int16Output {
	return out.ApplyWithContext(ctx, applier).(Int16Output)
}

// ApplyInt16Array is like Apply, but returns a Int16ArrayOutput.
func (out Uint8MapOutput) ApplyInt16Array(applier func(v map[string]uint8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyInt16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]int16, error) {
		return applier(v)
	})
}

// ApplyInt16ArrayWithContext is like ApplyWithContext, but returns a Int16ArrayOutput.
func (out Uint8MapOutput) ApplyInt16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]int16, error)) Int16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int16ArrayOutput)
}

// ApplyInt16Map is like Apply, but returns a Int16MapOutput.
func (out Uint8MapOutput) ApplyInt16Map(applier func(v map[string]uint8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyInt16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]int16, error) {
		return applier(v)
	})
}

// ApplyInt16MapWithContext is like ApplyWithContext, but returns a Int16MapOutput.
func (out Uint8MapOutput) ApplyInt16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]int16, error)) Int16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int16MapOutput)
}

// ApplyInt32 is like Apply, but returns a Int32Output.
func (out Uint8MapOutput) ApplyInt32(applier func(v map[string]uint8) (int32, error)) Int32Output {
	return out.ApplyInt32WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (int32, error) {
		return applier(v)
	})
}

// ApplyInt32WithContext is like ApplyWithContext, but returns a Int32Output.
func (out Uint8MapOutput) ApplyInt32WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (int32, error)) Int32Output {
	return out.ApplyWithContext(ctx, applier).(Int32Output)
}

// ApplyInt32Array is like Apply, but returns a Int32ArrayOutput.
func (out Uint8MapOutput) ApplyInt32Array(applier func(v map[string]uint8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyInt32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]int32, error) {
		return applier(v)
	})
}

// ApplyInt32ArrayWithContext is like ApplyWithContext, but returns a Int32ArrayOutput.
func (out Uint8MapOutput) ApplyInt32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]int32, error)) Int32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int32ArrayOutput)
}

// ApplyInt32Map is like Apply, but returns a Int32MapOutput.
func (out Uint8MapOutput) ApplyInt32Map(applier func(v map[string]uint8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyInt32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]int32, error) {
		return applier(v)
	})
}

// ApplyInt32MapWithContext is like ApplyWithContext, but returns a Int32MapOutput.
func (out Uint8MapOutput) ApplyInt32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]int32, error)) Int32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int32MapOutput)
}

// ApplyInt64 is like Apply, but returns a Int64Output.
func (out Uint8MapOutput) ApplyInt64(applier func(v map[string]uint8) (int64, error)) Int64Output {
	return out.ApplyInt64WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (int64, error) {
		return applier(v)
	})
}

// ApplyInt64WithContext is like ApplyWithContext, but returns a Int64Output.
func (out Uint8MapOutput) ApplyInt64WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (int64, error)) Int64Output {
	return out.ApplyWithContext(ctx, applier).(Int64Output)
}

// ApplyInt64Array is like Apply, but returns a Int64ArrayOutput.
func (out Uint8MapOutput) ApplyInt64Array(applier func(v map[string]uint8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyInt64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]int64, error) {
		return applier(v)
	})
}

// ApplyInt64ArrayWithContext is like ApplyWithContext, but returns a Int64ArrayOutput.
func (out Uint8MapOutput) ApplyInt64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]int64, error)) Int64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int64ArrayOutput)
}

// ApplyInt64Map is like Apply, but returns a Int64MapOutput.
func (out Uint8MapOutput) ApplyInt64Map(applier func(v map[string]uint8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyInt64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]int64, error) {
		return applier(v)
	})
}

// ApplyInt64MapWithContext is like ApplyWithContext, but returns a Int64MapOutput.
func (out Uint8MapOutput) ApplyInt64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]int64, error)) Int64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int64MapOutput)
}

// ApplyInt8 is like Apply, but returns a Int8Output.
func (out Uint8MapOutput) ApplyInt8(applier func(v map[string]uint8) (int8, error)) Int8Output {
	return out.ApplyInt8WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (int8, error) {
		return applier(v)
	})
}

// ApplyInt8WithContext is like ApplyWithContext, but returns a Int8Output.
func (out Uint8MapOutput) ApplyInt8WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (int8, error)) Int8Output {
	return out.ApplyWithContext(ctx, applier).(Int8Output)
}

// ApplyInt8Array is like Apply, but returns a Int8ArrayOutput.
func (out Uint8MapOutput) ApplyInt8Array(applier func(v map[string]uint8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyInt8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]int8, error) {
		return applier(v)
	})
}

// ApplyInt8ArrayWithContext is like ApplyWithContext, but returns a Int8ArrayOutput.
func (out Uint8MapOutput) ApplyInt8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]int8, error)) Int8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Int8ArrayOutput)
}

// ApplyInt8Map is like Apply, but returns a Int8MapOutput.
func (out Uint8MapOutput) ApplyInt8Map(applier func(v map[string]uint8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyInt8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]int8, error) {
		return applier(v)
	})
}

// ApplyInt8MapWithContext is like ApplyWithContext, but returns a Int8MapOutput.
func (out Uint8MapOutput) ApplyInt8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]int8, error)) Int8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Int8MapOutput)
}

// ApplyString is like Apply, but returns a StringOutput.
func (out Uint8MapOutput) ApplyString(applier func(v map[string]uint8) (string, error)) StringOutput {
	return out.ApplyStringWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (string, error) {
		return applier(v)
	})
}

// ApplyStringWithContext is like ApplyWithContext, but returns a StringOutput.
func (out Uint8MapOutput) ApplyStringWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (string, error)) StringOutput {
	return out.ApplyWithContext(ctx, applier).(StringOutput)
}

// ApplyStringArray is like Apply, but returns a StringArrayOutput.
func (out Uint8MapOutput) ApplyStringArray(applier func(v map[string]uint8) ([]string, error)) StringArrayOutput {
	return out.ApplyStringArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]string, error) {
		return applier(v)
	})
}

// ApplyStringArrayWithContext is like ApplyWithContext, but returns a StringArrayOutput.
func (out Uint8MapOutput) ApplyStringArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]string, error)) StringArrayOutput {
	return out.ApplyWithContext(ctx, applier).(StringArrayOutput)
}

// ApplyStringMap is like Apply, but returns a StringMapOutput.
func (out Uint8MapOutput) ApplyStringMap(applier func(v map[string]uint8) (map[string]string, error)) StringMapOutput {
	return out.ApplyStringMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]string, error) {
		return applier(v)
	})
}

// ApplyStringMapWithContext is like ApplyWithContext, but returns a StringMapOutput.
func (out Uint8MapOutput) ApplyStringMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]string, error)) StringMapOutput {
	return out.ApplyWithContext(ctx, applier).(StringMapOutput)
}

// ApplyURN is like Apply, but returns a URNOutput.
func (out Uint8MapOutput) ApplyURN(applier func(v map[string]uint8) (URN, error)) URNOutput {
	return out.ApplyURNWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (URN, error) {
		return applier(v)
	})
}

// ApplyURNWithContext is like ApplyWithContext, but returns a URNOutput.
func (out Uint8MapOutput) ApplyURNWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (URN, error)) URNOutput {
	return out.ApplyWithContext(ctx, applier).(URNOutput)
}

// ApplyURNArray is like Apply, but returns a URNArrayOutput.
func (out Uint8MapOutput) ApplyURNArray(applier func(v map[string]uint8) ([]URN, error)) URNArrayOutput {
	return out.ApplyURNArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]URN, error) {
		return applier(v)
	})
}

// ApplyURNArrayWithContext is like ApplyWithContext, but returns a URNArrayOutput.
func (out Uint8MapOutput) ApplyURNArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]URN, error)) URNArrayOutput {
	return out.ApplyWithContext(ctx, applier).(URNArrayOutput)
}

// ApplyURNMap is like Apply, but returns a URNMapOutput.
func (out Uint8MapOutput) ApplyURNMap(applier func(v map[string]uint8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyURNMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]URN, error) {
		return applier(v)
	})
}

// ApplyURNMapWithContext is like ApplyWithContext, but returns a URNMapOutput.
func (out Uint8MapOutput) ApplyURNMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]URN, error)) URNMapOutput {
	return out.ApplyWithContext(ctx, applier).(URNMapOutput)
}

// ApplyUint is like Apply, but returns a UintOutput.
func (out Uint8MapOutput) ApplyUint(applier func(v map[string]uint8) (uint, error)) UintOutput {
	return out.ApplyUintWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (uint, error) {
		return applier(v)
	})
}

// ApplyUintWithContext is like ApplyWithContext, but returns a UintOutput.
func (out Uint8MapOutput) ApplyUintWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (uint, error)) UintOutput {
	return out.ApplyWithContext(ctx, applier).(UintOutput)
}

// ApplyUintArray is like Apply, but returns a UintArrayOutput.
func (out Uint8MapOutput) ApplyUintArray(applier func(v map[string]uint8) ([]uint, error)) UintArrayOutput {
	return out.ApplyUintArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]uint, error) {
		return applier(v)
	})
}

// ApplyUintArrayWithContext is like ApplyWithContext, but returns a UintArrayOutput.
func (out Uint8MapOutput) ApplyUintArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]uint, error)) UintArrayOutput {
	return out.ApplyWithContext(ctx, applier).(UintArrayOutput)
}

// ApplyUintMap is like Apply, but returns a UintMapOutput.
func (out Uint8MapOutput) ApplyUintMap(applier func(v map[string]uint8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyUintMapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]uint, error) {
		return applier(v)
	})
}

// ApplyUintMapWithContext is like ApplyWithContext, but returns a UintMapOutput.
func (out Uint8MapOutput) ApplyUintMapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]uint, error)) UintMapOutput {
	return out.ApplyWithContext(ctx, applier).(UintMapOutput)
}

// ApplyUint16 is like Apply, but returns a Uint16Output.
func (out Uint8MapOutput) ApplyUint16(applier func(v map[string]uint8) (uint16, error)) Uint16Output {
	return out.ApplyUint16WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (uint16, error) {
		return applier(v)
	})
}

// ApplyUint16WithContext is like ApplyWithContext, but returns a Uint16Output.
func (out Uint8MapOutput) ApplyUint16WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (uint16, error)) Uint16Output {
	return out.ApplyWithContext(ctx, applier).(Uint16Output)
}

// ApplyUint16Array is like Apply, but returns a Uint16ArrayOutput.
func (out Uint8MapOutput) ApplyUint16Array(applier func(v map[string]uint8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyUint16ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16ArrayWithContext is like ApplyWithContext, but returns a Uint16ArrayOutput.
func (out Uint8MapOutput) ApplyUint16ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]uint16, error)) Uint16ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16ArrayOutput)
}

// ApplyUint16Map is like Apply, but returns a Uint16MapOutput.
func (out Uint8MapOutput) ApplyUint16Map(applier func(v map[string]uint8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyUint16MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]uint16, error) {
		return applier(v)
	})
}

// ApplyUint16MapWithContext is like ApplyWithContext, but returns a Uint16MapOutput.
func (out Uint8MapOutput) ApplyUint16MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]uint16, error)) Uint16MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint16MapOutput)
}

// ApplyUint32 is like Apply, but returns a Uint32Output.
func (out Uint8MapOutput) ApplyUint32(applier func(v map[string]uint8) (uint32, error)) Uint32Output {
	return out.ApplyUint32WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (uint32, error) {
		return applier(v)
	})
}

// ApplyUint32WithContext is like ApplyWithContext, but returns a Uint32Output.
func (out Uint8MapOutput) ApplyUint32WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (uint32, error)) Uint32Output {
	return out.ApplyWithContext(ctx, applier).(Uint32Output)
}

// ApplyUint32Array is like Apply, but returns a Uint32ArrayOutput.
func (out Uint8MapOutput) ApplyUint32Array(applier func(v map[string]uint8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyUint32ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32ArrayWithContext is like ApplyWithContext, but returns a Uint32ArrayOutput.
func (out Uint8MapOutput) ApplyUint32ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]uint32, error)) Uint32ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32ArrayOutput)
}

// ApplyUint32Map is like Apply, but returns a Uint32MapOutput.
func (out Uint8MapOutput) ApplyUint32Map(applier func(v map[string]uint8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyUint32MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]uint32, error) {
		return applier(v)
	})
}

// ApplyUint32MapWithContext is like ApplyWithContext, but returns a Uint32MapOutput.
func (out Uint8MapOutput) ApplyUint32MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]uint32, error)) Uint32MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint32MapOutput)
}

// ApplyUint64 is like Apply, but returns a Uint64Output.
func (out Uint8MapOutput) ApplyUint64(applier func(v map[string]uint8) (uint64, error)) Uint64Output {
	return out.ApplyUint64WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (uint64, error) {
		return applier(v)
	})
}

// ApplyUint64WithContext is like ApplyWithContext, but returns a Uint64Output.
func (out Uint8MapOutput) ApplyUint64WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (uint64, error)) Uint64Output {
	return out.ApplyWithContext(ctx, applier).(Uint64Output)
}

// ApplyUint64Array is like Apply, but returns a Uint64ArrayOutput.
func (out Uint8MapOutput) ApplyUint64Array(applier func(v map[string]uint8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyUint64ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64ArrayWithContext is like ApplyWithContext, but returns a Uint64ArrayOutput.
func (out Uint8MapOutput) ApplyUint64ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]uint64, error)) Uint64ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64ArrayOutput)
}

// ApplyUint64Map is like Apply, but returns a Uint64MapOutput.
func (out Uint8MapOutput) ApplyUint64Map(applier func(v map[string]uint8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyUint64MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]uint64, error) {
		return applier(v)
	})
}

// ApplyUint64MapWithContext is like ApplyWithContext, but returns a Uint64MapOutput.
func (out Uint8MapOutput) ApplyUint64MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]uint64, error)) Uint64MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint64MapOutput)
}

// ApplyUint8 is like Apply, but returns a Uint8Output.
func (out Uint8MapOutput) ApplyUint8(applier func(v map[string]uint8) (uint8, error)) Uint8Output {
	return out.ApplyUint8WithContext(context.Background(), func(_ context.Context, v map[string]uint8) (uint8, error) {
		return applier(v)
	})
}

// ApplyUint8WithContext is like ApplyWithContext, but returns a Uint8Output.
func (out Uint8MapOutput) ApplyUint8WithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (uint8, error)) Uint8Output {
	return out.ApplyWithContext(ctx, applier).(Uint8Output)
}

// ApplyUint8Array is like Apply, but returns a Uint8ArrayOutput.
func (out Uint8MapOutput) ApplyUint8Array(applier func(v map[string]uint8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyUint8ArrayWithContext(context.Background(), func(_ context.Context, v map[string]uint8) ([]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8ArrayWithContext is like ApplyWithContext, but returns a Uint8ArrayOutput.
func (out Uint8MapOutput) ApplyUint8ArrayWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) ([]uint8, error)) Uint8ArrayOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8ArrayOutput)
}

// ApplyUint8Map is like Apply, but returns a Uint8MapOutput.
func (out Uint8MapOutput) ApplyUint8Map(applier func(v map[string]uint8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyUint8MapWithContext(context.Background(), func(_ context.Context, v map[string]uint8) (map[string]uint8, error) {
		return applier(v)
	})
}

// ApplyUint8MapWithContext is like ApplyWithContext, but returns a Uint8MapOutput.
func (out Uint8MapOutput) ApplyUint8MapWithContext(ctx context.Context, applier func(context.Context, map[string]uint8) (map[string]uint8, error)) Uint8MapOutput {
	return out.ApplyWithContext(ctx, applier).(Uint8MapOutput)
}

func init() {
	RegisterOutputType(AnyOutput{})
	RegisterOutputType(AnyArrayOutput{})
	RegisterOutputType(AnyMapOutput{})
	RegisterOutputType(ArchiveOutput{})
	RegisterOutputType(ArchiveArrayOutput{})
	RegisterOutputType(ArchiveMapOutput{})
	RegisterOutputType(AssetOutput{})
	RegisterOutputType(AssetArrayOutput{})
	RegisterOutputType(AssetMapOutput{})
	RegisterOutputType(AssetOrArchiveOutput{})
	RegisterOutputType(AssetOrArchiveArrayOutput{})
	RegisterOutputType(AssetOrArchiveMapOutput{})
	RegisterOutputType(BoolOutput{})
	RegisterOutputType(BoolArrayOutput{})
	RegisterOutputType(BoolMapOutput{})
	RegisterOutputType(Float32Output{})
	RegisterOutputType(Float32ArrayOutput{})
	RegisterOutputType(Float32MapOutput{})
	RegisterOutputType(Float64Output{})
	RegisterOutputType(Float64ArrayOutput{})
	RegisterOutputType(Float64MapOutput{})
	RegisterOutputType(IDOutput{})
	RegisterOutputType(IDArrayOutput{})
	RegisterOutputType(IDMapOutput{})
	RegisterOutputType(IntOutput{})
	RegisterOutputType(IntArrayOutput{})
	RegisterOutputType(IntMapOutput{})
	RegisterOutputType(Int16Output{})
	RegisterOutputType(Int16ArrayOutput{})
	RegisterOutputType(Int16MapOutput{})
	RegisterOutputType(Int32Output{})
	RegisterOutputType(Int32ArrayOutput{})
	RegisterOutputType(Int32MapOutput{})
	RegisterOutputType(Int64Output{})
	RegisterOutputType(Int64ArrayOutput{})
	RegisterOutputType(Int64MapOutput{})
	RegisterOutputType(Int8Output{})
	RegisterOutputType(Int8ArrayOutput{})
	RegisterOutputType(Int8MapOutput{})
	RegisterOutputType(StringOutput{})
	RegisterOutputType(StringArrayOutput{})
	RegisterOutputType(StringMapOutput{})
	RegisterOutputType(URNOutput{})
	RegisterOutputType(URNArrayOutput{})
	RegisterOutputType(URNMapOutput{})
	RegisterOutputType(UintOutput{})
	RegisterOutputType(UintArrayOutput{})
	RegisterOutputType(UintMapOutput{})
	RegisterOutputType(Uint16Output{})
	RegisterOutputType(Uint16ArrayOutput{})
	RegisterOutputType(Uint16MapOutput{})
	RegisterOutputType(Uint32Output{})
	RegisterOutputType(Uint32ArrayOutput{})
	RegisterOutputType(Uint32MapOutput{})
	RegisterOutputType(Uint64Output{})
	RegisterOutputType(Uint64ArrayOutput{})
	RegisterOutputType(Uint64MapOutput{})
	RegisterOutputType(Uint8Output{})
	RegisterOutputType(Uint8ArrayOutput{})
	RegisterOutputType(Uint8MapOutput{})
}

func (out IDOutput) await(ctx context.Context) (ID, bool, error) {
	id, known, err := OutputType(out).await(ctx)
	if !known || err != nil {
		return "", known, err
	}
	return ID(convert(id, stringType).(string)), true, nil
}

func (out URNOutput) await(ctx context.Context) (URN, bool, error) {
	id, known, err := OutputType(out).await(ctx)
	if !known || err != nil {
		return "", known, err
	}
	return URN(convert(id, stringType).(string)), true, nil
}

func convert(v interface{}, to reflect.Type) interface{} {
	rv := reflect.ValueOf(v)
	if !rv.Type().ConvertibleTo(to) {
		panic(errors.Errorf("cannot convert output value of type %s to %s", rv.Type(), to))
	}
	return rv.Convert(to).Interface()
}
